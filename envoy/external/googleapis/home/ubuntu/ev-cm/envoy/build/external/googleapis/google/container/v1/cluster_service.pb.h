// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/container/v1/cluster_service.proto

#ifndef PROTOBUF_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto__INCLUDED
#define PROTOBUF_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[62];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsNodeConfig_MetadataEntry_DoNotUseImpl();
void InitDefaultsNodeConfig_MetadataEntry_DoNotUse();
void InitDefaultsNodeConfig_LabelsEntry_DoNotUseImpl();
void InitDefaultsNodeConfig_LabelsEntry_DoNotUse();
void InitDefaultsNodeConfigImpl();
void InitDefaultsNodeConfig();
void InitDefaultsMasterAuthImpl();
void InitDefaultsMasterAuth();
void InitDefaultsClientCertificateConfigImpl();
void InitDefaultsClientCertificateConfig();
void InitDefaultsAddonsConfigImpl();
void InitDefaultsAddonsConfig();
void InitDefaultsHttpLoadBalancingImpl();
void InitDefaultsHttpLoadBalancing();
void InitDefaultsHorizontalPodAutoscalingImpl();
void InitDefaultsHorizontalPodAutoscaling();
void InitDefaultsKubernetesDashboardImpl();
void InitDefaultsKubernetesDashboard();
void InitDefaultsNetworkPolicyConfigImpl();
void InitDefaultsNetworkPolicyConfig();
void InitDefaultsMasterAuthorizedNetworksConfig_CidrBlockImpl();
void InitDefaultsMasterAuthorizedNetworksConfig_CidrBlock();
void InitDefaultsMasterAuthorizedNetworksConfigImpl();
void InitDefaultsMasterAuthorizedNetworksConfig();
void InitDefaultsLegacyAbacImpl();
void InitDefaultsLegacyAbac();
void InitDefaultsNetworkPolicyImpl();
void InitDefaultsNetworkPolicy();
void InitDefaultsIPAllocationPolicyImpl();
void InitDefaultsIPAllocationPolicy();
void InitDefaultsCluster_ResourceLabelsEntry_DoNotUseImpl();
void InitDefaultsCluster_ResourceLabelsEntry_DoNotUse();
void InitDefaultsClusterImpl();
void InitDefaultsCluster();
void InitDefaultsClusterUpdateImpl();
void InitDefaultsClusterUpdate();
void InitDefaultsOperationImpl();
void InitDefaultsOperation();
void InitDefaultsCreateClusterRequestImpl();
void InitDefaultsCreateClusterRequest();
void InitDefaultsGetClusterRequestImpl();
void InitDefaultsGetClusterRequest();
void InitDefaultsUpdateClusterRequestImpl();
void InitDefaultsUpdateClusterRequest();
void InitDefaultsUpdateNodePoolRequestImpl();
void InitDefaultsUpdateNodePoolRequest();
void InitDefaultsSetNodePoolAutoscalingRequestImpl();
void InitDefaultsSetNodePoolAutoscalingRequest();
void InitDefaultsSetLoggingServiceRequestImpl();
void InitDefaultsSetLoggingServiceRequest();
void InitDefaultsSetMonitoringServiceRequestImpl();
void InitDefaultsSetMonitoringServiceRequest();
void InitDefaultsSetAddonsConfigRequestImpl();
void InitDefaultsSetAddonsConfigRequest();
void InitDefaultsSetLocationsRequestImpl();
void InitDefaultsSetLocationsRequest();
void InitDefaultsUpdateMasterRequestImpl();
void InitDefaultsUpdateMasterRequest();
void InitDefaultsSetMasterAuthRequestImpl();
void InitDefaultsSetMasterAuthRequest();
void InitDefaultsDeleteClusterRequestImpl();
void InitDefaultsDeleteClusterRequest();
void InitDefaultsListClustersRequestImpl();
void InitDefaultsListClustersRequest();
void InitDefaultsListClustersResponseImpl();
void InitDefaultsListClustersResponse();
void InitDefaultsGetOperationRequestImpl();
void InitDefaultsGetOperationRequest();
void InitDefaultsListOperationsRequestImpl();
void InitDefaultsListOperationsRequest();
void InitDefaultsCancelOperationRequestImpl();
void InitDefaultsCancelOperationRequest();
void InitDefaultsListOperationsResponseImpl();
void InitDefaultsListOperationsResponse();
void InitDefaultsGetServerConfigRequestImpl();
void InitDefaultsGetServerConfigRequest();
void InitDefaultsServerConfigImpl();
void InitDefaultsServerConfig();
void InitDefaultsCreateNodePoolRequestImpl();
void InitDefaultsCreateNodePoolRequest();
void InitDefaultsDeleteNodePoolRequestImpl();
void InitDefaultsDeleteNodePoolRequest();
void InitDefaultsListNodePoolsRequestImpl();
void InitDefaultsListNodePoolsRequest();
void InitDefaultsGetNodePoolRequestImpl();
void InitDefaultsGetNodePoolRequest();
void InitDefaultsNodePoolImpl();
void InitDefaultsNodePool();
void InitDefaultsNodeManagementImpl();
void InitDefaultsNodeManagement();
void InitDefaultsAutoUpgradeOptionsImpl();
void InitDefaultsAutoUpgradeOptions();
void InitDefaultsMaintenancePolicyImpl();
void InitDefaultsMaintenancePolicy();
void InitDefaultsMaintenanceWindowImpl();
void InitDefaultsMaintenanceWindow();
void InitDefaultsDailyMaintenanceWindowImpl();
void InitDefaultsDailyMaintenanceWindow();
void InitDefaultsSetNodePoolManagementRequestImpl();
void InitDefaultsSetNodePoolManagementRequest();
void InitDefaultsSetNodePoolSizeRequestImpl();
void InitDefaultsSetNodePoolSizeRequest();
void InitDefaultsRollbackNodePoolUpgradeRequestImpl();
void InitDefaultsRollbackNodePoolUpgradeRequest();
void InitDefaultsListNodePoolsResponseImpl();
void InitDefaultsListNodePoolsResponse();
void InitDefaultsNodePoolAutoscalingImpl();
void InitDefaultsNodePoolAutoscaling();
void InitDefaultsSetLabelsRequest_ResourceLabelsEntry_DoNotUseImpl();
void InitDefaultsSetLabelsRequest_ResourceLabelsEntry_DoNotUse();
void InitDefaultsSetLabelsRequestImpl();
void InitDefaultsSetLabelsRequest();
void InitDefaultsSetLegacyAbacRequestImpl();
void InitDefaultsSetLegacyAbacRequest();
void InitDefaultsStartIPRotationRequestImpl();
void InitDefaultsStartIPRotationRequest();
void InitDefaultsCompleteIPRotationRequestImpl();
void InitDefaultsCompleteIPRotationRequest();
void InitDefaultsAcceleratorConfigImpl();
void InitDefaultsAcceleratorConfig();
void InitDefaultsSetNetworkPolicyRequestImpl();
void InitDefaultsSetNetworkPolicyRequest();
void InitDefaultsSetMaintenancePolicyRequestImpl();
void InitDefaultsSetMaintenancePolicyRequest();
inline void InitDefaults() {
  InitDefaultsNodeConfig_MetadataEntry_DoNotUse();
  InitDefaultsNodeConfig_LabelsEntry_DoNotUse();
  InitDefaultsNodeConfig();
  InitDefaultsMasterAuth();
  InitDefaultsClientCertificateConfig();
  InitDefaultsAddonsConfig();
  InitDefaultsHttpLoadBalancing();
  InitDefaultsHorizontalPodAutoscaling();
  InitDefaultsKubernetesDashboard();
  InitDefaultsNetworkPolicyConfig();
  InitDefaultsMasterAuthorizedNetworksConfig_CidrBlock();
  InitDefaultsMasterAuthorizedNetworksConfig();
  InitDefaultsLegacyAbac();
  InitDefaultsNetworkPolicy();
  InitDefaultsIPAllocationPolicy();
  InitDefaultsCluster_ResourceLabelsEntry_DoNotUse();
  InitDefaultsCluster();
  InitDefaultsClusterUpdate();
  InitDefaultsOperation();
  InitDefaultsCreateClusterRequest();
  InitDefaultsGetClusterRequest();
  InitDefaultsUpdateClusterRequest();
  InitDefaultsUpdateNodePoolRequest();
  InitDefaultsSetNodePoolAutoscalingRequest();
  InitDefaultsSetLoggingServiceRequest();
  InitDefaultsSetMonitoringServiceRequest();
  InitDefaultsSetAddonsConfigRequest();
  InitDefaultsSetLocationsRequest();
  InitDefaultsUpdateMasterRequest();
  InitDefaultsSetMasterAuthRequest();
  InitDefaultsDeleteClusterRequest();
  InitDefaultsListClustersRequest();
  InitDefaultsListClustersResponse();
  InitDefaultsGetOperationRequest();
  InitDefaultsListOperationsRequest();
  InitDefaultsCancelOperationRequest();
  InitDefaultsListOperationsResponse();
  InitDefaultsGetServerConfigRequest();
  InitDefaultsServerConfig();
  InitDefaultsCreateNodePoolRequest();
  InitDefaultsDeleteNodePoolRequest();
  InitDefaultsListNodePoolsRequest();
  InitDefaultsGetNodePoolRequest();
  InitDefaultsNodePool();
  InitDefaultsNodeManagement();
  InitDefaultsAutoUpgradeOptions();
  InitDefaultsMaintenancePolicy();
  InitDefaultsMaintenanceWindow();
  InitDefaultsDailyMaintenanceWindow();
  InitDefaultsSetNodePoolManagementRequest();
  InitDefaultsSetNodePoolSizeRequest();
  InitDefaultsRollbackNodePoolUpgradeRequest();
  InitDefaultsListNodePoolsResponse();
  InitDefaultsNodePoolAutoscaling();
  InitDefaultsSetLabelsRequest_ResourceLabelsEntry_DoNotUse();
  InitDefaultsSetLabelsRequest();
  InitDefaultsSetLegacyAbacRequest();
  InitDefaultsStartIPRotationRequest();
  InitDefaultsCompleteIPRotationRequest();
  InitDefaultsAcceleratorConfig();
  InitDefaultsSetNetworkPolicyRequest();
  InitDefaultsSetMaintenancePolicyRequest();
}
}  // namespace protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto
namespace google {
namespace container {
namespace v1 {
class AcceleratorConfig;
class AcceleratorConfigDefaultTypeInternal;
extern AcceleratorConfigDefaultTypeInternal _AcceleratorConfig_default_instance_;
class AddonsConfig;
class AddonsConfigDefaultTypeInternal;
extern AddonsConfigDefaultTypeInternal _AddonsConfig_default_instance_;
class AutoUpgradeOptions;
class AutoUpgradeOptionsDefaultTypeInternal;
extern AutoUpgradeOptionsDefaultTypeInternal _AutoUpgradeOptions_default_instance_;
class CancelOperationRequest;
class CancelOperationRequestDefaultTypeInternal;
extern CancelOperationRequestDefaultTypeInternal _CancelOperationRequest_default_instance_;
class ClientCertificateConfig;
class ClientCertificateConfigDefaultTypeInternal;
extern ClientCertificateConfigDefaultTypeInternal _ClientCertificateConfig_default_instance_;
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class ClusterUpdate;
class ClusterUpdateDefaultTypeInternal;
extern ClusterUpdateDefaultTypeInternal _ClusterUpdate_default_instance_;
class Cluster_ResourceLabelsEntry_DoNotUse;
class Cluster_ResourceLabelsEntry_DoNotUseDefaultTypeInternal;
extern Cluster_ResourceLabelsEntry_DoNotUseDefaultTypeInternal _Cluster_ResourceLabelsEntry_DoNotUse_default_instance_;
class CompleteIPRotationRequest;
class CompleteIPRotationRequestDefaultTypeInternal;
extern CompleteIPRotationRequestDefaultTypeInternal _CompleteIPRotationRequest_default_instance_;
class CreateClusterRequest;
class CreateClusterRequestDefaultTypeInternal;
extern CreateClusterRequestDefaultTypeInternal _CreateClusterRequest_default_instance_;
class CreateNodePoolRequest;
class CreateNodePoolRequestDefaultTypeInternal;
extern CreateNodePoolRequestDefaultTypeInternal _CreateNodePoolRequest_default_instance_;
class DailyMaintenanceWindow;
class DailyMaintenanceWindowDefaultTypeInternal;
extern DailyMaintenanceWindowDefaultTypeInternal _DailyMaintenanceWindow_default_instance_;
class DeleteClusterRequest;
class DeleteClusterRequestDefaultTypeInternal;
extern DeleteClusterRequestDefaultTypeInternal _DeleteClusterRequest_default_instance_;
class DeleteNodePoolRequest;
class DeleteNodePoolRequestDefaultTypeInternal;
extern DeleteNodePoolRequestDefaultTypeInternal _DeleteNodePoolRequest_default_instance_;
class GetClusterRequest;
class GetClusterRequestDefaultTypeInternal;
extern GetClusterRequestDefaultTypeInternal _GetClusterRequest_default_instance_;
class GetNodePoolRequest;
class GetNodePoolRequestDefaultTypeInternal;
extern GetNodePoolRequestDefaultTypeInternal _GetNodePoolRequest_default_instance_;
class GetOperationRequest;
class GetOperationRequestDefaultTypeInternal;
extern GetOperationRequestDefaultTypeInternal _GetOperationRequest_default_instance_;
class GetServerConfigRequest;
class GetServerConfigRequestDefaultTypeInternal;
extern GetServerConfigRequestDefaultTypeInternal _GetServerConfigRequest_default_instance_;
class HorizontalPodAutoscaling;
class HorizontalPodAutoscalingDefaultTypeInternal;
extern HorizontalPodAutoscalingDefaultTypeInternal _HorizontalPodAutoscaling_default_instance_;
class HttpLoadBalancing;
class HttpLoadBalancingDefaultTypeInternal;
extern HttpLoadBalancingDefaultTypeInternal _HttpLoadBalancing_default_instance_;
class IPAllocationPolicy;
class IPAllocationPolicyDefaultTypeInternal;
extern IPAllocationPolicyDefaultTypeInternal _IPAllocationPolicy_default_instance_;
class KubernetesDashboard;
class KubernetesDashboardDefaultTypeInternal;
extern KubernetesDashboardDefaultTypeInternal _KubernetesDashboard_default_instance_;
class LegacyAbac;
class LegacyAbacDefaultTypeInternal;
extern LegacyAbacDefaultTypeInternal _LegacyAbac_default_instance_;
class ListClustersRequest;
class ListClustersRequestDefaultTypeInternal;
extern ListClustersRequestDefaultTypeInternal _ListClustersRequest_default_instance_;
class ListClustersResponse;
class ListClustersResponseDefaultTypeInternal;
extern ListClustersResponseDefaultTypeInternal _ListClustersResponse_default_instance_;
class ListNodePoolsRequest;
class ListNodePoolsRequestDefaultTypeInternal;
extern ListNodePoolsRequestDefaultTypeInternal _ListNodePoolsRequest_default_instance_;
class ListNodePoolsResponse;
class ListNodePoolsResponseDefaultTypeInternal;
extern ListNodePoolsResponseDefaultTypeInternal _ListNodePoolsResponse_default_instance_;
class ListOperationsRequest;
class ListOperationsRequestDefaultTypeInternal;
extern ListOperationsRequestDefaultTypeInternal _ListOperationsRequest_default_instance_;
class ListOperationsResponse;
class ListOperationsResponseDefaultTypeInternal;
extern ListOperationsResponseDefaultTypeInternal _ListOperationsResponse_default_instance_;
class MaintenancePolicy;
class MaintenancePolicyDefaultTypeInternal;
extern MaintenancePolicyDefaultTypeInternal _MaintenancePolicy_default_instance_;
class MaintenanceWindow;
class MaintenanceWindowDefaultTypeInternal;
extern MaintenanceWindowDefaultTypeInternal _MaintenanceWindow_default_instance_;
class MasterAuth;
class MasterAuthDefaultTypeInternal;
extern MasterAuthDefaultTypeInternal _MasterAuth_default_instance_;
class MasterAuthorizedNetworksConfig;
class MasterAuthorizedNetworksConfigDefaultTypeInternal;
extern MasterAuthorizedNetworksConfigDefaultTypeInternal _MasterAuthorizedNetworksConfig_default_instance_;
class MasterAuthorizedNetworksConfig_CidrBlock;
class MasterAuthorizedNetworksConfig_CidrBlockDefaultTypeInternal;
extern MasterAuthorizedNetworksConfig_CidrBlockDefaultTypeInternal _MasterAuthorizedNetworksConfig_CidrBlock_default_instance_;
class NetworkPolicy;
class NetworkPolicyDefaultTypeInternal;
extern NetworkPolicyDefaultTypeInternal _NetworkPolicy_default_instance_;
class NetworkPolicyConfig;
class NetworkPolicyConfigDefaultTypeInternal;
extern NetworkPolicyConfigDefaultTypeInternal _NetworkPolicyConfig_default_instance_;
class NodeConfig;
class NodeConfigDefaultTypeInternal;
extern NodeConfigDefaultTypeInternal _NodeConfig_default_instance_;
class NodeConfig_LabelsEntry_DoNotUse;
class NodeConfig_LabelsEntry_DoNotUseDefaultTypeInternal;
extern NodeConfig_LabelsEntry_DoNotUseDefaultTypeInternal _NodeConfig_LabelsEntry_DoNotUse_default_instance_;
class NodeConfig_MetadataEntry_DoNotUse;
class NodeConfig_MetadataEntry_DoNotUseDefaultTypeInternal;
extern NodeConfig_MetadataEntry_DoNotUseDefaultTypeInternal _NodeConfig_MetadataEntry_DoNotUse_default_instance_;
class NodeManagement;
class NodeManagementDefaultTypeInternal;
extern NodeManagementDefaultTypeInternal _NodeManagement_default_instance_;
class NodePool;
class NodePoolDefaultTypeInternal;
extern NodePoolDefaultTypeInternal _NodePool_default_instance_;
class NodePoolAutoscaling;
class NodePoolAutoscalingDefaultTypeInternal;
extern NodePoolAutoscalingDefaultTypeInternal _NodePoolAutoscaling_default_instance_;
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class RollbackNodePoolUpgradeRequest;
class RollbackNodePoolUpgradeRequestDefaultTypeInternal;
extern RollbackNodePoolUpgradeRequestDefaultTypeInternal _RollbackNodePoolUpgradeRequest_default_instance_;
class ServerConfig;
class ServerConfigDefaultTypeInternal;
extern ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;
class SetAddonsConfigRequest;
class SetAddonsConfigRequestDefaultTypeInternal;
extern SetAddonsConfigRequestDefaultTypeInternal _SetAddonsConfigRequest_default_instance_;
class SetLabelsRequest;
class SetLabelsRequestDefaultTypeInternal;
extern SetLabelsRequestDefaultTypeInternal _SetLabelsRequest_default_instance_;
class SetLabelsRequest_ResourceLabelsEntry_DoNotUse;
class SetLabelsRequest_ResourceLabelsEntry_DoNotUseDefaultTypeInternal;
extern SetLabelsRequest_ResourceLabelsEntry_DoNotUseDefaultTypeInternal _SetLabelsRequest_ResourceLabelsEntry_DoNotUse_default_instance_;
class SetLegacyAbacRequest;
class SetLegacyAbacRequestDefaultTypeInternal;
extern SetLegacyAbacRequestDefaultTypeInternal _SetLegacyAbacRequest_default_instance_;
class SetLocationsRequest;
class SetLocationsRequestDefaultTypeInternal;
extern SetLocationsRequestDefaultTypeInternal _SetLocationsRequest_default_instance_;
class SetLoggingServiceRequest;
class SetLoggingServiceRequestDefaultTypeInternal;
extern SetLoggingServiceRequestDefaultTypeInternal _SetLoggingServiceRequest_default_instance_;
class SetMaintenancePolicyRequest;
class SetMaintenancePolicyRequestDefaultTypeInternal;
extern SetMaintenancePolicyRequestDefaultTypeInternal _SetMaintenancePolicyRequest_default_instance_;
class SetMasterAuthRequest;
class SetMasterAuthRequestDefaultTypeInternal;
extern SetMasterAuthRequestDefaultTypeInternal _SetMasterAuthRequest_default_instance_;
class SetMonitoringServiceRequest;
class SetMonitoringServiceRequestDefaultTypeInternal;
extern SetMonitoringServiceRequestDefaultTypeInternal _SetMonitoringServiceRequest_default_instance_;
class SetNetworkPolicyRequest;
class SetNetworkPolicyRequestDefaultTypeInternal;
extern SetNetworkPolicyRequestDefaultTypeInternal _SetNetworkPolicyRequest_default_instance_;
class SetNodePoolAutoscalingRequest;
class SetNodePoolAutoscalingRequestDefaultTypeInternal;
extern SetNodePoolAutoscalingRequestDefaultTypeInternal _SetNodePoolAutoscalingRequest_default_instance_;
class SetNodePoolManagementRequest;
class SetNodePoolManagementRequestDefaultTypeInternal;
extern SetNodePoolManagementRequestDefaultTypeInternal _SetNodePoolManagementRequest_default_instance_;
class SetNodePoolSizeRequest;
class SetNodePoolSizeRequestDefaultTypeInternal;
extern SetNodePoolSizeRequestDefaultTypeInternal _SetNodePoolSizeRequest_default_instance_;
class StartIPRotationRequest;
class StartIPRotationRequestDefaultTypeInternal;
extern StartIPRotationRequestDefaultTypeInternal _StartIPRotationRequest_default_instance_;
class UpdateClusterRequest;
class UpdateClusterRequestDefaultTypeInternal;
extern UpdateClusterRequestDefaultTypeInternal _UpdateClusterRequest_default_instance_;
class UpdateMasterRequest;
class UpdateMasterRequestDefaultTypeInternal;
extern UpdateMasterRequestDefaultTypeInternal _UpdateMasterRequest_default_instance_;
class UpdateNodePoolRequest;
class UpdateNodePoolRequestDefaultTypeInternal;
extern UpdateNodePoolRequestDefaultTypeInternal _UpdateNodePoolRequest_default_instance_;
}  // namespace v1
}  // namespace container
}  // namespace google
namespace google {
namespace container {
namespace v1 {

enum NetworkPolicy_Provider {
  NetworkPolicy_Provider_PROVIDER_UNSPECIFIED = 0,
  NetworkPolicy_Provider_CALICO = 1,
  NetworkPolicy_Provider_NetworkPolicy_Provider_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NetworkPolicy_Provider_NetworkPolicy_Provider_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NetworkPolicy_Provider_IsValid(int value);
const NetworkPolicy_Provider NetworkPolicy_Provider_Provider_MIN = NetworkPolicy_Provider_PROVIDER_UNSPECIFIED;
const NetworkPolicy_Provider NetworkPolicy_Provider_Provider_MAX = NetworkPolicy_Provider_CALICO;
const int NetworkPolicy_Provider_Provider_ARRAYSIZE = NetworkPolicy_Provider_Provider_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetworkPolicy_Provider_descriptor();
inline const ::std::string& NetworkPolicy_Provider_Name(NetworkPolicy_Provider value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetworkPolicy_Provider_descriptor(), value);
}
inline bool NetworkPolicy_Provider_Parse(
    const ::std::string& name, NetworkPolicy_Provider* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetworkPolicy_Provider>(
    NetworkPolicy_Provider_descriptor(), name, value);
}
enum Cluster_Status {
  Cluster_Status_STATUS_UNSPECIFIED = 0,
  Cluster_Status_PROVISIONING = 1,
  Cluster_Status_RUNNING = 2,
  Cluster_Status_RECONCILING = 3,
  Cluster_Status_STOPPING = 4,
  Cluster_Status_ERROR = 5,
  Cluster_Status_Cluster_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Cluster_Status_Cluster_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Cluster_Status_IsValid(int value);
const Cluster_Status Cluster_Status_Status_MIN = Cluster_Status_STATUS_UNSPECIFIED;
const Cluster_Status Cluster_Status_Status_MAX = Cluster_Status_ERROR;
const int Cluster_Status_Status_ARRAYSIZE = Cluster_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Cluster_Status_descriptor();
inline const ::std::string& Cluster_Status_Name(Cluster_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Cluster_Status_descriptor(), value);
}
inline bool Cluster_Status_Parse(
    const ::std::string& name, Cluster_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Cluster_Status>(
    Cluster_Status_descriptor(), name, value);
}
enum Operation_Status {
  Operation_Status_STATUS_UNSPECIFIED = 0,
  Operation_Status_PENDING = 1,
  Operation_Status_RUNNING = 2,
  Operation_Status_DONE = 3,
  Operation_Status_ABORTING = 4,
  Operation_Status_Operation_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Operation_Status_Operation_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Operation_Status_IsValid(int value);
const Operation_Status Operation_Status_Status_MIN = Operation_Status_STATUS_UNSPECIFIED;
const Operation_Status Operation_Status_Status_MAX = Operation_Status_ABORTING;
const int Operation_Status_Status_ARRAYSIZE = Operation_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_Status_descriptor();
inline const ::std::string& Operation_Status_Name(Operation_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_Status_descriptor(), value);
}
inline bool Operation_Status_Parse(
    const ::std::string& name, Operation_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_Status>(
    Operation_Status_descriptor(), name, value);
}
enum Operation_Type {
  Operation_Type_TYPE_UNSPECIFIED = 0,
  Operation_Type_CREATE_CLUSTER = 1,
  Operation_Type_DELETE_CLUSTER = 2,
  Operation_Type_UPGRADE_MASTER = 3,
  Operation_Type_UPGRADE_NODES = 4,
  Operation_Type_REPAIR_CLUSTER = 5,
  Operation_Type_UPDATE_CLUSTER = 6,
  Operation_Type_CREATE_NODE_POOL = 7,
  Operation_Type_DELETE_NODE_POOL = 8,
  Operation_Type_SET_NODE_POOL_MANAGEMENT = 9,
  Operation_Type_AUTO_REPAIR_NODES = 10,
  Operation_Type_AUTO_UPGRADE_NODES = 11,
  Operation_Type_SET_LABELS = 12,
  Operation_Type_SET_MASTER_AUTH = 13,
  Operation_Type_SET_NODE_POOL_SIZE = 14,
  Operation_Type_SET_NETWORK_POLICY = 15,
  Operation_Type_SET_MAINTENANCE_POLICY = 16,
  Operation_Type_Operation_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Operation_Type_Operation_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Operation_Type_IsValid(int value);
const Operation_Type Operation_Type_Type_MIN = Operation_Type_TYPE_UNSPECIFIED;
const Operation_Type Operation_Type_Type_MAX = Operation_Type_SET_MAINTENANCE_POLICY;
const int Operation_Type_Type_ARRAYSIZE = Operation_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_Type_descriptor();
inline const ::std::string& Operation_Type_Name(Operation_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_Type_descriptor(), value);
}
inline bool Operation_Type_Parse(
    const ::std::string& name, Operation_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_Type>(
    Operation_Type_descriptor(), name, value);
}
enum SetMasterAuthRequest_Action {
  SetMasterAuthRequest_Action_UNKNOWN = 0,
  SetMasterAuthRequest_Action_SET_PASSWORD = 1,
  SetMasterAuthRequest_Action_GENERATE_PASSWORD = 2,
  SetMasterAuthRequest_Action_SET_USERNAME = 3,
  SetMasterAuthRequest_Action_SetMasterAuthRequest_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SetMasterAuthRequest_Action_SetMasterAuthRequest_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SetMasterAuthRequest_Action_IsValid(int value);
const SetMasterAuthRequest_Action SetMasterAuthRequest_Action_Action_MIN = SetMasterAuthRequest_Action_UNKNOWN;
const SetMasterAuthRequest_Action SetMasterAuthRequest_Action_Action_MAX = SetMasterAuthRequest_Action_SET_USERNAME;
const int SetMasterAuthRequest_Action_Action_ARRAYSIZE = SetMasterAuthRequest_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* SetMasterAuthRequest_Action_descriptor();
inline const ::std::string& SetMasterAuthRequest_Action_Name(SetMasterAuthRequest_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    SetMasterAuthRequest_Action_descriptor(), value);
}
inline bool SetMasterAuthRequest_Action_Parse(
    const ::std::string& name, SetMasterAuthRequest_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SetMasterAuthRequest_Action>(
    SetMasterAuthRequest_Action_descriptor(), name, value);
}
enum NodePool_Status {
  NodePool_Status_STATUS_UNSPECIFIED = 0,
  NodePool_Status_PROVISIONING = 1,
  NodePool_Status_RUNNING = 2,
  NodePool_Status_RUNNING_WITH_ERROR = 3,
  NodePool_Status_RECONCILING = 4,
  NodePool_Status_STOPPING = 5,
  NodePool_Status_ERROR = 6,
  NodePool_Status_NodePool_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NodePool_Status_NodePool_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NodePool_Status_IsValid(int value);
const NodePool_Status NodePool_Status_Status_MIN = NodePool_Status_STATUS_UNSPECIFIED;
const NodePool_Status NodePool_Status_Status_MAX = NodePool_Status_ERROR;
const int NodePool_Status_Status_ARRAYSIZE = NodePool_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodePool_Status_descriptor();
inline const ::std::string& NodePool_Status_Name(NodePool_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodePool_Status_descriptor(), value);
}
inline bool NodePool_Status_Parse(
    const ::std::string& name, NodePool_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodePool_Status>(
    NodePool_Status_descriptor(), name, value);
}
// ===================================================================

class NodeConfig_MetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<NodeConfig_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<NodeConfig_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  NodeConfig_MetadataEntry_DoNotUse();
  NodeConfig_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NodeConfig_MetadataEntry_DoNotUse& other);
  static const NodeConfig_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NodeConfig_MetadataEntry_DoNotUse*>(&_NodeConfig_MetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class NodeConfig_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<NodeConfig_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<NodeConfig_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  NodeConfig_LabelsEntry_DoNotUse();
  NodeConfig_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NodeConfig_LabelsEntry_DoNotUse& other);
  static const NodeConfig_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NodeConfig_LabelsEntry_DoNotUse*>(&_NodeConfig_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class NodeConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NodeConfig) */ {
 public:
  NodeConfig();
  virtual ~NodeConfig();

  NodeConfig(const NodeConfig& from);

  inline NodeConfig& operator=(const NodeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeConfig(NodeConfig&& from) noexcept
    : NodeConfig() {
    *this = ::std::move(from);
  }

  inline NodeConfig& operator=(NodeConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeConfig* internal_default_instance() {
    return reinterpret_cast<const NodeConfig*>(
               &_NodeConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(NodeConfig* other);
  friend void swap(NodeConfig& a, NodeConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeConfig& from);
  void MergeFrom(const NodeConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string oauth_scopes = 3;
  int oauth_scopes_size() const;
  void clear_oauth_scopes();
  static const int kOauthScopesFieldNumber = 3;
  const ::std::string& oauth_scopes(int index) const;
  ::std::string* mutable_oauth_scopes(int index);
  void set_oauth_scopes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_oauth_scopes(int index, ::std::string&& value);
  #endif
  void set_oauth_scopes(int index, const char* value);
  void set_oauth_scopes(int index, const char* value, size_t size);
  ::std::string* add_oauth_scopes();
  void add_oauth_scopes(const ::std::string& value);
  #if LANG_CXX11
  void add_oauth_scopes(::std::string&& value);
  #endif
  void add_oauth_scopes(const char* value);
  void add_oauth_scopes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& oauth_scopes() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_oauth_scopes();

  // map<string, string> metadata = 4;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // map<string, string> labels = 6;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // repeated string tags = 8;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 8;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // repeated .google.container.v1.AcceleratorConfig accelerators = 11;
  int accelerators_size() const;
  void clear_accelerators();
  static const int kAcceleratorsFieldNumber = 11;
  const ::google::container::v1::AcceleratorConfig& accelerators(int index) const;
  ::google::container::v1::AcceleratorConfig* mutable_accelerators(int index);
  ::google::container::v1::AcceleratorConfig* add_accelerators();
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::AcceleratorConfig >*
      mutable_accelerators();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::AcceleratorConfig >&
      accelerators() const;

  // string machine_type = 1;
  void clear_machine_type();
  static const int kMachineTypeFieldNumber = 1;
  const ::std::string& machine_type() const;
  void set_machine_type(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_type(::std::string&& value);
  #endif
  void set_machine_type(const char* value);
  void set_machine_type(const char* value, size_t size);
  ::std::string* mutable_machine_type();
  ::std::string* release_machine_type();
  void set_allocated_machine_type(::std::string* machine_type);

  // string image_type = 5;
  void clear_image_type();
  static const int kImageTypeFieldNumber = 5;
  const ::std::string& image_type() const;
  void set_image_type(const ::std::string& value);
  #if LANG_CXX11
  void set_image_type(::std::string&& value);
  #endif
  void set_image_type(const char* value);
  void set_image_type(const char* value, size_t size);
  ::std::string* mutable_image_type();
  ::std::string* release_image_type();
  void set_allocated_image_type(::std::string* image_type);

  // string service_account = 9;
  void clear_service_account();
  static const int kServiceAccountFieldNumber = 9;
  const ::std::string& service_account() const;
  void set_service_account(const ::std::string& value);
  #if LANG_CXX11
  void set_service_account(::std::string&& value);
  #endif
  void set_service_account(const char* value);
  void set_service_account(const char* value, size_t size);
  ::std::string* mutable_service_account();
  ::std::string* release_service_account();
  void set_allocated_service_account(::std::string* service_account);

  // string min_cpu_platform = 13;
  void clear_min_cpu_platform();
  static const int kMinCpuPlatformFieldNumber = 13;
  const ::std::string& min_cpu_platform() const;
  void set_min_cpu_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_min_cpu_platform(::std::string&& value);
  #endif
  void set_min_cpu_platform(const char* value);
  void set_min_cpu_platform(const char* value, size_t size);
  ::std::string* mutable_min_cpu_platform();
  ::std::string* release_min_cpu_platform();
  void set_allocated_min_cpu_platform(::std::string* min_cpu_platform);

  // int32 disk_size_gb = 2;
  void clear_disk_size_gb();
  static const int kDiskSizeGbFieldNumber = 2;
  ::google::protobuf::int32 disk_size_gb() const;
  void set_disk_size_gb(::google::protobuf::int32 value);

  // int32 local_ssd_count = 7;
  void clear_local_ssd_count();
  static const int kLocalSsdCountFieldNumber = 7;
  ::google::protobuf::int32 local_ssd_count() const;
  void set_local_ssd_count(::google::protobuf::int32 value);

  // bool preemptible = 10;
  void clear_preemptible();
  static const int kPreemptibleFieldNumber = 10;
  bool preemptible() const;
  void set_preemptible(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NodeConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> oauth_scopes_;
  ::google::protobuf::internal::MapField<
      NodeConfig_MetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::google::protobuf::internal::MapField<
      NodeConfig_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::AcceleratorConfig > accelerators_;
  ::google::protobuf::internal::ArenaStringPtr machine_type_;
  ::google::protobuf::internal::ArenaStringPtr image_type_;
  ::google::protobuf::internal::ArenaStringPtr service_account_;
  ::google::protobuf::internal::ArenaStringPtr min_cpu_platform_;
  ::google::protobuf::int32 disk_size_gb_;
  ::google::protobuf::int32 local_ssd_count_;
  bool preemptible_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsNodeConfigImpl();
};
// -------------------------------------------------------------------

class MasterAuth : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.MasterAuth) */ {
 public:
  MasterAuth();
  virtual ~MasterAuth();

  MasterAuth(const MasterAuth& from);

  inline MasterAuth& operator=(const MasterAuth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MasterAuth(MasterAuth&& from) noexcept
    : MasterAuth() {
    *this = ::std::move(from);
  }

  inline MasterAuth& operator=(MasterAuth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterAuth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterAuth* internal_default_instance() {
    return reinterpret_cast<const MasterAuth*>(
               &_MasterAuth_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(MasterAuth* other);
  friend void swap(MasterAuth& a, MasterAuth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MasterAuth* New() const PROTOBUF_FINAL { return New(NULL); }

  MasterAuth* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MasterAuth& from);
  void MergeFrom(const MasterAuth& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MasterAuth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1;
  void clear_username();
  static const int kUsernameFieldNumber = 1;
  const ::std::string& username() const;
  void set_username(const ::std::string& value);
  #if LANG_CXX11
  void set_username(::std::string&& value);
  #endif
  void set_username(const char* value);
  void set_username(const char* value, size_t size);
  ::std::string* mutable_username();
  ::std::string* release_username();
  void set_allocated_username(::std::string* username);

  // string password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // string cluster_ca_certificate = 100;
  void clear_cluster_ca_certificate();
  static const int kClusterCaCertificateFieldNumber = 100;
  const ::std::string& cluster_ca_certificate() const;
  void set_cluster_ca_certificate(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_ca_certificate(::std::string&& value);
  #endif
  void set_cluster_ca_certificate(const char* value);
  void set_cluster_ca_certificate(const char* value, size_t size);
  ::std::string* mutable_cluster_ca_certificate();
  ::std::string* release_cluster_ca_certificate();
  void set_allocated_cluster_ca_certificate(::std::string* cluster_ca_certificate);

  // string client_certificate = 101;
  void clear_client_certificate();
  static const int kClientCertificateFieldNumber = 101;
  const ::std::string& client_certificate() const;
  void set_client_certificate(const ::std::string& value);
  #if LANG_CXX11
  void set_client_certificate(::std::string&& value);
  #endif
  void set_client_certificate(const char* value);
  void set_client_certificate(const char* value, size_t size);
  ::std::string* mutable_client_certificate();
  ::std::string* release_client_certificate();
  void set_allocated_client_certificate(::std::string* client_certificate);

  // string client_key = 102;
  void clear_client_key();
  static const int kClientKeyFieldNumber = 102;
  const ::std::string& client_key() const;
  void set_client_key(const ::std::string& value);
  #if LANG_CXX11
  void set_client_key(::std::string&& value);
  #endif
  void set_client_key(const char* value);
  void set_client_key(const char* value, size_t size);
  ::std::string* mutable_client_key();
  ::std::string* release_client_key();
  void set_allocated_client_key(::std::string* client_key);

  // .google.container.v1.ClientCertificateConfig client_certificate_config = 3;
  bool has_client_certificate_config() const;
  void clear_client_certificate_config();
  static const int kClientCertificateConfigFieldNumber = 3;
  const ::google::container::v1::ClientCertificateConfig& client_certificate_config() const;
  ::google::container::v1::ClientCertificateConfig* release_client_certificate_config();
  ::google::container::v1::ClientCertificateConfig* mutable_client_certificate_config();
  void set_allocated_client_certificate_config(::google::container::v1::ClientCertificateConfig* client_certificate_config);

  // @@protoc_insertion_point(class_scope:google.container.v1.MasterAuth)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr cluster_ca_certificate_;
  ::google::protobuf::internal::ArenaStringPtr client_certificate_;
  ::google::protobuf::internal::ArenaStringPtr client_key_;
  ::google::container::v1::ClientCertificateConfig* client_certificate_config_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsMasterAuthImpl();
};
// -------------------------------------------------------------------

class ClientCertificateConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ClientCertificateConfig) */ {
 public:
  ClientCertificateConfig();
  virtual ~ClientCertificateConfig();

  ClientCertificateConfig(const ClientCertificateConfig& from);

  inline ClientCertificateConfig& operator=(const ClientCertificateConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientCertificateConfig(ClientCertificateConfig&& from) noexcept
    : ClientCertificateConfig() {
    *this = ::std::move(from);
  }

  inline ClientCertificateConfig& operator=(ClientCertificateConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientCertificateConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientCertificateConfig* internal_default_instance() {
    return reinterpret_cast<const ClientCertificateConfig*>(
               &_ClientCertificateConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ClientCertificateConfig* other);
  friend void swap(ClientCertificateConfig& a, ClientCertificateConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientCertificateConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientCertificateConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientCertificateConfig& from);
  void MergeFrom(const ClientCertificateConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientCertificateConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool issue_client_certificate = 1;
  void clear_issue_client_certificate();
  static const int kIssueClientCertificateFieldNumber = 1;
  bool issue_client_certificate() const;
  void set_issue_client_certificate(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.ClientCertificateConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool issue_client_certificate_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsClientCertificateConfigImpl();
};
// -------------------------------------------------------------------

class AddonsConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.AddonsConfig) */ {
 public:
  AddonsConfig();
  virtual ~AddonsConfig();

  AddonsConfig(const AddonsConfig& from);

  inline AddonsConfig& operator=(const AddonsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddonsConfig(AddonsConfig&& from) noexcept
    : AddonsConfig() {
    *this = ::std::move(from);
  }

  inline AddonsConfig& operator=(AddonsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddonsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddonsConfig* internal_default_instance() {
    return reinterpret_cast<const AddonsConfig*>(
               &_AddonsConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(AddonsConfig* other);
  friend void swap(AddonsConfig& a, AddonsConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddonsConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  AddonsConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AddonsConfig& from);
  void MergeFrom(const AddonsConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AddonsConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.container.v1.HttpLoadBalancing http_load_balancing = 1;
  bool has_http_load_balancing() const;
  void clear_http_load_balancing();
  static const int kHttpLoadBalancingFieldNumber = 1;
  const ::google::container::v1::HttpLoadBalancing& http_load_balancing() const;
  ::google::container::v1::HttpLoadBalancing* release_http_load_balancing();
  ::google::container::v1::HttpLoadBalancing* mutable_http_load_balancing();
  void set_allocated_http_load_balancing(::google::container::v1::HttpLoadBalancing* http_load_balancing);

  // .google.container.v1.HorizontalPodAutoscaling horizontal_pod_autoscaling = 2;
  bool has_horizontal_pod_autoscaling() const;
  void clear_horizontal_pod_autoscaling();
  static const int kHorizontalPodAutoscalingFieldNumber = 2;
  const ::google::container::v1::HorizontalPodAutoscaling& horizontal_pod_autoscaling() const;
  ::google::container::v1::HorizontalPodAutoscaling* release_horizontal_pod_autoscaling();
  ::google::container::v1::HorizontalPodAutoscaling* mutable_horizontal_pod_autoscaling();
  void set_allocated_horizontal_pod_autoscaling(::google::container::v1::HorizontalPodAutoscaling* horizontal_pod_autoscaling);

  // .google.container.v1.KubernetesDashboard kubernetes_dashboard = 3;
  bool has_kubernetes_dashboard() const;
  void clear_kubernetes_dashboard();
  static const int kKubernetesDashboardFieldNumber = 3;
  const ::google::container::v1::KubernetesDashboard& kubernetes_dashboard() const;
  ::google::container::v1::KubernetesDashboard* release_kubernetes_dashboard();
  ::google::container::v1::KubernetesDashboard* mutable_kubernetes_dashboard();
  void set_allocated_kubernetes_dashboard(::google::container::v1::KubernetesDashboard* kubernetes_dashboard);

  // .google.container.v1.NetworkPolicyConfig network_policy_config = 4;
  bool has_network_policy_config() const;
  void clear_network_policy_config();
  static const int kNetworkPolicyConfigFieldNumber = 4;
  const ::google::container::v1::NetworkPolicyConfig& network_policy_config() const;
  ::google::container::v1::NetworkPolicyConfig* release_network_policy_config();
  ::google::container::v1::NetworkPolicyConfig* mutable_network_policy_config();
  void set_allocated_network_policy_config(::google::container::v1::NetworkPolicyConfig* network_policy_config);

  // @@protoc_insertion_point(class_scope:google.container.v1.AddonsConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::container::v1::HttpLoadBalancing* http_load_balancing_;
  ::google::container::v1::HorizontalPodAutoscaling* horizontal_pod_autoscaling_;
  ::google::container::v1::KubernetesDashboard* kubernetes_dashboard_;
  ::google::container::v1::NetworkPolicyConfig* network_policy_config_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsAddonsConfigImpl();
};
// -------------------------------------------------------------------

class HttpLoadBalancing : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.HttpLoadBalancing) */ {
 public:
  HttpLoadBalancing();
  virtual ~HttpLoadBalancing();

  HttpLoadBalancing(const HttpLoadBalancing& from);

  inline HttpLoadBalancing& operator=(const HttpLoadBalancing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpLoadBalancing(HttpLoadBalancing&& from) noexcept
    : HttpLoadBalancing() {
    *this = ::std::move(from);
  }

  inline HttpLoadBalancing& operator=(HttpLoadBalancing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HttpLoadBalancing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpLoadBalancing* internal_default_instance() {
    return reinterpret_cast<const HttpLoadBalancing*>(
               &_HttpLoadBalancing_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(HttpLoadBalancing* other);
  friend void swap(HttpLoadBalancing& a, HttpLoadBalancing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpLoadBalancing* New() const PROTOBUF_FINAL { return New(NULL); }

  HttpLoadBalancing* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HttpLoadBalancing& from);
  void MergeFrom(const HttpLoadBalancing& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HttpLoadBalancing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool disabled = 1;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.HttpLoadBalancing)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsHttpLoadBalancingImpl();
};
// -------------------------------------------------------------------

class HorizontalPodAutoscaling : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.HorizontalPodAutoscaling) */ {
 public:
  HorizontalPodAutoscaling();
  virtual ~HorizontalPodAutoscaling();

  HorizontalPodAutoscaling(const HorizontalPodAutoscaling& from);

  inline HorizontalPodAutoscaling& operator=(const HorizontalPodAutoscaling& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HorizontalPodAutoscaling(HorizontalPodAutoscaling&& from) noexcept
    : HorizontalPodAutoscaling() {
    *this = ::std::move(from);
  }

  inline HorizontalPodAutoscaling& operator=(HorizontalPodAutoscaling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const HorizontalPodAutoscaling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HorizontalPodAutoscaling* internal_default_instance() {
    return reinterpret_cast<const HorizontalPodAutoscaling*>(
               &_HorizontalPodAutoscaling_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(HorizontalPodAutoscaling* other);
  friend void swap(HorizontalPodAutoscaling& a, HorizontalPodAutoscaling& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HorizontalPodAutoscaling* New() const PROTOBUF_FINAL { return New(NULL); }

  HorizontalPodAutoscaling* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const HorizontalPodAutoscaling& from);
  void MergeFrom(const HorizontalPodAutoscaling& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(HorizontalPodAutoscaling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool disabled = 1;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.HorizontalPodAutoscaling)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsHorizontalPodAutoscalingImpl();
};
// -------------------------------------------------------------------

class KubernetesDashboard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.KubernetesDashboard) */ {
 public:
  KubernetesDashboard();
  virtual ~KubernetesDashboard();

  KubernetesDashboard(const KubernetesDashboard& from);

  inline KubernetesDashboard& operator=(const KubernetesDashboard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KubernetesDashboard(KubernetesDashboard&& from) noexcept
    : KubernetesDashboard() {
    *this = ::std::move(from);
  }

  inline KubernetesDashboard& operator=(KubernetesDashboard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const KubernetesDashboard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KubernetesDashboard* internal_default_instance() {
    return reinterpret_cast<const KubernetesDashboard*>(
               &_KubernetesDashboard_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(KubernetesDashboard* other);
  friend void swap(KubernetesDashboard& a, KubernetesDashboard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KubernetesDashboard* New() const PROTOBUF_FINAL { return New(NULL); }

  KubernetesDashboard* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const KubernetesDashboard& from);
  void MergeFrom(const KubernetesDashboard& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(KubernetesDashboard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool disabled = 1;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.KubernetesDashboard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsKubernetesDashboardImpl();
};
// -------------------------------------------------------------------

class NetworkPolicyConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NetworkPolicyConfig) */ {
 public:
  NetworkPolicyConfig();
  virtual ~NetworkPolicyConfig();

  NetworkPolicyConfig(const NetworkPolicyConfig& from);

  inline NetworkPolicyConfig& operator=(const NetworkPolicyConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkPolicyConfig(NetworkPolicyConfig&& from) noexcept
    : NetworkPolicyConfig() {
    *this = ::std::move(from);
  }

  inline NetworkPolicyConfig& operator=(NetworkPolicyConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkPolicyConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkPolicyConfig* internal_default_instance() {
    return reinterpret_cast<const NetworkPolicyConfig*>(
               &_NetworkPolicyConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(NetworkPolicyConfig* other);
  friend void swap(NetworkPolicyConfig& a, NetworkPolicyConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkPolicyConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkPolicyConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetworkPolicyConfig& from);
  void MergeFrom(const NetworkPolicyConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetworkPolicyConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool disabled = 1;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NetworkPolicyConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsNetworkPolicyConfigImpl();
};
// -------------------------------------------------------------------

class MasterAuthorizedNetworksConfig_CidrBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock) */ {
 public:
  MasterAuthorizedNetworksConfig_CidrBlock();
  virtual ~MasterAuthorizedNetworksConfig_CidrBlock();

  MasterAuthorizedNetworksConfig_CidrBlock(const MasterAuthorizedNetworksConfig_CidrBlock& from);

  inline MasterAuthorizedNetworksConfig_CidrBlock& operator=(const MasterAuthorizedNetworksConfig_CidrBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MasterAuthorizedNetworksConfig_CidrBlock(MasterAuthorizedNetworksConfig_CidrBlock&& from) noexcept
    : MasterAuthorizedNetworksConfig_CidrBlock() {
    *this = ::std::move(from);
  }

  inline MasterAuthorizedNetworksConfig_CidrBlock& operator=(MasterAuthorizedNetworksConfig_CidrBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterAuthorizedNetworksConfig_CidrBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterAuthorizedNetworksConfig_CidrBlock* internal_default_instance() {
    return reinterpret_cast<const MasterAuthorizedNetworksConfig_CidrBlock*>(
               &_MasterAuthorizedNetworksConfig_CidrBlock_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(MasterAuthorizedNetworksConfig_CidrBlock* other);
  friend void swap(MasterAuthorizedNetworksConfig_CidrBlock& a, MasterAuthorizedNetworksConfig_CidrBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MasterAuthorizedNetworksConfig_CidrBlock* New() const PROTOBUF_FINAL { return New(NULL); }

  MasterAuthorizedNetworksConfig_CidrBlock* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MasterAuthorizedNetworksConfig_CidrBlock& from);
  void MergeFrom(const MasterAuthorizedNetworksConfig_CidrBlock& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MasterAuthorizedNetworksConfig_CidrBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string display_name = 1;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 1;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string cidr_block = 2;
  void clear_cidr_block();
  static const int kCidrBlockFieldNumber = 2;
  const ::std::string& cidr_block() const;
  void set_cidr_block(const ::std::string& value);
  #if LANG_CXX11
  void set_cidr_block(::std::string&& value);
  #endif
  void set_cidr_block(const char* value);
  void set_cidr_block(const char* value, size_t size);
  ::std::string* mutable_cidr_block();
  ::std::string* release_cidr_block();
  void set_allocated_cidr_block(::std::string* cidr_block);

  // @@protoc_insertion_point(class_scope:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr cidr_block_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsMasterAuthorizedNetworksConfig_CidrBlockImpl();
};
// -------------------------------------------------------------------

class MasterAuthorizedNetworksConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.MasterAuthorizedNetworksConfig) */ {
 public:
  MasterAuthorizedNetworksConfig();
  virtual ~MasterAuthorizedNetworksConfig();

  MasterAuthorizedNetworksConfig(const MasterAuthorizedNetworksConfig& from);

  inline MasterAuthorizedNetworksConfig& operator=(const MasterAuthorizedNetworksConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MasterAuthorizedNetworksConfig(MasterAuthorizedNetworksConfig&& from) noexcept
    : MasterAuthorizedNetworksConfig() {
    *this = ::std::move(from);
  }

  inline MasterAuthorizedNetworksConfig& operator=(MasterAuthorizedNetworksConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MasterAuthorizedNetworksConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterAuthorizedNetworksConfig* internal_default_instance() {
    return reinterpret_cast<const MasterAuthorizedNetworksConfig*>(
               &_MasterAuthorizedNetworksConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(MasterAuthorizedNetworksConfig* other);
  friend void swap(MasterAuthorizedNetworksConfig& a, MasterAuthorizedNetworksConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MasterAuthorizedNetworksConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  MasterAuthorizedNetworksConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MasterAuthorizedNetworksConfig& from);
  void MergeFrom(const MasterAuthorizedNetworksConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MasterAuthorizedNetworksConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MasterAuthorizedNetworksConfig_CidrBlock CidrBlock;

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock cidr_blocks = 2;
  int cidr_blocks_size() const;
  void clear_cidr_blocks();
  static const int kCidrBlocksFieldNumber = 2;
  const ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock& cidr_blocks(int index) const;
  ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock* mutable_cidr_blocks(int index);
  ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock* add_cidr_blocks();
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock >*
      mutable_cidr_blocks();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock >&
      cidr_blocks() const;

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.MasterAuthorizedNetworksConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock > cidr_blocks_;
  bool enabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsMasterAuthorizedNetworksConfigImpl();
};
// -------------------------------------------------------------------

class LegacyAbac : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.LegacyAbac) */ {
 public:
  LegacyAbac();
  virtual ~LegacyAbac();

  LegacyAbac(const LegacyAbac& from);

  inline LegacyAbac& operator=(const LegacyAbac& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LegacyAbac(LegacyAbac&& from) noexcept
    : LegacyAbac() {
    *this = ::std::move(from);
  }

  inline LegacyAbac& operator=(LegacyAbac&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LegacyAbac& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LegacyAbac* internal_default_instance() {
    return reinterpret_cast<const LegacyAbac*>(
               &_LegacyAbac_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(LegacyAbac* other);
  friend void swap(LegacyAbac& a, LegacyAbac& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LegacyAbac* New() const PROTOBUF_FINAL { return New(NULL); }

  LegacyAbac* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const LegacyAbac& from);
  void MergeFrom(const LegacyAbac& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(LegacyAbac* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.LegacyAbac)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsLegacyAbacImpl();
};
// -------------------------------------------------------------------

class NetworkPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NetworkPolicy) */ {
 public:
  NetworkPolicy();
  virtual ~NetworkPolicy();

  NetworkPolicy(const NetworkPolicy& from);

  inline NetworkPolicy& operator=(const NetworkPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkPolicy(NetworkPolicy&& from) noexcept
    : NetworkPolicy() {
    *this = ::std::move(from);
  }

  inline NetworkPolicy& operator=(NetworkPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetworkPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkPolicy* internal_default_instance() {
    return reinterpret_cast<const NetworkPolicy*>(
               &_NetworkPolicy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(NetworkPolicy* other);
  friend void swap(NetworkPolicy& a, NetworkPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkPolicy* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkPolicy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NetworkPolicy& from);
  void MergeFrom(const NetworkPolicy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NetworkPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NetworkPolicy_Provider Provider;
  static const Provider PROVIDER_UNSPECIFIED =
    NetworkPolicy_Provider_PROVIDER_UNSPECIFIED;
  static const Provider CALICO =
    NetworkPolicy_Provider_CALICO;
  static inline bool Provider_IsValid(int value) {
    return NetworkPolicy_Provider_IsValid(value);
  }
  static const Provider Provider_MIN =
    NetworkPolicy_Provider_Provider_MIN;
  static const Provider Provider_MAX =
    NetworkPolicy_Provider_Provider_MAX;
  static const int Provider_ARRAYSIZE =
    NetworkPolicy_Provider_Provider_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Provider_descriptor() {
    return NetworkPolicy_Provider_descriptor();
  }
  static inline const ::std::string& Provider_Name(Provider value) {
    return NetworkPolicy_Provider_Name(value);
  }
  static inline bool Provider_Parse(const ::std::string& name,
      Provider* value) {
    return NetworkPolicy_Provider_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.container.v1.NetworkPolicy.Provider provider = 1;
  void clear_provider();
  static const int kProviderFieldNumber = 1;
  ::google::container::v1::NetworkPolicy_Provider provider() const;
  void set_provider(::google::container::v1::NetworkPolicy_Provider value);

  // bool enabled = 2;
  void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NetworkPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int provider_;
  bool enabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsNetworkPolicyImpl();
};
// -------------------------------------------------------------------

class IPAllocationPolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.IPAllocationPolicy) */ {
 public:
  IPAllocationPolicy();
  virtual ~IPAllocationPolicy();

  IPAllocationPolicy(const IPAllocationPolicy& from);

  inline IPAllocationPolicy& operator=(const IPAllocationPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IPAllocationPolicy(IPAllocationPolicy&& from) noexcept
    : IPAllocationPolicy() {
    *this = ::std::move(from);
  }

  inline IPAllocationPolicy& operator=(IPAllocationPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IPAllocationPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPAllocationPolicy* internal_default_instance() {
    return reinterpret_cast<const IPAllocationPolicy*>(
               &_IPAllocationPolicy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(IPAllocationPolicy* other);
  friend void swap(IPAllocationPolicy& a, IPAllocationPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IPAllocationPolicy* New() const PROTOBUF_FINAL { return New(NULL); }

  IPAllocationPolicy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IPAllocationPolicy& from);
  void MergeFrom(const IPAllocationPolicy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IPAllocationPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subnetwork_name = 3;
  void clear_subnetwork_name();
  static const int kSubnetworkNameFieldNumber = 3;
  const ::std::string& subnetwork_name() const;
  void set_subnetwork_name(const ::std::string& value);
  #if LANG_CXX11
  void set_subnetwork_name(::std::string&& value);
  #endif
  void set_subnetwork_name(const char* value);
  void set_subnetwork_name(const char* value, size_t size);
  ::std::string* mutable_subnetwork_name();
  ::std::string* release_subnetwork_name();
  void set_allocated_subnetwork_name(::std::string* subnetwork_name);

  // string cluster_ipv4_cidr = 4;
  void clear_cluster_ipv4_cidr();
  static const int kClusterIpv4CidrFieldNumber = 4;
  const ::std::string& cluster_ipv4_cidr() const;
  void set_cluster_ipv4_cidr(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_ipv4_cidr(::std::string&& value);
  #endif
  void set_cluster_ipv4_cidr(const char* value);
  void set_cluster_ipv4_cidr(const char* value, size_t size);
  ::std::string* mutable_cluster_ipv4_cidr();
  ::std::string* release_cluster_ipv4_cidr();
  void set_allocated_cluster_ipv4_cidr(::std::string* cluster_ipv4_cidr);

  // string node_ipv4_cidr = 5;
  void clear_node_ipv4_cidr();
  static const int kNodeIpv4CidrFieldNumber = 5;
  const ::std::string& node_ipv4_cidr() const;
  void set_node_ipv4_cidr(const ::std::string& value);
  #if LANG_CXX11
  void set_node_ipv4_cidr(::std::string&& value);
  #endif
  void set_node_ipv4_cidr(const char* value);
  void set_node_ipv4_cidr(const char* value, size_t size);
  ::std::string* mutable_node_ipv4_cidr();
  ::std::string* release_node_ipv4_cidr();
  void set_allocated_node_ipv4_cidr(::std::string* node_ipv4_cidr);

  // string services_ipv4_cidr = 6;
  void clear_services_ipv4_cidr();
  static const int kServicesIpv4CidrFieldNumber = 6;
  const ::std::string& services_ipv4_cidr() const;
  void set_services_ipv4_cidr(const ::std::string& value);
  #if LANG_CXX11
  void set_services_ipv4_cidr(::std::string&& value);
  #endif
  void set_services_ipv4_cidr(const char* value);
  void set_services_ipv4_cidr(const char* value, size_t size);
  ::std::string* mutable_services_ipv4_cidr();
  ::std::string* release_services_ipv4_cidr();
  void set_allocated_services_ipv4_cidr(::std::string* services_ipv4_cidr);

  // string cluster_secondary_range_name = 7;
  void clear_cluster_secondary_range_name();
  static const int kClusterSecondaryRangeNameFieldNumber = 7;
  const ::std::string& cluster_secondary_range_name() const;
  void set_cluster_secondary_range_name(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_secondary_range_name(::std::string&& value);
  #endif
  void set_cluster_secondary_range_name(const char* value);
  void set_cluster_secondary_range_name(const char* value, size_t size);
  ::std::string* mutable_cluster_secondary_range_name();
  ::std::string* release_cluster_secondary_range_name();
  void set_allocated_cluster_secondary_range_name(::std::string* cluster_secondary_range_name);

  // string services_secondary_range_name = 8;
  void clear_services_secondary_range_name();
  static const int kServicesSecondaryRangeNameFieldNumber = 8;
  const ::std::string& services_secondary_range_name() const;
  void set_services_secondary_range_name(const ::std::string& value);
  #if LANG_CXX11
  void set_services_secondary_range_name(::std::string&& value);
  #endif
  void set_services_secondary_range_name(const char* value);
  void set_services_secondary_range_name(const char* value, size_t size);
  ::std::string* mutable_services_secondary_range_name();
  ::std::string* release_services_secondary_range_name();
  void set_allocated_services_secondary_range_name(::std::string* services_secondary_range_name);

  // string cluster_ipv4_cidr_block = 9;
  void clear_cluster_ipv4_cidr_block();
  static const int kClusterIpv4CidrBlockFieldNumber = 9;
  const ::std::string& cluster_ipv4_cidr_block() const;
  void set_cluster_ipv4_cidr_block(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_ipv4_cidr_block(::std::string&& value);
  #endif
  void set_cluster_ipv4_cidr_block(const char* value);
  void set_cluster_ipv4_cidr_block(const char* value, size_t size);
  ::std::string* mutable_cluster_ipv4_cidr_block();
  ::std::string* release_cluster_ipv4_cidr_block();
  void set_allocated_cluster_ipv4_cidr_block(::std::string* cluster_ipv4_cidr_block);

  // string node_ipv4_cidr_block = 10;
  void clear_node_ipv4_cidr_block();
  static const int kNodeIpv4CidrBlockFieldNumber = 10;
  const ::std::string& node_ipv4_cidr_block() const;
  void set_node_ipv4_cidr_block(const ::std::string& value);
  #if LANG_CXX11
  void set_node_ipv4_cidr_block(::std::string&& value);
  #endif
  void set_node_ipv4_cidr_block(const char* value);
  void set_node_ipv4_cidr_block(const char* value, size_t size);
  ::std::string* mutable_node_ipv4_cidr_block();
  ::std::string* release_node_ipv4_cidr_block();
  void set_allocated_node_ipv4_cidr_block(::std::string* node_ipv4_cidr_block);

  // string services_ipv4_cidr_block = 11;
  void clear_services_ipv4_cidr_block();
  static const int kServicesIpv4CidrBlockFieldNumber = 11;
  const ::std::string& services_ipv4_cidr_block() const;
  void set_services_ipv4_cidr_block(const ::std::string& value);
  #if LANG_CXX11
  void set_services_ipv4_cidr_block(::std::string&& value);
  #endif
  void set_services_ipv4_cidr_block(const char* value);
  void set_services_ipv4_cidr_block(const char* value, size_t size);
  ::std::string* mutable_services_ipv4_cidr_block();
  ::std::string* release_services_ipv4_cidr_block();
  void set_allocated_services_ipv4_cidr_block(::std::string* services_ipv4_cidr_block);

  // bool use_ip_aliases = 1;
  void clear_use_ip_aliases();
  static const int kUseIpAliasesFieldNumber = 1;
  bool use_ip_aliases() const;
  void set_use_ip_aliases(bool value);

  // bool create_subnetwork = 2;
  void clear_create_subnetwork();
  static const int kCreateSubnetworkFieldNumber = 2;
  bool create_subnetwork() const;
  void set_create_subnetwork(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.IPAllocationPolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subnetwork_name_;
  ::google::protobuf::internal::ArenaStringPtr cluster_ipv4_cidr_;
  ::google::protobuf::internal::ArenaStringPtr node_ipv4_cidr_;
  ::google::protobuf::internal::ArenaStringPtr services_ipv4_cidr_;
  ::google::protobuf::internal::ArenaStringPtr cluster_secondary_range_name_;
  ::google::protobuf::internal::ArenaStringPtr services_secondary_range_name_;
  ::google::protobuf::internal::ArenaStringPtr cluster_ipv4_cidr_block_;
  ::google::protobuf::internal::ArenaStringPtr node_ipv4_cidr_block_;
  ::google::protobuf::internal::ArenaStringPtr services_ipv4_cidr_block_;
  bool use_ip_aliases_;
  bool create_subnetwork_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsIPAllocationPolicyImpl();
};
// -------------------------------------------------------------------

class Cluster_ResourceLabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Cluster_ResourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Cluster_ResourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Cluster_ResourceLabelsEntry_DoNotUse();
  Cluster_ResourceLabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Cluster_ResourceLabelsEntry_DoNotUse& other);
  static const Cluster_ResourceLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Cluster_ResourceLabelsEntry_DoNotUse*>(&_Cluster_ResourceLabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Cluster : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.Cluster) */ {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cluster(Cluster&& from) noexcept
    : Cluster() {
    *this = ::std::move(from);
  }

  inline Cluster& operator=(Cluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(Cluster* other);
  friend void swap(Cluster& a, Cluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cluster* New() const PROTOBUF_FINAL { return New(NULL); }

  Cluster* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  typedef Cluster_Status Status;
  static const Status STATUS_UNSPECIFIED =
    Cluster_Status_STATUS_UNSPECIFIED;
  static const Status PROVISIONING =
    Cluster_Status_PROVISIONING;
  static const Status RUNNING =
    Cluster_Status_RUNNING;
  static const Status RECONCILING =
    Cluster_Status_RECONCILING;
  static const Status STOPPING =
    Cluster_Status_STOPPING;
  static const Status ERROR =
    Cluster_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return Cluster_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Cluster_Status_Status_MIN;
  static const Status Status_MAX =
    Cluster_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Cluster_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Cluster_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Cluster_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Cluster_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.NodePool node_pools = 12;
  int node_pools_size() const;
  void clear_node_pools();
  static const int kNodePoolsFieldNumber = 12;
  const ::google::container::v1::NodePool& node_pools(int index) const;
  ::google::container::v1::NodePool* mutable_node_pools(int index);
  ::google::container::v1::NodePool* add_node_pools();
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >*
      mutable_node_pools();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >&
      node_pools() const;

  // repeated string locations = 13;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 13;
  const ::std::string& locations(int index) const;
  ::std::string* mutable_locations(int index);
  void set_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_locations(int index, ::std::string&& value);
  #endif
  void set_locations(int index, const char* value);
  void set_locations(int index, const char* value, size_t size);
  ::std::string* add_locations();
  void add_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_locations(::std::string&& value);
  #endif
  void add_locations(const char* value);
  void add_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& locations() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_locations();

  // map<string, string> resource_labels = 15;
  int resource_labels_size() const;
  void clear_resource_labels();
  static const int kResourceLabelsFieldNumber = 15;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      resource_labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_resource_labels();

  // repeated string instance_group_urls = 111;
  int instance_group_urls_size() const;
  void clear_instance_group_urls();
  static const int kInstanceGroupUrlsFieldNumber = 111;
  const ::std::string& instance_group_urls(int index) const;
  ::std::string* mutable_instance_group_urls(int index);
  void set_instance_group_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_instance_group_urls(int index, ::std::string&& value);
  #endif
  void set_instance_group_urls(int index, const char* value);
  void set_instance_group_urls(int index, const char* value, size_t size);
  ::std::string* add_instance_group_urls();
  void add_instance_group_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_instance_group_urls(::std::string&& value);
  #endif
  void add_instance_group_urls(const char* value);
  void add_instance_group_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& instance_group_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_instance_group_urls();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string logging_service = 6;
  void clear_logging_service();
  static const int kLoggingServiceFieldNumber = 6;
  const ::std::string& logging_service() const;
  void set_logging_service(const ::std::string& value);
  #if LANG_CXX11
  void set_logging_service(::std::string&& value);
  #endif
  void set_logging_service(const char* value);
  void set_logging_service(const char* value, size_t size);
  ::std::string* mutable_logging_service();
  ::std::string* release_logging_service();
  void set_allocated_logging_service(::std::string* logging_service);

  // string monitoring_service = 7;
  void clear_monitoring_service();
  static const int kMonitoringServiceFieldNumber = 7;
  const ::std::string& monitoring_service() const;
  void set_monitoring_service(const ::std::string& value);
  #if LANG_CXX11
  void set_monitoring_service(::std::string&& value);
  #endif
  void set_monitoring_service(const char* value);
  void set_monitoring_service(const char* value, size_t size);
  ::std::string* mutable_monitoring_service();
  ::std::string* release_monitoring_service();
  void set_allocated_monitoring_service(::std::string* monitoring_service);

  // string network = 8;
  void clear_network();
  static const int kNetworkFieldNumber = 8;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  #if LANG_CXX11
  void set_network(::std::string&& value);
  #endif
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // string cluster_ipv4_cidr = 9;
  void clear_cluster_ipv4_cidr();
  static const int kClusterIpv4CidrFieldNumber = 9;
  const ::std::string& cluster_ipv4_cidr() const;
  void set_cluster_ipv4_cidr(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_ipv4_cidr(::std::string&& value);
  #endif
  void set_cluster_ipv4_cidr(const char* value);
  void set_cluster_ipv4_cidr(const char* value, size_t size);
  ::std::string* mutable_cluster_ipv4_cidr();
  ::std::string* release_cluster_ipv4_cidr();
  void set_allocated_cluster_ipv4_cidr(::std::string* cluster_ipv4_cidr);

  // string subnetwork = 11;
  void clear_subnetwork();
  static const int kSubnetworkFieldNumber = 11;
  const ::std::string& subnetwork() const;
  void set_subnetwork(const ::std::string& value);
  #if LANG_CXX11
  void set_subnetwork(::std::string&& value);
  #endif
  void set_subnetwork(const char* value);
  void set_subnetwork(const char* value, size_t size);
  ::std::string* mutable_subnetwork();
  ::std::string* release_subnetwork();
  void set_allocated_subnetwork(::std::string* subnetwork);

  // string label_fingerprint = 16;
  void clear_label_fingerprint();
  static const int kLabelFingerprintFieldNumber = 16;
  const ::std::string& label_fingerprint() const;
  void set_label_fingerprint(const ::std::string& value);
  #if LANG_CXX11
  void set_label_fingerprint(::std::string&& value);
  #endif
  void set_label_fingerprint(const char* value);
  void set_label_fingerprint(const char* value, size_t size);
  ::std::string* mutable_label_fingerprint();
  ::std::string* release_label_fingerprint();
  void set_allocated_label_fingerprint(::std::string* label_fingerprint);

  // string self_link = 100;
  void clear_self_link();
  static const int kSelfLinkFieldNumber = 100;
  const ::std::string& self_link() const;
  void set_self_link(const ::std::string& value);
  #if LANG_CXX11
  void set_self_link(::std::string&& value);
  #endif
  void set_self_link(const char* value);
  void set_self_link(const char* value, size_t size);
  ::std::string* mutable_self_link();
  ::std::string* release_self_link();
  void set_allocated_self_link(::std::string* self_link);

  // string zone = 101;
  void clear_zone();
  static const int kZoneFieldNumber = 101;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string endpoint = 102;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 102;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // string initial_cluster_version = 103;
  void clear_initial_cluster_version();
  static const int kInitialClusterVersionFieldNumber = 103;
  const ::std::string& initial_cluster_version() const;
  void set_initial_cluster_version(const ::std::string& value);
  #if LANG_CXX11
  void set_initial_cluster_version(::std::string&& value);
  #endif
  void set_initial_cluster_version(const char* value);
  void set_initial_cluster_version(const char* value, size_t size);
  ::std::string* mutable_initial_cluster_version();
  ::std::string* release_initial_cluster_version();
  void set_allocated_initial_cluster_version(::std::string* initial_cluster_version);

  // string current_master_version = 104;
  void clear_current_master_version();
  static const int kCurrentMasterVersionFieldNumber = 104;
  const ::std::string& current_master_version() const;
  void set_current_master_version(const ::std::string& value);
  #if LANG_CXX11
  void set_current_master_version(::std::string&& value);
  #endif
  void set_current_master_version(const char* value);
  void set_current_master_version(const char* value, size_t size);
  ::std::string* mutable_current_master_version();
  ::std::string* release_current_master_version();
  void set_allocated_current_master_version(::std::string* current_master_version);

  // string current_node_version = 105;
  void clear_current_node_version();
  static const int kCurrentNodeVersionFieldNumber = 105;
  const ::std::string& current_node_version() const;
  void set_current_node_version(const ::std::string& value);
  #if LANG_CXX11
  void set_current_node_version(::std::string&& value);
  #endif
  void set_current_node_version(const char* value);
  void set_current_node_version(const char* value, size_t size);
  ::std::string* mutable_current_node_version();
  ::std::string* release_current_node_version();
  void set_allocated_current_node_version(::std::string* current_node_version);

  // string create_time = 106;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 106;
  const ::std::string& create_time() const;
  void set_create_time(const ::std::string& value);
  #if LANG_CXX11
  void set_create_time(::std::string&& value);
  #endif
  void set_create_time(const char* value);
  void set_create_time(const char* value, size_t size);
  ::std::string* mutable_create_time();
  ::std::string* release_create_time();
  void set_allocated_create_time(::std::string* create_time);

  // string status_message = 108;
  void clear_status_message();
  static const int kStatusMessageFieldNumber = 108;
  const ::std::string& status_message() const;
  void set_status_message(const ::std::string& value);
  #if LANG_CXX11
  void set_status_message(::std::string&& value);
  #endif
  void set_status_message(const char* value);
  void set_status_message(const char* value, size_t size);
  ::std::string* mutable_status_message();
  ::std::string* release_status_message();
  void set_allocated_status_message(::std::string* status_message);

  // string services_ipv4_cidr = 110;
  void clear_services_ipv4_cidr();
  static const int kServicesIpv4CidrFieldNumber = 110;
  const ::std::string& services_ipv4_cidr() const;
  void set_services_ipv4_cidr(const ::std::string& value);
  #if LANG_CXX11
  void set_services_ipv4_cidr(::std::string&& value);
  #endif
  void set_services_ipv4_cidr(const char* value);
  void set_services_ipv4_cidr(const char* value, size_t size);
  ::std::string* mutable_services_ipv4_cidr();
  ::std::string* release_services_ipv4_cidr();
  void set_allocated_services_ipv4_cidr(::std::string* services_ipv4_cidr);

  // string expire_time = 113;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 113;
  const ::std::string& expire_time() const;
  void set_expire_time(const ::std::string& value);
  #if LANG_CXX11
  void set_expire_time(::std::string&& value);
  #endif
  void set_expire_time(const char* value);
  void set_expire_time(const char* value, size_t size);
  ::std::string* mutable_expire_time();
  ::std::string* release_expire_time();
  void set_allocated_expire_time(::std::string* expire_time);

  // .google.container.v1.NodeConfig node_config = 4;
  bool has_node_config() const;
  void clear_node_config();
  static const int kNodeConfigFieldNumber = 4;
  const ::google::container::v1::NodeConfig& node_config() const;
  ::google::container::v1::NodeConfig* release_node_config();
  ::google::container::v1::NodeConfig* mutable_node_config();
  void set_allocated_node_config(::google::container::v1::NodeConfig* node_config);

  // .google.container.v1.MasterAuth master_auth = 5;
  bool has_master_auth() const;
  void clear_master_auth();
  static const int kMasterAuthFieldNumber = 5;
  const ::google::container::v1::MasterAuth& master_auth() const;
  ::google::container::v1::MasterAuth* release_master_auth();
  ::google::container::v1::MasterAuth* mutable_master_auth();
  void set_allocated_master_auth(::google::container::v1::MasterAuth* master_auth);

  // .google.container.v1.AddonsConfig addons_config = 10;
  bool has_addons_config() const;
  void clear_addons_config();
  static const int kAddonsConfigFieldNumber = 10;
  const ::google::container::v1::AddonsConfig& addons_config() const;
  ::google::container::v1::AddonsConfig* release_addons_config();
  ::google::container::v1::AddonsConfig* mutable_addons_config();
  void set_allocated_addons_config(::google::container::v1::AddonsConfig* addons_config);

  // .google.container.v1.LegacyAbac legacy_abac = 18;
  bool has_legacy_abac() const;
  void clear_legacy_abac();
  static const int kLegacyAbacFieldNumber = 18;
  const ::google::container::v1::LegacyAbac& legacy_abac() const;
  ::google::container::v1::LegacyAbac* release_legacy_abac();
  ::google::container::v1::LegacyAbac* mutable_legacy_abac();
  void set_allocated_legacy_abac(::google::container::v1::LegacyAbac* legacy_abac);

  // .google.container.v1.NetworkPolicy network_policy = 19;
  bool has_network_policy() const;
  void clear_network_policy();
  static const int kNetworkPolicyFieldNumber = 19;
  const ::google::container::v1::NetworkPolicy& network_policy() const;
  ::google::container::v1::NetworkPolicy* release_network_policy();
  ::google::container::v1::NetworkPolicy* mutable_network_policy();
  void set_allocated_network_policy(::google::container::v1::NetworkPolicy* network_policy);

  // .google.container.v1.IPAllocationPolicy ip_allocation_policy = 20;
  bool has_ip_allocation_policy() const;
  void clear_ip_allocation_policy();
  static const int kIpAllocationPolicyFieldNumber = 20;
  const ::google::container::v1::IPAllocationPolicy& ip_allocation_policy() const;
  ::google::container::v1::IPAllocationPolicy* release_ip_allocation_policy();
  ::google::container::v1::IPAllocationPolicy* mutable_ip_allocation_policy();
  void set_allocated_ip_allocation_policy(::google::container::v1::IPAllocationPolicy* ip_allocation_policy);

  // .google.container.v1.MasterAuthorizedNetworksConfig master_authorized_networks_config = 22;
  bool has_master_authorized_networks_config() const;
  void clear_master_authorized_networks_config();
  static const int kMasterAuthorizedNetworksConfigFieldNumber = 22;
  const ::google::container::v1::MasterAuthorizedNetworksConfig& master_authorized_networks_config() const;
  ::google::container::v1::MasterAuthorizedNetworksConfig* release_master_authorized_networks_config();
  ::google::container::v1::MasterAuthorizedNetworksConfig* mutable_master_authorized_networks_config();
  void set_allocated_master_authorized_networks_config(::google::container::v1::MasterAuthorizedNetworksConfig* master_authorized_networks_config);

  // .google.container.v1.MaintenancePolicy maintenance_policy = 23;
  bool has_maintenance_policy() const;
  void clear_maintenance_policy();
  static const int kMaintenancePolicyFieldNumber = 23;
  const ::google::container::v1::MaintenancePolicy& maintenance_policy() const;
  ::google::container::v1::MaintenancePolicy* release_maintenance_policy();
  ::google::container::v1::MaintenancePolicy* mutable_maintenance_policy();
  void set_allocated_maintenance_policy(::google::container::v1::MaintenancePolicy* maintenance_policy);

  // int32 initial_node_count = 3;
  void clear_initial_node_count();
  static const int kInitialNodeCountFieldNumber = 3;
  ::google::protobuf::int32 initial_node_count() const;
  void set_initial_node_count(::google::protobuf::int32 value);

  // bool enable_kubernetes_alpha = 14;
  void clear_enable_kubernetes_alpha();
  static const int kEnableKubernetesAlphaFieldNumber = 14;
  bool enable_kubernetes_alpha() const;
  void set_enable_kubernetes_alpha(bool value);

  // int32 current_node_count = 112;
  void clear_current_node_count();
  static const int kCurrentNodeCountFieldNumber = 112;
  ::google::protobuf::int32 current_node_count() const;
  void set_current_node_count(::google::protobuf::int32 value);

  // .google.container.v1.Cluster.Status status = 107;
  void clear_status();
  static const int kStatusFieldNumber = 107;
  ::google::container::v1::Cluster_Status status() const;
  void set_status(::google::container::v1::Cluster_Status value);

  // int32 node_ipv4_cidr_size = 109;
  void clear_node_ipv4_cidr_size();
  static const int kNodeIpv4CidrSizeFieldNumber = 109;
  ::google::protobuf::int32 node_ipv4_cidr_size() const;
  void set_node_ipv4_cidr_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.Cluster)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool > node_pools_;
  ::google::protobuf::RepeatedPtrField< ::std::string> locations_;
  ::google::protobuf::internal::MapField<
      Cluster_ResourceLabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > resource_labels_;
  ::google::protobuf::RepeatedPtrField< ::std::string> instance_group_urls_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr logging_service_;
  ::google::protobuf::internal::ArenaStringPtr monitoring_service_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr cluster_ipv4_cidr_;
  ::google::protobuf::internal::ArenaStringPtr subnetwork_;
  ::google::protobuf::internal::ArenaStringPtr label_fingerprint_;
  ::google::protobuf::internal::ArenaStringPtr self_link_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr initial_cluster_version_;
  ::google::protobuf::internal::ArenaStringPtr current_master_version_;
  ::google::protobuf::internal::ArenaStringPtr current_node_version_;
  ::google::protobuf::internal::ArenaStringPtr create_time_;
  ::google::protobuf::internal::ArenaStringPtr status_message_;
  ::google::protobuf::internal::ArenaStringPtr services_ipv4_cidr_;
  ::google::protobuf::internal::ArenaStringPtr expire_time_;
  ::google::container::v1::NodeConfig* node_config_;
  ::google::container::v1::MasterAuth* master_auth_;
  ::google::container::v1::AddonsConfig* addons_config_;
  ::google::container::v1::LegacyAbac* legacy_abac_;
  ::google::container::v1::NetworkPolicy* network_policy_;
  ::google::container::v1::IPAllocationPolicy* ip_allocation_policy_;
  ::google::container::v1::MasterAuthorizedNetworksConfig* master_authorized_networks_config_;
  ::google::container::v1::MaintenancePolicy* maintenance_policy_;
  ::google::protobuf::int32 initial_node_count_;
  bool enable_kubernetes_alpha_;
  ::google::protobuf::int32 current_node_count_;
  int status_;
  ::google::protobuf::int32 node_ipv4_cidr_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsClusterImpl();
};
// -------------------------------------------------------------------

class ClusterUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ClusterUpdate) */ {
 public:
  ClusterUpdate();
  virtual ~ClusterUpdate();

  ClusterUpdate(const ClusterUpdate& from);

  inline ClusterUpdate& operator=(const ClusterUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterUpdate(ClusterUpdate&& from) noexcept
    : ClusterUpdate() {
    *this = ::std::move(from);
  }

  inline ClusterUpdate& operator=(ClusterUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterUpdate* internal_default_instance() {
    return reinterpret_cast<const ClusterUpdate*>(
               &_ClusterUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ClusterUpdate* other);
  friend void swap(ClusterUpdate& a, ClusterUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  ClusterUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClusterUpdate& from);
  void MergeFrom(const ClusterUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClusterUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string desired_locations = 10;
  int desired_locations_size() const;
  void clear_desired_locations();
  static const int kDesiredLocationsFieldNumber = 10;
  const ::std::string& desired_locations(int index) const;
  ::std::string* mutable_desired_locations(int index);
  void set_desired_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_desired_locations(int index, ::std::string&& value);
  #endif
  void set_desired_locations(int index, const char* value);
  void set_desired_locations(int index, const char* value, size_t size);
  ::std::string* add_desired_locations();
  void add_desired_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_desired_locations(::std::string&& value);
  #endif
  void add_desired_locations(const char* value);
  void add_desired_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& desired_locations() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_desired_locations();

  // string desired_node_version = 4;
  void clear_desired_node_version();
  static const int kDesiredNodeVersionFieldNumber = 4;
  const ::std::string& desired_node_version() const;
  void set_desired_node_version(const ::std::string& value);
  #if LANG_CXX11
  void set_desired_node_version(::std::string&& value);
  #endif
  void set_desired_node_version(const char* value);
  void set_desired_node_version(const char* value, size_t size);
  ::std::string* mutable_desired_node_version();
  ::std::string* release_desired_node_version();
  void set_allocated_desired_node_version(::std::string* desired_node_version);

  // string desired_monitoring_service = 5;
  void clear_desired_monitoring_service();
  static const int kDesiredMonitoringServiceFieldNumber = 5;
  const ::std::string& desired_monitoring_service() const;
  void set_desired_monitoring_service(const ::std::string& value);
  #if LANG_CXX11
  void set_desired_monitoring_service(::std::string&& value);
  #endif
  void set_desired_monitoring_service(const char* value);
  void set_desired_monitoring_service(const char* value, size_t size);
  ::std::string* mutable_desired_monitoring_service();
  ::std::string* release_desired_monitoring_service();
  void set_allocated_desired_monitoring_service(::std::string* desired_monitoring_service);

  // string desired_node_pool_id = 7;
  void clear_desired_node_pool_id();
  static const int kDesiredNodePoolIdFieldNumber = 7;
  const ::std::string& desired_node_pool_id() const;
  void set_desired_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  void set_desired_node_pool_id(::std::string&& value);
  #endif
  void set_desired_node_pool_id(const char* value);
  void set_desired_node_pool_id(const char* value, size_t size);
  ::std::string* mutable_desired_node_pool_id();
  ::std::string* release_desired_node_pool_id();
  void set_allocated_desired_node_pool_id(::std::string* desired_node_pool_id);

  // string desired_image_type = 8;
  void clear_desired_image_type();
  static const int kDesiredImageTypeFieldNumber = 8;
  const ::std::string& desired_image_type() const;
  void set_desired_image_type(const ::std::string& value);
  #if LANG_CXX11
  void set_desired_image_type(::std::string&& value);
  #endif
  void set_desired_image_type(const char* value);
  void set_desired_image_type(const char* value, size_t size);
  ::std::string* mutable_desired_image_type();
  ::std::string* release_desired_image_type();
  void set_allocated_desired_image_type(::std::string* desired_image_type);

  // string desired_master_version = 100;
  void clear_desired_master_version();
  static const int kDesiredMasterVersionFieldNumber = 100;
  const ::std::string& desired_master_version() const;
  void set_desired_master_version(const ::std::string& value);
  #if LANG_CXX11
  void set_desired_master_version(::std::string&& value);
  #endif
  void set_desired_master_version(const char* value);
  void set_desired_master_version(const char* value, size_t size);
  ::std::string* mutable_desired_master_version();
  ::std::string* release_desired_master_version();
  void set_allocated_desired_master_version(::std::string* desired_master_version);

  // .google.container.v1.AddonsConfig desired_addons_config = 6;
  bool has_desired_addons_config() const;
  void clear_desired_addons_config();
  static const int kDesiredAddonsConfigFieldNumber = 6;
  const ::google::container::v1::AddonsConfig& desired_addons_config() const;
  ::google::container::v1::AddonsConfig* release_desired_addons_config();
  ::google::container::v1::AddonsConfig* mutable_desired_addons_config();
  void set_allocated_desired_addons_config(::google::container::v1::AddonsConfig* desired_addons_config);

  // .google.container.v1.NodePoolAutoscaling desired_node_pool_autoscaling = 9;
  bool has_desired_node_pool_autoscaling() const;
  void clear_desired_node_pool_autoscaling();
  static const int kDesiredNodePoolAutoscalingFieldNumber = 9;
  const ::google::container::v1::NodePoolAutoscaling& desired_node_pool_autoscaling() const;
  ::google::container::v1::NodePoolAutoscaling* release_desired_node_pool_autoscaling();
  ::google::container::v1::NodePoolAutoscaling* mutable_desired_node_pool_autoscaling();
  void set_allocated_desired_node_pool_autoscaling(::google::container::v1::NodePoolAutoscaling* desired_node_pool_autoscaling);

  // .google.container.v1.MasterAuthorizedNetworksConfig desired_master_authorized_networks_config = 12;
  bool has_desired_master_authorized_networks_config() const;
  void clear_desired_master_authorized_networks_config();
  static const int kDesiredMasterAuthorizedNetworksConfigFieldNumber = 12;
  const ::google::container::v1::MasterAuthorizedNetworksConfig& desired_master_authorized_networks_config() const;
  ::google::container::v1::MasterAuthorizedNetworksConfig* release_desired_master_authorized_networks_config();
  ::google::container::v1::MasterAuthorizedNetworksConfig* mutable_desired_master_authorized_networks_config();
  void set_allocated_desired_master_authorized_networks_config(::google::container::v1::MasterAuthorizedNetworksConfig* desired_master_authorized_networks_config);

  // @@protoc_insertion_point(class_scope:google.container.v1.ClusterUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> desired_locations_;
  ::google::protobuf::internal::ArenaStringPtr desired_node_version_;
  ::google::protobuf::internal::ArenaStringPtr desired_monitoring_service_;
  ::google::protobuf::internal::ArenaStringPtr desired_node_pool_id_;
  ::google::protobuf::internal::ArenaStringPtr desired_image_type_;
  ::google::protobuf::internal::ArenaStringPtr desired_master_version_;
  ::google::container::v1::AddonsConfig* desired_addons_config_;
  ::google::container::v1::NodePoolAutoscaling* desired_node_pool_autoscaling_;
  ::google::container::v1::MasterAuthorizedNetworksConfig* desired_master_authorized_networks_config_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsClusterUpdateImpl();
};
// -------------------------------------------------------------------

class Operation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.Operation) */ {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(Operation* other);
  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const PROTOBUF_FINAL { return New(NULL); }

  Operation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Operation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Operation_Status Status;
  static const Status STATUS_UNSPECIFIED =
    Operation_Status_STATUS_UNSPECIFIED;
  static const Status PENDING =
    Operation_Status_PENDING;
  static const Status RUNNING =
    Operation_Status_RUNNING;
  static const Status DONE =
    Operation_Status_DONE;
  static const Status ABORTING =
    Operation_Status_ABORTING;
  static inline bool Status_IsValid(int value) {
    return Operation_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Operation_Status_Status_MIN;
  static const Status Status_MAX =
    Operation_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Operation_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Operation_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Operation_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Operation_Status_Parse(name, value);
  }

  typedef Operation_Type Type;
  static const Type TYPE_UNSPECIFIED =
    Operation_Type_TYPE_UNSPECIFIED;
  static const Type CREATE_CLUSTER =
    Operation_Type_CREATE_CLUSTER;
  static const Type DELETE_CLUSTER =
    Operation_Type_DELETE_CLUSTER;
  static const Type UPGRADE_MASTER =
    Operation_Type_UPGRADE_MASTER;
  static const Type UPGRADE_NODES =
    Operation_Type_UPGRADE_NODES;
  static const Type REPAIR_CLUSTER =
    Operation_Type_REPAIR_CLUSTER;
  static const Type UPDATE_CLUSTER =
    Operation_Type_UPDATE_CLUSTER;
  static const Type CREATE_NODE_POOL =
    Operation_Type_CREATE_NODE_POOL;
  static const Type DELETE_NODE_POOL =
    Operation_Type_DELETE_NODE_POOL;
  static const Type SET_NODE_POOL_MANAGEMENT =
    Operation_Type_SET_NODE_POOL_MANAGEMENT;
  static const Type AUTO_REPAIR_NODES =
    Operation_Type_AUTO_REPAIR_NODES;
  static const Type AUTO_UPGRADE_NODES =
    Operation_Type_AUTO_UPGRADE_NODES;
  static const Type SET_LABELS =
    Operation_Type_SET_LABELS;
  static const Type SET_MASTER_AUTH =
    Operation_Type_SET_MASTER_AUTH;
  static const Type SET_NODE_POOL_SIZE =
    Operation_Type_SET_NODE_POOL_SIZE;
  static const Type SET_NETWORK_POLICY =
    Operation_Type_SET_NETWORK_POLICY;
  static const Type SET_MAINTENANCE_POLICY =
    Operation_Type_SET_MAINTENANCE_POLICY;
  static inline bool Type_IsValid(int value) {
    return Operation_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Operation_Type_Type_MIN;
  static const Type Type_MAX =
    Operation_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Operation_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Operation_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Operation_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Operation_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string status_message = 5;
  void clear_status_message();
  static const int kStatusMessageFieldNumber = 5;
  const ::std::string& status_message() const;
  void set_status_message(const ::std::string& value);
  #if LANG_CXX11
  void set_status_message(::std::string&& value);
  #endif
  void set_status_message(const char* value);
  void set_status_message(const char* value, size_t size);
  ::std::string* mutable_status_message();
  ::std::string* release_status_message();
  void set_allocated_status_message(::std::string* status_message);

  // string self_link = 6;
  void clear_self_link();
  static const int kSelfLinkFieldNumber = 6;
  const ::std::string& self_link() const;
  void set_self_link(const ::std::string& value);
  #if LANG_CXX11
  void set_self_link(::std::string&& value);
  #endif
  void set_self_link(const char* value);
  void set_self_link(const char* value, size_t size);
  ::std::string* mutable_self_link();
  ::std::string* release_self_link();
  void set_allocated_self_link(::std::string* self_link);

  // string target_link = 7;
  void clear_target_link();
  static const int kTargetLinkFieldNumber = 7;
  const ::std::string& target_link() const;
  void set_target_link(const ::std::string& value);
  #if LANG_CXX11
  void set_target_link(::std::string&& value);
  #endif
  void set_target_link(const char* value);
  void set_target_link(const char* value, size_t size);
  ::std::string* mutable_target_link();
  ::std::string* release_target_link();
  void set_allocated_target_link(::std::string* target_link);

  // string detail = 8;
  void clear_detail();
  static const int kDetailFieldNumber = 8;
  const ::std::string& detail() const;
  void set_detail(const ::std::string& value);
  #if LANG_CXX11
  void set_detail(::std::string&& value);
  #endif
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  ::std::string* mutable_detail();
  ::std::string* release_detail();
  void set_allocated_detail(::std::string* detail);

  // string start_time = 10;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 10;
  const ::std::string& start_time() const;
  void set_start_time(const ::std::string& value);
  #if LANG_CXX11
  void set_start_time(::std::string&& value);
  #endif
  void set_start_time(const char* value);
  void set_start_time(const char* value, size_t size);
  ::std::string* mutable_start_time();
  ::std::string* release_start_time();
  void set_allocated_start_time(::std::string* start_time);

  // string end_time = 11;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 11;
  const ::std::string& end_time() const;
  void set_end_time(const ::std::string& value);
  #if LANG_CXX11
  void set_end_time(::std::string&& value);
  #endif
  void set_end_time(const char* value);
  void set_end_time(const char* value, size_t size);
  ::std::string* mutable_end_time();
  ::std::string* release_end_time();
  void set_allocated_end_time(::std::string* end_time);

  // .google.container.v1.Operation.Type operation_type = 3;
  void clear_operation_type();
  static const int kOperationTypeFieldNumber = 3;
  ::google::container::v1::Operation_Type operation_type() const;
  void set_operation_type(::google::container::v1::Operation_Type value);

  // .google.container.v1.Operation.Status status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::container::v1::Operation_Status status() const;
  void set_status(::google::container::v1::Operation_Status value);

  // @@protoc_insertion_point(class_scope:google.container.v1.Operation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr status_message_;
  ::google::protobuf::internal::ArenaStringPtr self_link_;
  ::google::protobuf::internal::ArenaStringPtr target_link_;
  ::google::protobuf::internal::ArenaStringPtr detail_;
  ::google::protobuf::internal::ArenaStringPtr start_time_;
  ::google::protobuf::internal::ArenaStringPtr end_time_;
  int operation_type_;
  int status_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsOperationImpl();
};
// -------------------------------------------------------------------

class CreateClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.CreateClusterRequest) */ {
 public:
  CreateClusterRequest();
  virtual ~CreateClusterRequest();

  CreateClusterRequest(const CreateClusterRequest& from);

  inline CreateClusterRequest& operator=(const CreateClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateClusterRequest(CreateClusterRequest&& from) noexcept
    : CreateClusterRequest() {
    *this = ::std::move(from);
  }

  inline CreateClusterRequest& operator=(CreateClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateClusterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateClusterRequest*>(
               &_CreateClusterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(CreateClusterRequest* other);
  friend void swap(CreateClusterRequest& a, CreateClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateClusterRequest& from);
  void MergeFrom(const CreateClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // .google.container.v1.Cluster cluster = 3;
  bool has_cluster() const;
  void clear_cluster();
  static const int kClusterFieldNumber = 3;
  const ::google::container::v1::Cluster& cluster() const;
  ::google::container::v1::Cluster* release_cluster();
  ::google::container::v1::Cluster* mutable_cluster();
  void set_allocated_cluster(::google::container::v1::Cluster* cluster);

  // @@protoc_insertion_point(class_scope:google.container.v1.CreateClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::container::v1::Cluster* cluster_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsCreateClusterRequestImpl();
};
// -------------------------------------------------------------------

class GetClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetClusterRequest) */ {
 public:
  GetClusterRequest();
  virtual ~GetClusterRequest();

  GetClusterRequest(const GetClusterRequest& from);

  inline GetClusterRequest& operator=(const GetClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetClusterRequest(GetClusterRequest&& from) noexcept
    : GetClusterRequest() {
    *this = ::std::move(from);
  }

  inline GetClusterRequest& operator=(GetClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetClusterRequest* internal_default_instance() {
    return reinterpret_cast<const GetClusterRequest*>(
               &_GetClusterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(GetClusterRequest* other);
  friend void swap(GetClusterRequest& a, GetClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetClusterRequest& from);
  void MergeFrom(const GetClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsGetClusterRequestImpl();
};
// -------------------------------------------------------------------

class UpdateClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.UpdateClusterRequest) */ {
 public:
  UpdateClusterRequest();
  virtual ~UpdateClusterRequest();

  UpdateClusterRequest(const UpdateClusterRequest& from);

  inline UpdateClusterRequest& operator=(const UpdateClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateClusterRequest(UpdateClusterRequest&& from) noexcept
    : UpdateClusterRequest() {
    *this = ::std::move(from);
  }

  inline UpdateClusterRequest& operator=(UpdateClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateClusterRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateClusterRequest*>(
               &_UpdateClusterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(UpdateClusterRequest* other);
  friend void swap(UpdateClusterRequest& a, UpdateClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateClusterRequest& from);
  void MergeFrom(const UpdateClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // .google.container.v1.ClusterUpdate update = 4;
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 4;
  const ::google::container::v1::ClusterUpdate& update() const;
  ::google::container::v1::ClusterUpdate* release_update();
  ::google::container::v1::ClusterUpdate* mutable_update();
  void set_allocated_update(::google::container::v1::ClusterUpdate* update);

  // @@protoc_insertion_point(class_scope:google.container.v1.UpdateClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::container::v1::ClusterUpdate* update_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsUpdateClusterRequestImpl();
};
// -------------------------------------------------------------------

class UpdateNodePoolRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.UpdateNodePoolRequest) */ {
 public:
  UpdateNodePoolRequest();
  virtual ~UpdateNodePoolRequest();

  UpdateNodePoolRequest(const UpdateNodePoolRequest& from);

  inline UpdateNodePoolRequest& operator=(const UpdateNodePoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateNodePoolRequest(UpdateNodePoolRequest&& from) noexcept
    : UpdateNodePoolRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNodePoolRequest& operator=(UpdateNodePoolRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateNodePoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateNodePoolRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNodePoolRequest*>(
               &_UpdateNodePoolRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(UpdateNodePoolRequest* other);
  friend void swap(UpdateNodePoolRequest& a, UpdateNodePoolRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateNodePoolRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateNodePoolRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateNodePoolRequest& from);
  void MergeFrom(const UpdateNodePoolRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateNodePoolRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4;
  void clear_node_pool_id();
  static const int kNodePoolIdFieldNumber = 4;
  const ::std::string& node_pool_id() const;
  void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_pool_id(::std::string&& value);
  #endif
  void set_node_pool_id(const char* value);
  void set_node_pool_id(const char* value, size_t size);
  ::std::string* mutable_node_pool_id();
  ::std::string* release_node_pool_id();
  void set_allocated_node_pool_id(::std::string* node_pool_id);

  // string node_version = 5;
  void clear_node_version();
  static const int kNodeVersionFieldNumber = 5;
  const ::std::string& node_version() const;
  void set_node_version(const ::std::string& value);
  #if LANG_CXX11
  void set_node_version(::std::string&& value);
  #endif
  void set_node_version(const char* value);
  void set_node_version(const char* value, size_t size);
  ::std::string* mutable_node_version();
  ::std::string* release_node_version();
  void set_allocated_node_version(::std::string* node_version);

  // string image_type = 6;
  void clear_image_type();
  static const int kImageTypeFieldNumber = 6;
  const ::std::string& image_type() const;
  void set_image_type(const ::std::string& value);
  #if LANG_CXX11
  void set_image_type(::std::string&& value);
  #endif
  void set_image_type(const char* value);
  void set_image_type(const char* value, size_t size);
  ::std::string* mutable_image_type();
  ::std::string* release_image_type();
  void set_allocated_image_type(::std::string* image_type);

  // @@protoc_insertion_point(class_scope:google.container.v1.UpdateNodePoolRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  ::google::protobuf::internal::ArenaStringPtr node_version_;
  ::google::protobuf::internal::ArenaStringPtr image_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsUpdateNodePoolRequestImpl();
};
// -------------------------------------------------------------------

class SetNodePoolAutoscalingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetNodePoolAutoscalingRequest) */ {
 public:
  SetNodePoolAutoscalingRequest();
  virtual ~SetNodePoolAutoscalingRequest();

  SetNodePoolAutoscalingRequest(const SetNodePoolAutoscalingRequest& from);

  inline SetNodePoolAutoscalingRequest& operator=(const SetNodePoolAutoscalingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetNodePoolAutoscalingRequest(SetNodePoolAutoscalingRequest&& from) noexcept
    : SetNodePoolAutoscalingRequest() {
    *this = ::std::move(from);
  }

  inline SetNodePoolAutoscalingRequest& operator=(SetNodePoolAutoscalingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetNodePoolAutoscalingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetNodePoolAutoscalingRequest* internal_default_instance() {
    return reinterpret_cast<const SetNodePoolAutoscalingRequest*>(
               &_SetNodePoolAutoscalingRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(SetNodePoolAutoscalingRequest* other);
  friend void swap(SetNodePoolAutoscalingRequest& a, SetNodePoolAutoscalingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetNodePoolAutoscalingRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetNodePoolAutoscalingRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetNodePoolAutoscalingRequest& from);
  void MergeFrom(const SetNodePoolAutoscalingRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetNodePoolAutoscalingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4;
  void clear_node_pool_id();
  static const int kNodePoolIdFieldNumber = 4;
  const ::std::string& node_pool_id() const;
  void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_pool_id(::std::string&& value);
  #endif
  void set_node_pool_id(const char* value);
  void set_node_pool_id(const char* value, size_t size);
  ::std::string* mutable_node_pool_id();
  ::std::string* release_node_pool_id();
  void set_allocated_node_pool_id(::std::string* node_pool_id);

  // .google.container.v1.NodePoolAutoscaling autoscaling = 5;
  bool has_autoscaling() const;
  void clear_autoscaling();
  static const int kAutoscalingFieldNumber = 5;
  const ::google::container::v1::NodePoolAutoscaling& autoscaling() const;
  ::google::container::v1::NodePoolAutoscaling* release_autoscaling();
  ::google::container::v1::NodePoolAutoscaling* mutable_autoscaling();
  void set_allocated_autoscaling(::google::container::v1::NodePoolAutoscaling* autoscaling);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetNodePoolAutoscalingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  ::google::container::v1::NodePoolAutoscaling* autoscaling_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsSetNodePoolAutoscalingRequestImpl();
};
// -------------------------------------------------------------------

class SetLoggingServiceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetLoggingServiceRequest) */ {
 public:
  SetLoggingServiceRequest();
  virtual ~SetLoggingServiceRequest();

  SetLoggingServiceRequest(const SetLoggingServiceRequest& from);

  inline SetLoggingServiceRequest& operator=(const SetLoggingServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetLoggingServiceRequest(SetLoggingServiceRequest&& from) noexcept
    : SetLoggingServiceRequest() {
    *this = ::std::move(from);
  }

  inline SetLoggingServiceRequest& operator=(SetLoggingServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetLoggingServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLoggingServiceRequest* internal_default_instance() {
    return reinterpret_cast<const SetLoggingServiceRequest*>(
               &_SetLoggingServiceRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(SetLoggingServiceRequest* other);
  friend void swap(SetLoggingServiceRequest& a, SetLoggingServiceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetLoggingServiceRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetLoggingServiceRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetLoggingServiceRequest& from);
  void MergeFrom(const SetLoggingServiceRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetLoggingServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // string logging_service = 4;
  void clear_logging_service();
  static const int kLoggingServiceFieldNumber = 4;
  const ::std::string& logging_service() const;
  void set_logging_service(const ::std::string& value);
  #if LANG_CXX11
  void set_logging_service(::std::string&& value);
  #endif
  void set_logging_service(const char* value);
  void set_logging_service(const char* value, size_t size);
  ::std::string* mutable_logging_service();
  ::std::string* release_logging_service();
  void set_allocated_logging_service(::std::string* logging_service);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetLoggingServiceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr logging_service_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsSetLoggingServiceRequestImpl();
};
// -------------------------------------------------------------------

class SetMonitoringServiceRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetMonitoringServiceRequest) */ {
 public:
  SetMonitoringServiceRequest();
  virtual ~SetMonitoringServiceRequest();

  SetMonitoringServiceRequest(const SetMonitoringServiceRequest& from);

  inline SetMonitoringServiceRequest& operator=(const SetMonitoringServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetMonitoringServiceRequest(SetMonitoringServiceRequest&& from) noexcept
    : SetMonitoringServiceRequest() {
    *this = ::std::move(from);
  }

  inline SetMonitoringServiceRequest& operator=(SetMonitoringServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetMonitoringServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMonitoringServiceRequest* internal_default_instance() {
    return reinterpret_cast<const SetMonitoringServiceRequest*>(
               &_SetMonitoringServiceRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(SetMonitoringServiceRequest* other);
  friend void swap(SetMonitoringServiceRequest& a, SetMonitoringServiceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMonitoringServiceRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetMonitoringServiceRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetMonitoringServiceRequest& from);
  void MergeFrom(const SetMonitoringServiceRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetMonitoringServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // string monitoring_service = 4;
  void clear_monitoring_service();
  static const int kMonitoringServiceFieldNumber = 4;
  const ::std::string& monitoring_service() const;
  void set_monitoring_service(const ::std::string& value);
  #if LANG_CXX11
  void set_monitoring_service(::std::string&& value);
  #endif
  void set_monitoring_service(const char* value);
  void set_monitoring_service(const char* value, size_t size);
  ::std::string* mutable_monitoring_service();
  ::std::string* release_monitoring_service();
  void set_allocated_monitoring_service(::std::string* monitoring_service);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetMonitoringServiceRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr monitoring_service_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsSetMonitoringServiceRequestImpl();
};
// -------------------------------------------------------------------

class SetAddonsConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetAddonsConfigRequest) */ {
 public:
  SetAddonsConfigRequest();
  virtual ~SetAddonsConfigRequest();

  SetAddonsConfigRequest(const SetAddonsConfigRequest& from);

  inline SetAddonsConfigRequest& operator=(const SetAddonsConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetAddonsConfigRequest(SetAddonsConfigRequest&& from) noexcept
    : SetAddonsConfigRequest() {
    *this = ::std::move(from);
  }

  inline SetAddonsConfigRequest& operator=(SetAddonsConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetAddonsConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAddonsConfigRequest* internal_default_instance() {
    return reinterpret_cast<const SetAddonsConfigRequest*>(
               &_SetAddonsConfigRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(SetAddonsConfigRequest* other);
  friend void swap(SetAddonsConfigRequest& a, SetAddonsConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAddonsConfigRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetAddonsConfigRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetAddonsConfigRequest& from);
  void MergeFrom(const SetAddonsConfigRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetAddonsConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // .google.container.v1.AddonsConfig addons_config = 4;
  bool has_addons_config() const;
  void clear_addons_config();
  static const int kAddonsConfigFieldNumber = 4;
  const ::google::container::v1::AddonsConfig& addons_config() const;
  ::google::container::v1::AddonsConfig* release_addons_config();
  ::google::container::v1::AddonsConfig* mutable_addons_config();
  void set_allocated_addons_config(::google::container::v1::AddonsConfig* addons_config);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetAddonsConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::container::v1::AddonsConfig* addons_config_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsSetAddonsConfigRequestImpl();
};
// -------------------------------------------------------------------

class SetLocationsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetLocationsRequest) */ {
 public:
  SetLocationsRequest();
  virtual ~SetLocationsRequest();

  SetLocationsRequest(const SetLocationsRequest& from);

  inline SetLocationsRequest& operator=(const SetLocationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetLocationsRequest(SetLocationsRequest&& from) noexcept
    : SetLocationsRequest() {
    *this = ::std::move(from);
  }

  inline SetLocationsRequest& operator=(SetLocationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetLocationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLocationsRequest* internal_default_instance() {
    return reinterpret_cast<const SetLocationsRequest*>(
               &_SetLocationsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(SetLocationsRequest* other);
  friend void swap(SetLocationsRequest& a, SetLocationsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetLocationsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetLocationsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetLocationsRequest& from);
  void MergeFrom(const SetLocationsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetLocationsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string locations = 4;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 4;
  const ::std::string& locations(int index) const;
  ::std::string* mutable_locations(int index);
  void set_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_locations(int index, ::std::string&& value);
  #endif
  void set_locations(int index, const char* value);
  void set_locations(int index, const char* value, size_t size);
  ::std::string* add_locations();
  void add_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_locations(::std::string&& value);
  #endif
  void add_locations(const char* value);
  void add_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& locations() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_locations();

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetLocationsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> locations_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsSetLocationsRequestImpl();
};
// -------------------------------------------------------------------

class UpdateMasterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.UpdateMasterRequest) */ {
 public:
  UpdateMasterRequest();
  virtual ~UpdateMasterRequest();

  UpdateMasterRequest(const UpdateMasterRequest& from);

  inline UpdateMasterRequest& operator=(const UpdateMasterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateMasterRequest(UpdateMasterRequest&& from) noexcept
    : UpdateMasterRequest() {
    *this = ::std::move(from);
  }

  inline UpdateMasterRequest& operator=(UpdateMasterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateMasterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMasterRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateMasterRequest*>(
               &_UpdateMasterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(UpdateMasterRequest* other);
  friend void swap(UpdateMasterRequest& a, UpdateMasterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateMasterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateMasterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateMasterRequest& from);
  void MergeFrom(const UpdateMasterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateMasterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // string master_version = 4;
  void clear_master_version();
  static const int kMasterVersionFieldNumber = 4;
  const ::std::string& master_version() const;
  void set_master_version(const ::std::string& value);
  #if LANG_CXX11
  void set_master_version(::std::string&& value);
  #endif
  void set_master_version(const char* value);
  void set_master_version(const char* value, size_t size);
  ::std::string* mutable_master_version();
  ::std::string* release_master_version();
  void set_allocated_master_version(::std::string* master_version);

  // @@protoc_insertion_point(class_scope:google.container.v1.UpdateMasterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr master_version_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsUpdateMasterRequestImpl();
};
// -------------------------------------------------------------------

class SetMasterAuthRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetMasterAuthRequest) */ {
 public:
  SetMasterAuthRequest();
  virtual ~SetMasterAuthRequest();

  SetMasterAuthRequest(const SetMasterAuthRequest& from);

  inline SetMasterAuthRequest& operator=(const SetMasterAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetMasterAuthRequest(SetMasterAuthRequest&& from) noexcept
    : SetMasterAuthRequest() {
    *this = ::std::move(from);
  }

  inline SetMasterAuthRequest& operator=(SetMasterAuthRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetMasterAuthRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMasterAuthRequest* internal_default_instance() {
    return reinterpret_cast<const SetMasterAuthRequest*>(
               &_SetMasterAuthRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(SetMasterAuthRequest* other);
  friend void swap(SetMasterAuthRequest& a, SetMasterAuthRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMasterAuthRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetMasterAuthRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetMasterAuthRequest& from);
  void MergeFrom(const SetMasterAuthRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetMasterAuthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SetMasterAuthRequest_Action Action;
  static const Action UNKNOWN =
    SetMasterAuthRequest_Action_UNKNOWN;
  static const Action SET_PASSWORD =
    SetMasterAuthRequest_Action_SET_PASSWORD;
  static const Action GENERATE_PASSWORD =
    SetMasterAuthRequest_Action_GENERATE_PASSWORD;
  static const Action SET_USERNAME =
    SetMasterAuthRequest_Action_SET_USERNAME;
  static inline bool Action_IsValid(int value) {
    return SetMasterAuthRequest_Action_IsValid(value);
  }
  static const Action Action_MIN =
    SetMasterAuthRequest_Action_Action_MIN;
  static const Action Action_MAX =
    SetMasterAuthRequest_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    SetMasterAuthRequest_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return SetMasterAuthRequest_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return SetMasterAuthRequest_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return SetMasterAuthRequest_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // .google.container.v1.MasterAuth update = 5;
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 5;
  const ::google::container::v1::MasterAuth& update() const;
  ::google::container::v1::MasterAuth* release_update();
  ::google::container::v1::MasterAuth* mutable_update();
  void set_allocated_update(::google::container::v1::MasterAuth* update);

  // .google.container.v1.SetMasterAuthRequest.Action action = 4;
  void clear_action();
  static const int kActionFieldNumber = 4;
  ::google::container::v1::SetMasterAuthRequest_Action action() const;
  void set_action(::google::container::v1::SetMasterAuthRequest_Action value);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetMasterAuthRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::container::v1::MasterAuth* update_;
  int action_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsSetMasterAuthRequestImpl();
};
// -------------------------------------------------------------------

class DeleteClusterRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.DeleteClusterRequest) */ {
 public:
  DeleteClusterRequest();
  virtual ~DeleteClusterRequest();

  DeleteClusterRequest(const DeleteClusterRequest& from);

  inline DeleteClusterRequest& operator=(const DeleteClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteClusterRequest(DeleteClusterRequest&& from) noexcept
    : DeleteClusterRequest() {
    *this = ::std::move(from);
  }

  inline DeleteClusterRequest& operator=(DeleteClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteClusterRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteClusterRequest*>(
               &_DeleteClusterRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(DeleteClusterRequest* other);
  friend void swap(DeleteClusterRequest& a, DeleteClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteClusterRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteClusterRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteClusterRequest& from);
  void MergeFrom(const DeleteClusterRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.DeleteClusterRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsDeleteClusterRequestImpl();
};
// -------------------------------------------------------------------

class ListClustersRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListClustersRequest) */ {
 public:
  ListClustersRequest();
  virtual ~ListClustersRequest();

  ListClustersRequest(const ListClustersRequest& from);

  inline ListClustersRequest& operator=(const ListClustersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListClustersRequest(ListClustersRequest&& from) noexcept
    : ListClustersRequest() {
    *this = ::std::move(from);
  }

  inline ListClustersRequest& operator=(ListClustersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListClustersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListClustersRequest* internal_default_instance() {
    return reinterpret_cast<const ListClustersRequest*>(
               &_ListClustersRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(ListClustersRequest* other);
  friend void swap(ListClustersRequest& a, ListClustersRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListClustersRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListClustersRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListClustersRequest& from);
  void MergeFrom(const ListClustersRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListClustersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // @@protoc_insertion_point(class_scope:google.container.v1.ListClustersRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsListClustersRequestImpl();
};
// -------------------------------------------------------------------

class ListClustersResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListClustersResponse) */ {
 public:
  ListClustersResponse();
  virtual ~ListClustersResponse();

  ListClustersResponse(const ListClustersResponse& from);

  inline ListClustersResponse& operator=(const ListClustersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListClustersResponse(ListClustersResponse&& from) noexcept
    : ListClustersResponse() {
    *this = ::std::move(from);
  }

  inline ListClustersResponse& operator=(ListClustersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListClustersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListClustersResponse* internal_default_instance() {
    return reinterpret_cast<const ListClustersResponse*>(
               &_ListClustersResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(ListClustersResponse* other);
  friend void swap(ListClustersResponse& a, ListClustersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListClustersResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListClustersResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListClustersResponse& from);
  void MergeFrom(const ListClustersResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListClustersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.Cluster clusters = 1;
  int clusters_size() const;
  void clear_clusters();
  static const int kClustersFieldNumber = 1;
  const ::google::container::v1::Cluster& clusters(int index) const;
  ::google::container::v1::Cluster* mutable_clusters(int index);
  ::google::container::v1::Cluster* add_clusters();
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >*
      mutable_clusters();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >&
      clusters() const;

  // repeated string missing_zones = 2;
  int missing_zones_size() const;
  void clear_missing_zones();
  static const int kMissingZonesFieldNumber = 2;
  const ::std::string& missing_zones(int index) const;
  ::std::string* mutable_missing_zones(int index);
  void set_missing_zones(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_missing_zones(int index, ::std::string&& value);
  #endif
  void set_missing_zones(int index, const char* value);
  void set_missing_zones(int index, const char* value, size_t size);
  ::std::string* add_missing_zones();
  void add_missing_zones(const ::std::string& value);
  #if LANG_CXX11
  void add_missing_zones(::std::string&& value);
  #endif
  void add_missing_zones(const char* value);
  void add_missing_zones(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& missing_zones() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_missing_zones();

  // @@protoc_insertion_point(class_scope:google.container.v1.ListClustersResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster > clusters_;
  ::google::protobuf::RepeatedPtrField< ::std::string> missing_zones_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsListClustersResponseImpl();
};
// -------------------------------------------------------------------

class GetOperationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetOperationRequest) */ {
 public:
  GetOperationRequest();
  virtual ~GetOperationRequest();

  GetOperationRequest(const GetOperationRequest& from);

  inline GetOperationRequest& operator=(const GetOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOperationRequest(GetOperationRequest&& from) noexcept
    : GetOperationRequest() {
    *this = ::std::move(from);
  }

  inline GetOperationRequest& operator=(GetOperationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetOperationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOperationRequest* internal_default_instance() {
    return reinterpret_cast<const GetOperationRequest*>(
               &_GetOperationRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(GetOperationRequest* other);
  friend void swap(GetOperationRequest& a, GetOperationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOperationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetOperationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetOperationRequest& from);
  void MergeFrom(const GetOperationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetOperationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string operation_id = 3;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 3;
  const ::std::string& operation_id() const;
  void set_operation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_operation_id(::std::string&& value);
  #endif
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  ::std::string* mutable_operation_id();
  ::std::string* release_operation_id();
  void set_allocated_operation_id(::std::string* operation_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetOperationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr operation_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsGetOperationRequestImpl();
};
// -------------------------------------------------------------------

class ListOperationsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListOperationsRequest) */ {
 public:
  ListOperationsRequest();
  virtual ~ListOperationsRequest();

  ListOperationsRequest(const ListOperationsRequest& from);

  inline ListOperationsRequest& operator=(const ListOperationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListOperationsRequest(ListOperationsRequest&& from) noexcept
    : ListOperationsRequest() {
    *this = ::std::move(from);
  }

  inline ListOperationsRequest& operator=(ListOperationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListOperationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOperationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListOperationsRequest*>(
               &_ListOperationsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(ListOperationsRequest* other);
  friend void swap(ListOperationsRequest& a, ListOperationsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListOperationsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListOperationsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListOperationsRequest& from);
  void MergeFrom(const ListOperationsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListOperationsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // @@protoc_insertion_point(class_scope:google.container.v1.ListOperationsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsListOperationsRequestImpl();
};
// -------------------------------------------------------------------

class CancelOperationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.CancelOperationRequest) */ {
 public:
  CancelOperationRequest();
  virtual ~CancelOperationRequest();

  CancelOperationRequest(const CancelOperationRequest& from);

  inline CancelOperationRequest& operator=(const CancelOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelOperationRequest(CancelOperationRequest&& from) noexcept
    : CancelOperationRequest() {
    *this = ::std::move(from);
  }

  inline CancelOperationRequest& operator=(CancelOperationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelOperationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelOperationRequest* internal_default_instance() {
    return reinterpret_cast<const CancelOperationRequest*>(
               &_CancelOperationRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(CancelOperationRequest* other);
  friend void swap(CancelOperationRequest& a, CancelOperationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelOperationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CancelOperationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CancelOperationRequest& from);
  void MergeFrom(const CancelOperationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CancelOperationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string operation_id = 3;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 3;
  const ::std::string& operation_id() const;
  void set_operation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_operation_id(::std::string&& value);
  #endif
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  ::std::string* mutable_operation_id();
  ::std::string* release_operation_id();
  void set_allocated_operation_id(::std::string* operation_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.CancelOperationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr operation_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsCancelOperationRequestImpl();
};
// -------------------------------------------------------------------

class ListOperationsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListOperationsResponse) */ {
 public:
  ListOperationsResponse();
  virtual ~ListOperationsResponse();

  ListOperationsResponse(const ListOperationsResponse& from);

  inline ListOperationsResponse& operator=(const ListOperationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListOperationsResponse(ListOperationsResponse&& from) noexcept
    : ListOperationsResponse() {
    *this = ::std::move(from);
  }

  inline ListOperationsResponse& operator=(ListOperationsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListOperationsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOperationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListOperationsResponse*>(
               &_ListOperationsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(ListOperationsResponse* other);
  friend void swap(ListOperationsResponse& a, ListOperationsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListOperationsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListOperationsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListOperationsResponse& from);
  void MergeFrom(const ListOperationsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListOperationsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.Operation operations = 1;
  int operations_size() const;
  void clear_operations();
  static const int kOperationsFieldNumber = 1;
  const ::google::container::v1::Operation& operations(int index) const;
  ::google::container::v1::Operation* mutable_operations(int index);
  ::google::container::v1::Operation* add_operations();
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >*
      mutable_operations();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >&
      operations() const;

  // repeated string missing_zones = 2;
  int missing_zones_size() const;
  void clear_missing_zones();
  static const int kMissingZonesFieldNumber = 2;
  const ::std::string& missing_zones(int index) const;
  ::std::string* mutable_missing_zones(int index);
  void set_missing_zones(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_missing_zones(int index, ::std::string&& value);
  #endif
  void set_missing_zones(int index, const char* value);
  void set_missing_zones(int index, const char* value, size_t size);
  ::std::string* add_missing_zones();
  void add_missing_zones(const ::std::string& value);
  #if LANG_CXX11
  void add_missing_zones(::std::string&& value);
  #endif
  void add_missing_zones(const char* value);
  void add_missing_zones(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& missing_zones() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_missing_zones();

  // @@protoc_insertion_point(class_scope:google.container.v1.ListOperationsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation > operations_;
  ::google::protobuf::RepeatedPtrField< ::std::string> missing_zones_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsListOperationsResponseImpl();
};
// -------------------------------------------------------------------

class GetServerConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetServerConfigRequest) */ {
 public:
  GetServerConfigRequest();
  virtual ~GetServerConfigRequest();

  GetServerConfigRequest(const GetServerConfigRequest& from);

  inline GetServerConfigRequest& operator=(const GetServerConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServerConfigRequest(GetServerConfigRequest&& from) noexcept
    : GetServerConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetServerConfigRequest& operator=(GetServerConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetServerConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServerConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetServerConfigRequest*>(
               &_GetServerConfigRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(GetServerConfigRequest* other);
  friend void swap(GetServerConfigRequest& a, GetServerConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServerConfigRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetServerConfigRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetServerConfigRequest& from);
  void MergeFrom(const GetServerConfigRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetServerConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetServerConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsGetServerConfigRequestImpl();
};
// -------------------------------------------------------------------

class ServerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ServerConfig) */ {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerConfig(ServerConfig&& from) noexcept
    : ServerConfig() {
    *this = ::std::move(from);
  }

  inline ServerConfig& operator=(ServerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ServerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfig* internal_default_instance() {
    return reinterpret_cast<const ServerConfig*>(
               &_ServerConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(ServerConfig* other);
  friend void swap(ServerConfig& a, ServerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ServerConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string valid_node_versions = 3;
  int valid_node_versions_size() const;
  void clear_valid_node_versions();
  static const int kValidNodeVersionsFieldNumber = 3;
  const ::std::string& valid_node_versions(int index) const;
  ::std::string* mutable_valid_node_versions(int index);
  void set_valid_node_versions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_valid_node_versions(int index, ::std::string&& value);
  #endif
  void set_valid_node_versions(int index, const char* value);
  void set_valid_node_versions(int index, const char* value, size_t size);
  ::std::string* add_valid_node_versions();
  void add_valid_node_versions(const ::std::string& value);
  #if LANG_CXX11
  void add_valid_node_versions(::std::string&& value);
  #endif
  void add_valid_node_versions(const char* value);
  void add_valid_node_versions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& valid_node_versions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_valid_node_versions();

  // repeated string valid_image_types = 5;
  int valid_image_types_size() const;
  void clear_valid_image_types();
  static const int kValidImageTypesFieldNumber = 5;
  const ::std::string& valid_image_types(int index) const;
  ::std::string* mutable_valid_image_types(int index);
  void set_valid_image_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_valid_image_types(int index, ::std::string&& value);
  #endif
  void set_valid_image_types(int index, const char* value);
  void set_valid_image_types(int index, const char* value, size_t size);
  ::std::string* add_valid_image_types();
  void add_valid_image_types(const ::std::string& value);
  #if LANG_CXX11
  void add_valid_image_types(::std::string&& value);
  #endif
  void add_valid_image_types(const char* value);
  void add_valid_image_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& valid_image_types() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_valid_image_types();

  // repeated string valid_master_versions = 6;
  int valid_master_versions_size() const;
  void clear_valid_master_versions();
  static const int kValidMasterVersionsFieldNumber = 6;
  const ::std::string& valid_master_versions(int index) const;
  ::std::string* mutable_valid_master_versions(int index);
  void set_valid_master_versions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_valid_master_versions(int index, ::std::string&& value);
  #endif
  void set_valid_master_versions(int index, const char* value);
  void set_valid_master_versions(int index, const char* value, size_t size);
  ::std::string* add_valid_master_versions();
  void add_valid_master_versions(const ::std::string& value);
  #if LANG_CXX11
  void add_valid_master_versions(::std::string&& value);
  #endif
  void add_valid_master_versions(const char* value);
  void add_valid_master_versions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& valid_master_versions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_valid_master_versions();

  // string default_cluster_version = 1;
  void clear_default_cluster_version();
  static const int kDefaultClusterVersionFieldNumber = 1;
  const ::std::string& default_cluster_version() const;
  void set_default_cluster_version(const ::std::string& value);
  #if LANG_CXX11
  void set_default_cluster_version(::std::string&& value);
  #endif
  void set_default_cluster_version(const char* value);
  void set_default_cluster_version(const char* value, size_t size);
  ::std::string* mutable_default_cluster_version();
  ::std::string* release_default_cluster_version();
  void set_allocated_default_cluster_version(::std::string* default_cluster_version);

  // string default_image_type = 4;
  void clear_default_image_type();
  static const int kDefaultImageTypeFieldNumber = 4;
  const ::std::string& default_image_type() const;
  void set_default_image_type(const ::std::string& value);
  #if LANG_CXX11
  void set_default_image_type(::std::string&& value);
  #endif
  void set_default_image_type(const char* value);
  void set_default_image_type(const char* value, size_t size);
  ::std::string* mutable_default_image_type();
  ::std::string* release_default_image_type();
  void set_allocated_default_image_type(::std::string* default_image_type);

  // @@protoc_insertion_point(class_scope:google.container.v1.ServerConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> valid_node_versions_;
  ::google::protobuf::RepeatedPtrField< ::std::string> valid_image_types_;
  ::google::protobuf::RepeatedPtrField< ::std::string> valid_master_versions_;
  ::google::protobuf::internal::ArenaStringPtr default_cluster_version_;
  ::google::protobuf::internal::ArenaStringPtr default_image_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsServerConfigImpl();
};
// -------------------------------------------------------------------

class CreateNodePoolRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.CreateNodePoolRequest) */ {
 public:
  CreateNodePoolRequest();
  virtual ~CreateNodePoolRequest();

  CreateNodePoolRequest(const CreateNodePoolRequest& from);

  inline CreateNodePoolRequest& operator=(const CreateNodePoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateNodePoolRequest(CreateNodePoolRequest&& from) noexcept
    : CreateNodePoolRequest() {
    *this = ::std::move(from);
  }

  inline CreateNodePoolRequest& operator=(CreateNodePoolRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateNodePoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateNodePoolRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNodePoolRequest*>(
               &_CreateNodePoolRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(CreateNodePoolRequest* other);
  friend void swap(CreateNodePoolRequest& a, CreateNodePoolRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateNodePoolRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateNodePoolRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateNodePoolRequest& from);
  void MergeFrom(const CreateNodePoolRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateNodePoolRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // .google.container.v1.NodePool node_pool = 4;
  bool has_node_pool() const;
  void clear_node_pool();
  static const int kNodePoolFieldNumber = 4;
  const ::google::container::v1::NodePool& node_pool() const;
  ::google::container::v1::NodePool* release_node_pool();
  ::google::container::v1::NodePool* mutable_node_pool();
  void set_allocated_node_pool(::google::container::v1::NodePool* node_pool);

  // @@protoc_insertion_point(class_scope:google.container.v1.CreateNodePoolRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::container::v1::NodePool* node_pool_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsCreateNodePoolRequestImpl();
};
// -------------------------------------------------------------------

class DeleteNodePoolRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.DeleteNodePoolRequest) */ {
 public:
  DeleteNodePoolRequest();
  virtual ~DeleteNodePoolRequest();

  DeleteNodePoolRequest(const DeleteNodePoolRequest& from);

  inline DeleteNodePoolRequest& operator=(const DeleteNodePoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteNodePoolRequest(DeleteNodePoolRequest&& from) noexcept
    : DeleteNodePoolRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNodePoolRequest& operator=(DeleteNodePoolRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteNodePoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteNodePoolRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNodePoolRequest*>(
               &_DeleteNodePoolRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(DeleteNodePoolRequest* other);
  friend void swap(DeleteNodePoolRequest& a, DeleteNodePoolRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteNodePoolRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteNodePoolRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteNodePoolRequest& from);
  void MergeFrom(const DeleteNodePoolRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteNodePoolRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4;
  void clear_node_pool_id();
  static const int kNodePoolIdFieldNumber = 4;
  const ::std::string& node_pool_id() const;
  void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_pool_id(::std::string&& value);
  #endif
  void set_node_pool_id(const char* value);
  void set_node_pool_id(const char* value, size_t size);
  ::std::string* mutable_node_pool_id();
  ::std::string* release_node_pool_id();
  void set_allocated_node_pool_id(::std::string* node_pool_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.DeleteNodePoolRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsDeleteNodePoolRequestImpl();
};
// -------------------------------------------------------------------

class ListNodePoolsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListNodePoolsRequest) */ {
 public:
  ListNodePoolsRequest();
  virtual ~ListNodePoolsRequest();

  ListNodePoolsRequest(const ListNodePoolsRequest& from);

  inline ListNodePoolsRequest& operator=(const ListNodePoolsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNodePoolsRequest(ListNodePoolsRequest&& from) noexcept
    : ListNodePoolsRequest() {
    *this = ::std::move(from);
  }

  inline ListNodePoolsRequest& operator=(ListNodePoolsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNodePoolsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNodePoolsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNodePoolsRequest*>(
               &_ListNodePoolsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(ListNodePoolsRequest* other);
  friend void swap(ListNodePoolsRequest& a, ListNodePoolsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNodePoolsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListNodePoolsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListNodePoolsRequest& from);
  void MergeFrom(const ListNodePoolsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListNodePoolsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.ListNodePoolsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsListNodePoolsRequestImpl();
};
// -------------------------------------------------------------------

class GetNodePoolRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetNodePoolRequest) */ {
 public:
  GetNodePoolRequest();
  virtual ~GetNodePoolRequest();

  GetNodePoolRequest(const GetNodePoolRequest& from);

  inline GetNodePoolRequest& operator=(const GetNodePoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNodePoolRequest(GetNodePoolRequest&& from) noexcept
    : GetNodePoolRequest() {
    *this = ::std::move(from);
  }

  inline GetNodePoolRequest& operator=(GetNodePoolRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetNodePoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodePoolRequest* internal_default_instance() {
    return reinterpret_cast<const GetNodePoolRequest*>(
               &_GetNodePoolRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(GetNodePoolRequest* other);
  friend void swap(GetNodePoolRequest& a, GetNodePoolRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNodePoolRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetNodePoolRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetNodePoolRequest& from);
  void MergeFrom(const GetNodePoolRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetNodePoolRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4;
  void clear_node_pool_id();
  static const int kNodePoolIdFieldNumber = 4;
  const ::std::string& node_pool_id() const;
  void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_pool_id(::std::string&& value);
  #endif
  void set_node_pool_id(const char* value);
  void set_node_pool_id(const char* value, size_t size);
  ::std::string* mutable_node_pool_id();
  ::std::string* release_node_pool_id();
  void set_allocated_node_pool_id(::std::string* node_pool_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetNodePoolRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsGetNodePoolRequestImpl();
};
// -------------------------------------------------------------------

class NodePool : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NodePool) */ {
 public:
  NodePool();
  virtual ~NodePool();

  NodePool(const NodePool& from);

  inline NodePool& operator=(const NodePool& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodePool(NodePool&& from) noexcept
    : NodePool() {
    *this = ::std::move(from);
  }

  inline NodePool& operator=(NodePool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodePool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodePool* internal_default_instance() {
    return reinterpret_cast<const NodePool*>(
               &_NodePool_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(NodePool* other);
  friend void swap(NodePool& a, NodePool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodePool* New() const PROTOBUF_FINAL { return New(NULL); }

  NodePool* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodePool& from);
  void MergeFrom(const NodePool& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodePool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NodePool_Status Status;
  static const Status STATUS_UNSPECIFIED =
    NodePool_Status_STATUS_UNSPECIFIED;
  static const Status PROVISIONING =
    NodePool_Status_PROVISIONING;
  static const Status RUNNING =
    NodePool_Status_RUNNING;
  static const Status RUNNING_WITH_ERROR =
    NodePool_Status_RUNNING_WITH_ERROR;
  static const Status RECONCILING =
    NodePool_Status_RECONCILING;
  static const Status STOPPING =
    NodePool_Status_STOPPING;
  static const Status ERROR =
    NodePool_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return NodePool_Status_IsValid(value);
  }
  static const Status Status_MIN =
    NodePool_Status_Status_MIN;
  static const Status Status_MAX =
    NodePool_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    NodePool_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return NodePool_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return NodePool_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return NodePool_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string instance_group_urls = 102;
  int instance_group_urls_size() const;
  void clear_instance_group_urls();
  static const int kInstanceGroupUrlsFieldNumber = 102;
  const ::std::string& instance_group_urls(int index) const;
  ::std::string* mutable_instance_group_urls(int index);
  void set_instance_group_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_instance_group_urls(int index, ::std::string&& value);
  #endif
  void set_instance_group_urls(int index, const char* value);
  void set_instance_group_urls(int index, const char* value, size_t size);
  ::std::string* add_instance_group_urls();
  void add_instance_group_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_instance_group_urls(::std::string&& value);
  #endif
  void add_instance_group_urls(const char* value);
  void add_instance_group_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& instance_group_urls() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_instance_group_urls();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string self_link = 100;
  void clear_self_link();
  static const int kSelfLinkFieldNumber = 100;
  const ::std::string& self_link() const;
  void set_self_link(const ::std::string& value);
  #if LANG_CXX11
  void set_self_link(::std::string&& value);
  #endif
  void set_self_link(const char* value);
  void set_self_link(const char* value, size_t size);
  ::std::string* mutable_self_link();
  ::std::string* release_self_link();
  void set_allocated_self_link(::std::string* self_link);

  // string version = 101;
  void clear_version();
  static const int kVersionFieldNumber = 101;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string status_message = 104;
  void clear_status_message();
  static const int kStatusMessageFieldNumber = 104;
  const ::std::string& status_message() const;
  void set_status_message(const ::std::string& value);
  #if LANG_CXX11
  void set_status_message(::std::string&& value);
  #endif
  void set_status_message(const char* value);
  void set_status_message(const char* value, size_t size);
  ::std::string* mutable_status_message();
  ::std::string* release_status_message();
  void set_allocated_status_message(::std::string* status_message);

  // .google.container.v1.NodeConfig config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::google::container::v1::NodeConfig& config() const;
  ::google::container::v1::NodeConfig* release_config();
  ::google::container::v1::NodeConfig* mutable_config();
  void set_allocated_config(::google::container::v1::NodeConfig* config);

  // .google.container.v1.NodePoolAutoscaling autoscaling = 4;
  bool has_autoscaling() const;
  void clear_autoscaling();
  static const int kAutoscalingFieldNumber = 4;
  const ::google::container::v1::NodePoolAutoscaling& autoscaling() const;
  ::google::container::v1::NodePoolAutoscaling* release_autoscaling();
  ::google::container::v1::NodePoolAutoscaling* mutable_autoscaling();
  void set_allocated_autoscaling(::google::container::v1::NodePoolAutoscaling* autoscaling);

  // .google.container.v1.NodeManagement management = 5;
  bool has_management() const;
  void clear_management();
  static const int kManagementFieldNumber = 5;
  const ::google::container::v1::NodeManagement& management() const;
  ::google::container::v1::NodeManagement* release_management();
  ::google::container::v1::NodeManagement* mutable_management();
  void set_allocated_management(::google::container::v1::NodeManagement* management);

  // int32 initial_node_count = 3;
  void clear_initial_node_count();
  static const int kInitialNodeCountFieldNumber = 3;
  ::google::protobuf::int32 initial_node_count() const;
  void set_initial_node_count(::google::protobuf::int32 value);

  // .google.container.v1.NodePool.Status status = 103;
  void clear_status();
  static const int kStatusFieldNumber = 103;
  ::google::container::v1::NodePool_Status status() const;
  void set_status(::google::container::v1::NodePool_Status value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NodePool)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> instance_group_urls_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr self_link_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr status_message_;
  ::google::container::v1::NodeConfig* config_;
  ::google::container::v1::NodePoolAutoscaling* autoscaling_;
  ::google::container::v1::NodeManagement* management_;
  ::google::protobuf::int32 initial_node_count_;
  int status_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsNodePoolImpl();
};
// -------------------------------------------------------------------

class NodeManagement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NodeManagement) */ {
 public:
  NodeManagement();
  virtual ~NodeManagement();

  NodeManagement(const NodeManagement& from);

  inline NodeManagement& operator=(const NodeManagement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeManagement(NodeManagement&& from) noexcept
    : NodeManagement() {
    *this = ::std::move(from);
  }

  inline NodeManagement& operator=(NodeManagement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeManagement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeManagement* internal_default_instance() {
    return reinterpret_cast<const NodeManagement*>(
               &_NodeManagement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    44;

  void Swap(NodeManagement* other);
  friend void swap(NodeManagement& a, NodeManagement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeManagement* New() const PROTOBUF_FINAL { return New(NULL); }

  NodeManagement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodeManagement& from);
  void MergeFrom(const NodeManagement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodeManagement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.container.v1.AutoUpgradeOptions upgrade_options = 10;
  bool has_upgrade_options() const;
  void clear_upgrade_options();
  static const int kUpgradeOptionsFieldNumber = 10;
  const ::google::container::v1::AutoUpgradeOptions& upgrade_options() const;
  ::google::container::v1::AutoUpgradeOptions* release_upgrade_options();
  ::google::container::v1::AutoUpgradeOptions* mutable_upgrade_options();
  void set_allocated_upgrade_options(::google::container::v1::AutoUpgradeOptions* upgrade_options);

  // bool auto_upgrade = 1;
  void clear_auto_upgrade();
  static const int kAutoUpgradeFieldNumber = 1;
  bool auto_upgrade() const;
  void set_auto_upgrade(bool value);

  // bool auto_repair = 2;
  void clear_auto_repair();
  static const int kAutoRepairFieldNumber = 2;
  bool auto_repair() const;
  void set_auto_repair(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NodeManagement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::container::v1::AutoUpgradeOptions* upgrade_options_;
  bool auto_upgrade_;
  bool auto_repair_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsNodeManagementImpl();
};
// -------------------------------------------------------------------

class AutoUpgradeOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.AutoUpgradeOptions) */ {
 public:
  AutoUpgradeOptions();
  virtual ~AutoUpgradeOptions();

  AutoUpgradeOptions(const AutoUpgradeOptions& from);

  inline AutoUpgradeOptions& operator=(const AutoUpgradeOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AutoUpgradeOptions(AutoUpgradeOptions&& from) noexcept
    : AutoUpgradeOptions() {
    *this = ::std::move(from);
  }

  inline AutoUpgradeOptions& operator=(AutoUpgradeOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AutoUpgradeOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoUpgradeOptions* internal_default_instance() {
    return reinterpret_cast<const AutoUpgradeOptions*>(
               &_AutoUpgradeOptions_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    45;

  void Swap(AutoUpgradeOptions* other);
  friend void swap(AutoUpgradeOptions& a, AutoUpgradeOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AutoUpgradeOptions* New() const PROTOBUF_FINAL { return New(NULL); }

  AutoUpgradeOptions* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AutoUpgradeOptions& from);
  void MergeFrom(const AutoUpgradeOptions& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AutoUpgradeOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string auto_upgrade_start_time = 1;
  void clear_auto_upgrade_start_time();
  static const int kAutoUpgradeStartTimeFieldNumber = 1;
  const ::std::string& auto_upgrade_start_time() const;
  void set_auto_upgrade_start_time(const ::std::string& value);
  #if LANG_CXX11
  void set_auto_upgrade_start_time(::std::string&& value);
  #endif
  void set_auto_upgrade_start_time(const char* value);
  void set_auto_upgrade_start_time(const char* value, size_t size);
  ::std::string* mutable_auto_upgrade_start_time();
  ::std::string* release_auto_upgrade_start_time();
  void set_allocated_auto_upgrade_start_time(::std::string* auto_upgrade_start_time);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:google.container.v1.AutoUpgradeOptions)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr auto_upgrade_start_time_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsAutoUpgradeOptionsImpl();
};
// -------------------------------------------------------------------

class MaintenancePolicy : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.MaintenancePolicy) */ {
 public:
  MaintenancePolicy();
  virtual ~MaintenancePolicy();

  MaintenancePolicy(const MaintenancePolicy& from);

  inline MaintenancePolicy& operator=(const MaintenancePolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaintenancePolicy(MaintenancePolicy&& from) noexcept
    : MaintenancePolicy() {
    *this = ::std::move(from);
  }

  inline MaintenancePolicy& operator=(MaintenancePolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaintenancePolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaintenancePolicy* internal_default_instance() {
    return reinterpret_cast<const MaintenancePolicy*>(
               &_MaintenancePolicy_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    46;

  void Swap(MaintenancePolicy* other);
  friend void swap(MaintenancePolicy& a, MaintenancePolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaintenancePolicy* New() const PROTOBUF_FINAL { return New(NULL); }

  MaintenancePolicy* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MaintenancePolicy& from);
  void MergeFrom(const MaintenancePolicy& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MaintenancePolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.container.v1.MaintenanceWindow window = 1;
  bool has_window() const;
  void clear_window();
  static const int kWindowFieldNumber = 1;
  const ::google::container::v1::MaintenanceWindow& window() const;
  ::google::container::v1::MaintenanceWindow* release_window();
  ::google::container::v1::MaintenanceWindow* mutable_window();
  void set_allocated_window(::google::container::v1::MaintenanceWindow* window);

  // @@protoc_insertion_point(class_scope:google.container.v1.MaintenancePolicy)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::container::v1::MaintenanceWindow* window_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsMaintenancePolicyImpl();
};
// -------------------------------------------------------------------

class MaintenanceWindow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.MaintenanceWindow) */ {
 public:
  MaintenanceWindow();
  virtual ~MaintenanceWindow();

  MaintenanceWindow(const MaintenanceWindow& from);

  inline MaintenanceWindow& operator=(const MaintenanceWindow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaintenanceWindow(MaintenanceWindow&& from) noexcept
    : MaintenanceWindow() {
    *this = ::std::move(from);
  }

  inline MaintenanceWindow& operator=(MaintenanceWindow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MaintenanceWindow& default_instance();

  enum PolicyCase {
    kDailyMaintenanceWindow = 2,
    POLICY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaintenanceWindow* internal_default_instance() {
    return reinterpret_cast<const MaintenanceWindow*>(
               &_MaintenanceWindow_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    47;

  void Swap(MaintenanceWindow* other);
  friend void swap(MaintenanceWindow& a, MaintenanceWindow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaintenanceWindow* New() const PROTOBUF_FINAL { return New(NULL); }

  MaintenanceWindow* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MaintenanceWindow& from);
  void MergeFrom(const MaintenanceWindow& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MaintenanceWindow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.container.v1.DailyMaintenanceWindow daily_maintenance_window = 2;
  bool has_daily_maintenance_window() const;
  void clear_daily_maintenance_window();
  static const int kDailyMaintenanceWindowFieldNumber = 2;
  const ::google::container::v1::DailyMaintenanceWindow& daily_maintenance_window() const;
  ::google::container::v1::DailyMaintenanceWindow* release_daily_maintenance_window();
  ::google::container::v1::DailyMaintenanceWindow* mutable_daily_maintenance_window();
  void set_allocated_daily_maintenance_window(::google::container::v1::DailyMaintenanceWindow* daily_maintenance_window);

  PolicyCase policy_case() const;
  // @@protoc_insertion_point(class_scope:google.container.v1.MaintenanceWindow)
 private:
  void set_has_daily_maintenance_window();

  inline bool has_policy() const;
  void clear_policy();
  inline void clear_has_policy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union PolicyUnion {
    PolicyUnion() {}
    ::google::container::v1::DailyMaintenanceWindow* daily_maintenance_window_;
  } policy_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsMaintenanceWindowImpl();
};
// -------------------------------------------------------------------

class DailyMaintenanceWindow : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.DailyMaintenanceWindow) */ {
 public:
  DailyMaintenanceWindow();
  virtual ~DailyMaintenanceWindow();

  DailyMaintenanceWindow(const DailyMaintenanceWindow& from);

  inline DailyMaintenanceWindow& operator=(const DailyMaintenanceWindow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DailyMaintenanceWindow(DailyMaintenanceWindow&& from) noexcept
    : DailyMaintenanceWindow() {
    *this = ::std::move(from);
  }

  inline DailyMaintenanceWindow& operator=(DailyMaintenanceWindow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DailyMaintenanceWindow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DailyMaintenanceWindow* internal_default_instance() {
    return reinterpret_cast<const DailyMaintenanceWindow*>(
               &_DailyMaintenanceWindow_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    48;

  void Swap(DailyMaintenanceWindow* other);
  friend void swap(DailyMaintenanceWindow& a, DailyMaintenanceWindow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DailyMaintenanceWindow* New() const PROTOBUF_FINAL { return New(NULL); }

  DailyMaintenanceWindow* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DailyMaintenanceWindow& from);
  void MergeFrom(const DailyMaintenanceWindow& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DailyMaintenanceWindow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string start_time = 2;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  const ::std::string& start_time() const;
  void set_start_time(const ::std::string& value);
  #if LANG_CXX11
  void set_start_time(::std::string&& value);
  #endif
  void set_start_time(const char* value);
  void set_start_time(const char* value, size_t size);
  ::std::string* mutable_start_time();
  ::std::string* release_start_time();
  void set_allocated_start_time(::std::string* start_time);

  // string duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  const ::std::string& duration() const;
  void set_duration(const ::std::string& value);
  #if LANG_CXX11
  void set_duration(::std::string&& value);
  #endif
  void set_duration(const char* value);
  void set_duration(const char* value, size_t size);
  ::std::string* mutable_duration();
  ::std::string* release_duration();
  void set_allocated_duration(::std::string* duration);

  // @@protoc_insertion_point(class_scope:google.container.v1.DailyMaintenanceWindow)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr start_time_;
  ::google::protobuf::internal::ArenaStringPtr duration_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsDailyMaintenanceWindowImpl();
};
// -------------------------------------------------------------------

class SetNodePoolManagementRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetNodePoolManagementRequest) */ {
 public:
  SetNodePoolManagementRequest();
  virtual ~SetNodePoolManagementRequest();

  SetNodePoolManagementRequest(const SetNodePoolManagementRequest& from);

  inline SetNodePoolManagementRequest& operator=(const SetNodePoolManagementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetNodePoolManagementRequest(SetNodePoolManagementRequest&& from) noexcept
    : SetNodePoolManagementRequest() {
    *this = ::std::move(from);
  }

  inline SetNodePoolManagementRequest& operator=(SetNodePoolManagementRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetNodePoolManagementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetNodePoolManagementRequest* internal_default_instance() {
    return reinterpret_cast<const SetNodePoolManagementRequest*>(
               &_SetNodePoolManagementRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    49;

  void Swap(SetNodePoolManagementRequest* other);
  friend void swap(SetNodePoolManagementRequest& a, SetNodePoolManagementRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetNodePoolManagementRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetNodePoolManagementRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetNodePoolManagementRequest& from);
  void MergeFrom(const SetNodePoolManagementRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetNodePoolManagementRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4;
  void clear_node_pool_id();
  static const int kNodePoolIdFieldNumber = 4;
  const ::std::string& node_pool_id() const;
  void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_pool_id(::std::string&& value);
  #endif
  void set_node_pool_id(const char* value);
  void set_node_pool_id(const char* value, size_t size);
  ::std::string* mutable_node_pool_id();
  ::std::string* release_node_pool_id();
  void set_allocated_node_pool_id(::std::string* node_pool_id);

  // .google.container.v1.NodeManagement management = 5;
  bool has_management() const;
  void clear_management();
  static const int kManagementFieldNumber = 5;
  const ::google::container::v1::NodeManagement& management() const;
  ::google::container::v1::NodeManagement* release_management();
  ::google::container::v1::NodeManagement* mutable_management();
  void set_allocated_management(::google::container::v1::NodeManagement* management);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetNodePoolManagementRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  ::google::container::v1::NodeManagement* management_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsSetNodePoolManagementRequestImpl();
};
// -------------------------------------------------------------------

class SetNodePoolSizeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetNodePoolSizeRequest) */ {
 public:
  SetNodePoolSizeRequest();
  virtual ~SetNodePoolSizeRequest();

  SetNodePoolSizeRequest(const SetNodePoolSizeRequest& from);

  inline SetNodePoolSizeRequest& operator=(const SetNodePoolSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetNodePoolSizeRequest(SetNodePoolSizeRequest&& from) noexcept
    : SetNodePoolSizeRequest() {
    *this = ::std::move(from);
  }

  inline SetNodePoolSizeRequest& operator=(SetNodePoolSizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetNodePoolSizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetNodePoolSizeRequest* internal_default_instance() {
    return reinterpret_cast<const SetNodePoolSizeRequest*>(
               &_SetNodePoolSizeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    50;

  void Swap(SetNodePoolSizeRequest* other);
  friend void swap(SetNodePoolSizeRequest& a, SetNodePoolSizeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetNodePoolSizeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetNodePoolSizeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetNodePoolSizeRequest& from);
  void MergeFrom(const SetNodePoolSizeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetNodePoolSizeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4;
  void clear_node_pool_id();
  static const int kNodePoolIdFieldNumber = 4;
  const ::std::string& node_pool_id() const;
  void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_pool_id(::std::string&& value);
  #endif
  void set_node_pool_id(const char* value);
  void set_node_pool_id(const char* value, size_t size);
  ::std::string* mutable_node_pool_id();
  ::std::string* release_node_pool_id();
  void set_allocated_node_pool_id(::std::string* node_pool_id);

  // int32 node_count = 5;
  void clear_node_count();
  static const int kNodeCountFieldNumber = 5;
  ::google::protobuf::int32 node_count() const;
  void set_node_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetNodePoolSizeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  ::google::protobuf::int32 node_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsSetNodePoolSizeRequestImpl();
};
// -------------------------------------------------------------------

class RollbackNodePoolUpgradeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.RollbackNodePoolUpgradeRequest) */ {
 public:
  RollbackNodePoolUpgradeRequest();
  virtual ~RollbackNodePoolUpgradeRequest();

  RollbackNodePoolUpgradeRequest(const RollbackNodePoolUpgradeRequest& from);

  inline RollbackNodePoolUpgradeRequest& operator=(const RollbackNodePoolUpgradeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RollbackNodePoolUpgradeRequest(RollbackNodePoolUpgradeRequest&& from) noexcept
    : RollbackNodePoolUpgradeRequest() {
    *this = ::std::move(from);
  }

  inline RollbackNodePoolUpgradeRequest& operator=(RollbackNodePoolUpgradeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RollbackNodePoolUpgradeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollbackNodePoolUpgradeRequest* internal_default_instance() {
    return reinterpret_cast<const RollbackNodePoolUpgradeRequest*>(
               &_RollbackNodePoolUpgradeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    51;

  void Swap(RollbackNodePoolUpgradeRequest* other);
  friend void swap(RollbackNodePoolUpgradeRequest& a, RollbackNodePoolUpgradeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RollbackNodePoolUpgradeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  RollbackNodePoolUpgradeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RollbackNodePoolUpgradeRequest& from);
  void MergeFrom(const RollbackNodePoolUpgradeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RollbackNodePoolUpgradeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4;
  void clear_node_pool_id();
  static const int kNodePoolIdFieldNumber = 4;
  const ::std::string& node_pool_id() const;
  void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  void set_node_pool_id(::std::string&& value);
  #endif
  void set_node_pool_id(const char* value);
  void set_node_pool_id(const char* value, size_t size);
  ::std::string* mutable_node_pool_id();
  ::std::string* release_node_pool_id();
  void set_allocated_node_pool_id(::std::string* node_pool_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.RollbackNodePoolUpgradeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsRollbackNodePoolUpgradeRequestImpl();
};
// -------------------------------------------------------------------

class ListNodePoolsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListNodePoolsResponse) */ {
 public:
  ListNodePoolsResponse();
  virtual ~ListNodePoolsResponse();

  ListNodePoolsResponse(const ListNodePoolsResponse& from);

  inline ListNodePoolsResponse& operator=(const ListNodePoolsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNodePoolsResponse(ListNodePoolsResponse&& from) noexcept
    : ListNodePoolsResponse() {
    *this = ::std::move(from);
  }

  inline ListNodePoolsResponse& operator=(ListNodePoolsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListNodePoolsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNodePoolsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNodePoolsResponse*>(
               &_ListNodePoolsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    52;

  void Swap(ListNodePoolsResponse* other);
  friend void swap(ListNodePoolsResponse& a, ListNodePoolsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNodePoolsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListNodePoolsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListNodePoolsResponse& from);
  void MergeFrom(const ListNodePoolsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListNodePoolsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.NodePool node_pools = 1;
  int node_pools_size() const;
  void clear_node_pools();
  static const int kNodePoolsFieldNumber = 1;
  const ::google::container::v1::NodePool& node_pools(int index) const;
  ::google::container::v1::NodePool* mutable_node_pools(int index);
  ::google::container::v1::NodePool* add_node_pools();
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >*
      mutable_node_pools();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >&
      node_pools() const;

  // @@protoc_insertion_point(class_scope:google.container.v1.ListNodePoolsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool > node_pools_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsListNodePoolsResponseImpl();
};
// -------------------------------------------------------------------

class NodePoolAutoscaling : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NodePoolAutoscaling) */ {
 public:
  NodePoolAutoscaling();
  virtual ~NodePoolAutoscaling();

  NodePoolAutoscaling(const NodePoolAutoscaling& from);

  inline NodePoolAutoscaling& operator=(const NodePoolAutoscaling& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodePoolAutoscaling(NodePoolAutoscaling&& from) noexcept
    : NodePoolAutoscaling() {
    *this = ::std::move(from);
  }

  inline NodePoolAutoscaling& operator=(NodePoolAutoscaling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NodePoolAutoscaling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodePoolAutoscaling* internal_default_instance() {
    return reinterpret_cast<const NodePoolAutoscaling*>(
               &_NodePoolAutoscaling_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    53;

  void Swap(NodePoolAutoscaling* other);
  friend void swap(NodePoolAutoscaling& a, NodePoolAutoscaling& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodePoolAutoscaling* New() const PROTOBUF_FINAL { return New(NULL); }

  NodePoolAutoscaling* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NodePoolAutoscaling& from);
  void MergeFrom(const NodePoolAutoscaling& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NodePoolAutoscaling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // int32 min_node_count = 2;
  void clear_min_node_count();
  static const int kMinNodeCountFieldNumber = 2;
  ::google::protobuf::int32 min_node_count() const;
  void set_min_node_count(::google::protobuf::int32 value);

  // int32 max_node_count = 3;
  void clear_max_node_count();
  static const int kMaxNodeCountFieldNumber = 3;
  ::google::protobuf::int32 max_node_count() const;
  void set_max_node_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NodePoolAutoscaling)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  ::google::protobuf::int32 min_node_count_;
  ::google::protobuf::int32 max_node_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsNodePoolAutoscalingImpl();
};
// -------------------------------------------------------------------

class SetLabelsRequest_ResourceLabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SetLabelsRequest_ResourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<SetLabelsRequest_ResourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SetLabelsRequest_ResourceLabelsEntry_DoNotUse();
  SetLabelsRequest_ResourceLabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SetLabelsRequest_ResourceLabelsEntry_DoNotUse& other);
  static const SetLabelsRequest_ResourceLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SetLabelsRequest_ResourceLabelsEntry_DoNotUse*>(&_SetLabelsRequest_ResourceLabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SetLabelsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetLabelsRequest) */ {
 public:
  SetLabelsRequest();
  virtual ~SetLabelsRequest();

  SetLabelsRequest(const SetLabelsRequest& from);

  inline SetLabelsRequest& operator=(const SetLabelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetLabelsRequest(SetLabelsRequest&& from) noexcept
    : SetLabelsRequest() {
    *this = ::std::move(from);
  }

  inline SetLabelsRequest& operator=(SetLabelsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetLabelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLabelsRequest* internal_default_instance() {
    return reinterpret_cast<const SetLabelsRequest*>(
               &_SetLabelsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    55;

  void Swap(SetLabelsRequest* other);
  friend void swap(SetLabelsRequest& a, SetLabelsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetLabelsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetLabelsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetLabelsRequest& from);
  void MergeFrom(const SetLabelsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetLabelsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> resource_labels = 4;
  int resource_labels_size() const;
  void clear_resource_labels();
  static const int kResourceLabelsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      resource_labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_resource_labels();

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // string label_fingerprint = 5;
  void clear_label_fingerprint();
  static const int kLabelFingerprintFieldNumber = 5;
  const ::std::string& label_fingerprint() const;
  void set_label_fingerprint(const ::std::string& value);
  #if LANG_CXX11
  void set_label_fingerprint(::std::string&& value);
  #endif
  void set_label_fingerprint(const char* value);
  void set_label_fingerprint(const char* value, size_t size);
  ::std::string* mutable_label_fingerprint();
  ::std::string* release_label_fingerprint();
  void set_allocated_label_fingerprint(::std::string* label_fingerprint);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetLabelsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      SetLabelsRequest_ResourceLabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > resource_labels_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr label_fingerprint_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsSetLabelsRequestImpl();
};
// -------------------------------------------------------------------

class SetLegacyAbacRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetLegacyAbacRequest) */ {
 public:
  SetLegacyAbacRequest();
  virtual ~SetLegacyAbacRequest();

  SetLegacyAbacRequest(const SetLegacyAbacRequest& from);

  inline SetLegacyAbacRequest& operator=(const SetLegacyAbacRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetLegacyAbacRequest(SetLegacyAbacRequest&& from) noexcept
    : SetLegacyAbacRequest() {
    *this = ::std::move(from);
  }

  inline SetLegacyAbacRequest& operator=(SetLegacyAbacRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetLegacyAbacRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLegacyAbacRequest* internal_default_instance() {
    return reinterpret_cast<const SetLegacyAbacRequest*>(
               &_SetLegacyAbacRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    56;

  void Swap(SetLegacyAbacRequest* other);
  friend void swap(SetLegacyAbacRequest& a, SetLegacyAbacRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetLegacyAbacRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetLegacyAbacRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetLegacyAbacRequest& from);
  void MergeFrom(const SetLegacyAbacRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetLegacyAbacRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // bool enabled = 4;
  void clear_enabled();
  static const int kEnabledFieldNumber = 4;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetLegacyAbacRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  bool enabled_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsSetLegacyAbacRequestImpl();
};
// -------------------------------------------------------------------

class StartIPRotationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.StartIPRotationRequest) */ {
 public:
  StartIPRotationRequest();
  virtual ~StartIPRotationRequest();

  StartIPRotationRequest(const StartIPRotationRequest& from);

  inline StartIPRotationRequest& operator=(const StartIPRotationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartIPRotationRequest(StartIPRotationRequest&& from) noexcept
    : StartIPRotationRequest() {
    *this = ::std::move(from);
  }

  inline StartIPRotationRequest& operator=(StartIPRotationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StartIPRotationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartIPRotationRequest* internal_default_instance() {
    return reinterpret_cast<const StartIPRotationRequest*>(
               &_StartIPRotationRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    57;

  void Swap(StartIPRotationRequest* other);
  friend void swap(StartIPRotationRequest& a, StartIPRotationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartIPRotationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StartIPRotationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StartIPRotationRequest& from);
  void MergeFrom(const StartIPRotationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StartIPRotationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.StartIPRotationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsStartIPRotationRequestImpl();
};
// -------------------------------------------------------------------

class CompleteIPRotationRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.CompleteIPRotationRequest) */ {
 public:
  CompleteIPRotationRequest();
  virtual ~CompleteIPRotationRequest();

  CompleteIPRotationRequest(const CompleteIPRotationRequest& from);

  inline CompleteIPRotationRequest& operator=(const CompleteIPRotationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompleteIPRotationRequest(CompleteIPRotationRequest&& from) noexcept
    : CompleteIPRotationRequest() {
    *this = ::std::move(from);
  }

  inline CompleteIPRotationRequest& operator=(CompleteIPRotationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompleteIPRotationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompleteIPRotationRequest* internal_default_instance() {
    return reinterpret_cast<const CompleteIPRotationRequest*>(
               &_CompleteIPRotationRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    58;

  void Swap(CompleteIPRotationRequest* other);
  friend void swap(CompleteIPRotationRequest& a, CompleteIPRotationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompleteIPRotationRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CompleteIPRotationRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CompleteIPRotationRequest& from);
  void MergeFrom(const CompleteIPRotationRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CompleteIPRotationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.CompleteIPRotationRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsCompleteIPRotationRequestImpl();
};
// -------------------------------------------------------------------

class AcceleratorConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.AcceleratorConfig) */ {
 public:
  AcceleratorConfig();
  virtual ~AcceleratorConfig();

  AcceleratorConfig(const AcceleratorConfig& from);

  inline AcceleratorConfig& operator=(const AcceleratorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcceleratorConfig(AcceleratorConfig&& from) noexcept
    : AcceleratorConfig() {
    *this = ::std::move(from);
  }

  inline AcceleratorConfig& operator=(AcceleratorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceleratorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceleratorConfig* internal_default_instance() {
    return reinterpret_cast<const AcceleratorConfig*>(
               &_AcceleratorConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    59;

  void Swap(AcceleratorConfig* other);
  friend void swap(AcceleratorConfig& a, AcceleratorConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcceleratorConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  AcceleratorConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcceleratorConfig& from);
  void MergeFrom(const AcceleratorConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcceleratorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string accelerator_type = 2;
  void clear_accelerator_type();
  static const int kAcceleratorTypeFieldNumber = 2;
  const ::std::string& accelerator_type() const;
  void set_accelerator_type(const ::std::string& value);
  #if LANG_CXX11
  void set_accelerator_type(::std::string&& value);
  #endif
  void set_accelerator_type(const char* value);
  void set_accelerator_type(const char* value, size_t size);
  ::std::string* mutable_accelerator_type();
  ::std::string* release_accelerator_type();
  void set_allocated_accelerator_type(::std::string* accelerator_type);

  // int64 accelerator_count = 1;
  void clear_accelerator_count();
  static const int kAcceleratorCountFieldNumber = 1;
  ::google::protobuf::int64 accelerator_count() const;
  void set_accelerator_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.AcceleratorConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accelerator_type_;
  ::google::protobuf::int64 accelerator_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsAcceleratorConfigImpl();
};
// -------------------------------------------------------------------

class SetNetworkPolicyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetNetworkPolicyRequest) */ {
 public:
  SetNetworkPolicyRequest();
  virtual ~SetNetworkPolicyRequest();

  SetNetworkPolicyRequest(const SetNetworkPolicyRequest& from);

  inline SetNetworkPolicyRequest& operator=(const SetNetworkPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetNetworkPolicyRequest(SetNetworkPolicyRequest&& from) noexcept
    : SetNetworkPolicyRequest() {
    *this = ::std::move(from);
  }

  inline SetNetworkPolicyRequest& operator=(SetNetworkPolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetNetworkPolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetNetworkPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const SetNetworkPolicyRequest*>(
               &_SetNetworkPolicyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    60;

  void Swap(SetNetworkPolicyRequest* other);
  friend void swap(SetNetworkPolicyRequest& a, SetNetworkPolicyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetNetworkPolicyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetNetworkPolicyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetNetworkPolicyRequest& from);
  void MergeFrom(const SetNetworkPolicyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetNetworkPolicyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // .google.container.v1.NetworkPolicy network_policy = 4;
  bool has_network_policy() const;
  void clear_network_policy();
  static const int kNetworkPolicyFieldNumber = 4;
  const ::google::container::v1::NetworkPolicy& network_policy() const;
  ::google::container::v1::NetworkPolicy* release_network_policy();
  ::google::container::v1::NetworkPolicy* mutable_network_policy();
  void set_allocated_network_policy(::google::container::v1::NetworkPolicy* network_policy);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetNetworkPolicyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::container::v1::NetworkPolicy* network_policy_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsSetNetworkPolicyRequestImpl();
};
// -------------------------------------------------------------------

class SetMaintenancePolicyRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetMaintenancePolicyRequest) */ {
 public:
  SetMaintenancePolicyRequest();
  virtual ~SetMaintenancePolicyRequest();

  SetMaintenancePolicyRequest(const SetMaintenancePolicyRequest& from);

  inline SetMaintenancePolicyRequest& operator=(const SetMaintenancePolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetMaintenancePolicyRequest(SetMaintenancePolicyRequest&& from) noexcept
    : SetMaintenancePolicyRequest() {
    *this = ::std::move(from);
  }

  inline SetMaintenancePolicyRequest& operator=(SetMaintenancePolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SetMaintenancePolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMaintenancePolicyRequest* internal_default_instance() {
    return reinterpret_cast<const SetMaintenancePolicyRequest*>(
               &_SetMaintenancePolicyRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    61;

  void Swap(SetMaintenancePolicyRequest* other);
  friend void swap(SetMaintenancePolicyRequest& a, SetMaintenancePolicyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMaintenancePolicyRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SetMaintenancePolicyRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SetMaintenancePolicyRequest& from);
  void MergeFrom(const SetMaintenancePolicyRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SetMaintenancePolicyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1;
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2;
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3;
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // .google.container.v1.MaintenancePolicy maintenance_policy = 4;
  bool has_maintenance_policy() const;
  void clear_maintenance_policy();
  static const int kMaintenancePolicyFieldNumber = 4;
  const ::google::container::v1::MaintenancePolicy& maintenance_policy() const;
  ::google::container::v1::MaintenancePolicy* release_maintenance_policy();
  ::google::container::v1::MaintenancePolicy* mutable_maintenance_policy();
  void set_allocated_maintenance_policy(::google::container::v1::MaintenancePolicy* maintenance_policy);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetMaintenancePolicyRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::container::v1::MaintenancePolicy* maintenance_policy_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::TableStruct;
  friend void ::protobuf_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto::InitDefaultsSetMaintenancePolicyRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NodeConfig

// string machine_type = 1;
inline void NodeConfig::clear_machine_type() {
  machine_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeConfig::machine_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.machine_type)
  return machine_type_.GetNoArena();
}
inline void NodeConfig::set_machine_type(const ::std::string& value) {
  
  machine_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.machine_type)
}
#if LANG_CXX11
inline void NodeConfig::set_machine_type(::std::string&& value) {
  
  machine_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.machine_type)
}
#endif
inline void NodeConfig::set_machine_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  machine_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.machine_type)
}
inline void NodeConfig::set_machine_type(const char* value, size_t size) {
  
  machine_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.machine_type)
}
inline ::std::string* NodeConfig::mutable_machine_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.machine_type)
  return machine_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeConfig::release_machine_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.machine_type)
  
  return machine_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeConfig::set_allocated_machine_type(::std::string* machine_type) {
  if (machine_type != NULL) {
    
  } else {
    
  }
  machine_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.machine_type)
}

// int32 disk_size_gb = 2;
inline void NodeConfig::clear_disk_size_gb() {
  disk_size_gb_ = 0;
}
inline ::google::protobuf::int32 NodeConfig::disk_size_gb() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.disk_size_gb)
  return disk_size_gb_;
}
inline void NodeConfig::set_disk_size_gb(::google::protobuf::int32 value) {
  
  disk_size_gb_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.disk_size_gb)
}

// repeated string oauth_scopes = 3;
inline int NodeConfig::oauth_scopes_size() const {
  return oauth_scopes_.size();
}
inline void NodeConfig::clear_oauth_scopes() {
  oauth_scopes_.Clear();
}
inline const ::std::string& NodeConfig::oauth_scopes(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_.Get(index);
}
inline ::std::string* NodeConfig::mutable_oauth_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_.Mutable(index);
}
inline void NodeConfig::set_oauth_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.oauth_scopes)
  oauth_scopes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeConfig::set_oauth_scopes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.oauth_scopes)
  oauth_scopes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeConfig::set_oauth_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  oauth_scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.oauth_scopes)
}
inline void NodeConfig::set_oauth_scopes(int index, const char* value, size_t size) {
  oauth_scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.oauth_scopes)
}
inline ::std::string* NodeConfig::add_oauth_scopes() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_.Add();
}
inline void NodeConfig::add_oauth_scopes(const ::std::string& value) {
  oauth_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.oauth_scopes)
}
#if LANG_CXX11
inline void NodeConfig::add_oauth_scopes(::std::string&& value) {
  oauth_scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.oauth_scopes)
}
#endif
inline void NodeConfig::add_oauth_scopes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  oauth_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.NodeConfig.oauth_scopes)
}
inline void NodeConfig::add_oauth_scopes(const char* value, size_t size) {
  oauth_scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.NodeConfig.oauth_scopes)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeConfig::oauth_scopes() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeConfig::mutable_oauth_scopes() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodeConfig.oauth_scopes)
  return &oauth_scopes_;
}

// string service_account = 9;
inline void NodeConfig::clear_service_account() {
  service_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeConfig::service_account() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.service_account)
  return service_account_.GetNoArena();
}
inline void NodeConfig::set_service_account(const ::std::string& value) {
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.service_account)
}
#if LANG_CXX11
inline void NodeConfig::set_service_account(::std::string&& value) {
  
  service_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.service_account)
}
#endif
inline void NodeConfig::set_service_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.service_account)
}
inline void NodeConfig::set_service_account(const char* value, size_t size) {
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.service_account)
}
inline ::std::string* NodeConfig::mutable_service_account() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.service_account)
  return service_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeConfig::release_service_account() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.service_account)
  
  return service_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeConfig::set_allocated_service_account(::std::string* service_account) {
  if (service_account != NULL) {
    
  } else {
    
  }
  service_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_account);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.service_account)
}

// map<string, string> metadata = 4;
inline int NodeConfig::metadata_size() const {
  return metadata_.size();
}
inline void NodeConfig::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
NodeConfig::metadata() const {
  // @@protoc_insertion_point(field_map:google.container.v1.NodeConfig.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
NodeConfig::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.NodeConfig.metadata)
  return metadata_.MutableMap();
}

// string image_type = 5;
inline void NodeConfig::clear_image_type() {
  image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeConfig::image_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.image_type)
  return image_type_.GetNoArena();
}
inline void NodeConfig::set_image_type(const ::std::string& value) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.image_type)
}
#if LANG_CXX11
inline void NodeConfig::set_image_type(::std::string&& value) {
  
  image_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.image_type)
}
#endif
inline void NodeConfig::set_image_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.image_type)
}
inline void NodeConfig::set_image_type(const char* value, size_t size) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.image_type)
}
inline ::std::string* NodeConfig::mutable_image_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.image_type)
  return image_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeConfig::release_image_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.image_type)
  
  return image_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeConfig::set_allocated_image_type(::std::string* image_type) {
  if (image_type != NULL) {
    
  } else {
    
  }
  image_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.image_type)
}

// map<string, string> labels = 6;
inline int NodeConfig::labels_size() const {
  return labels_.size();
}
inline void NodeConfig::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
NodeConfig::labels() const {
  // @@protoc_insertion_point(field_map:google.container.v1.NodeConfig.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
NodeConfig::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.NodeConfig.labels)
  return labels_.MutableMap();
}

// int32 local_ssd_count = 7;
inline void NodeConfig::clear_local_ssd_count() {
  local_ssd_count_ = 0;
}
inline ::google::protobuf::int32 NodeConfig::local_ssd_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.local_ssd_count)
  return local_ssd_count_;
}
inline void NodeConfig::set_local_ssd_count(::google::protobuf::int32 value) {
  
  local_ssd_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.local_ssd_count)
}

// repeated string tags = 8;
inline int NodeConfig::tags_size() const {
  return tags_.size();
}
inline void NodeConfig::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& NodeConfig::tags(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.tags)
  return tags_.Get(index);
}
inline ::std::string* NodeConfig::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.tags)
  return tags_.Mutable(index);
}
inline void NodeConfig::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeConfig::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeConfig::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.tags)
}
inline void NodeConfig::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.tags)
}
inline ::std::string* NodeConfig::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.NodeConfig.tags)
  return tags_.Add();
}
inline void NodeConfig::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.tags)
}
#if LANG_CXX11
inline void NodeConfig::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.tags)
}
#endif
inline void NodeConfig::add_tags(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.NodeConfig.tags)
}
inline void NodeConfig::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.NodeConfig.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodeConfig::tags() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodeConfig.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodeConfig::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodeConfig.tags)
  return &tags_;
}

// bool preemptible = 10;
inline void NodeConfig::clear_preemptible() {
  preemptible_ = false;
}
inline bool NodeConfig::preemptible() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.preemptible)
  return preemptible_;
}
inline void NodeConfig::set_preemptible(bool value) {
  
  preemptible_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.preemptible)
}

// repeated .google.container.v1.AcceleratorConfig accelerators = 11;
inline int NodeConfig::accelerators_size() const {
  return accelerators_.size();
}
inline void NodeConfig::clear_accelerators() {
  accelerators_.Clear();
}
inline const ::google::container::v1::AcceleratorConfig& NodeConfig::accelerators(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.accelerators)
  return accelerators_.Get(index);
}
inline ::google::container::v1::AcceleratorConfig* NodeConfig::mutable_accelerators(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.accelerators)
  return accelerators_.Mutable(index);
}
inline ::google::container::v1::AcceleratorConfig* NodeConfig::add_accelerators() {
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.accelerators)
  return accelerators_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::AcceleratorConfig >*
NodeConfig::mutable_accelerators() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodeConfig.accelerators)
  return &accelerators_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::AcceleratorConfig >&
NodeConfig::accelerators() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodeConfig.accelerators)
  return accelerators_;
}

// string min_cpu_platform = 13;
inline void NodeConfig::clear_min_cpu_platform() {
  min_cpu_platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeConfig::min_cpu_platform() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.min_cpu_platform)
  return min_cpu_platform_.GetNoArena();
}
inline void NodeConfig::set_min_cpu_platform(const ::std::string& value) {
  
  min_cpu_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.min_cpu_platform)
}
#if LANG_CXX11
inline void NodeConfig::set_min_cpu_platform(::std::string&& value) {
  
  min_cpu_platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.min_cpu_platform)
}
#endif
inline void NodeConfig::set_min_cpu_platform(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  min_cpu_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.min_cpu_platform)
}
inline void NodeConfig::set_min_cpu_platform(const char* value, size_t size) {
  
  min_cpu_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.min_cpu_platform)
}
inline ::std::string* NodeConfig::mutable_min_cpu_platform() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.min_cpu_platform)
  return min_cpu_platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeConfig::release_min_cpu_platform() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.min_cpu_platform)
  
  return min_cpu_platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeConfig::set_allocated_min_cpu_platform(::std::string* min_cpu_platform) {
  if (min_cpu_platform != NULL) {
    
  } else {
    
  }
  min_cpu_platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), min_cpu_platform);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.min_cpu_platform)
}

// -------------------------------------------------------------------

// MasterAuth

// string username = 1;
inline void MasterAuth::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::username() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.username)
  return username_.GetNoArena();
}
inline void MasterAuth::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.username)
}
#if LANG_CXX11
inline void MasterAuth::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.username)
}
#endif
inline void MasterAuth::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.username)
}
inline void MasterAuth::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.username)
}
inline ::std::string* MasterAuth::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_username() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.username)
}

// string password = 2;
inline void MasterAuth::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::password() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.password)
  return password_.GetNoArena();
}
inline void MasterAuth::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.password)
}
#if LANG_CXX11
inline void MasterAuth::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.password)
}
#endif
inline void MasterAuth::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.password)
}
inline void MasterAuth::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.password)
}
inline ::std::string* MasterAuth::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_password() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.password)
}

// .google.container.v1.ClientCertificateConfig client_certificate_config = 3;
inline bool MasterAuth::has_client_certificate_config() const {
  return this != internal_default_instance() && client_certificate_config_ != NULL;
}
inline void MasterAuth::clear_client_certificate_config() {
  if (GetArenaNoVirtual() == NULL && client_certificate_config_ != NULL) {
    delete client_certificate_config_;
  }
  client_certificate_config_ = NULL;
}
inline const ::google::container::v1::ClientCertificateConfig& MasterAuth::client_certificate_config() const {
  const ::google::container::v1::ClientCertificateConfig* p = client_certificate_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.client_certificate_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::ClientCertificateConfig*>(
      &::google::container::v1::_ClientCertificateConfig_default_instance_);
}
inline ::google::container::v1::ClientCertificateConfig* MasterAuth::release_client_certificate_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.client_certificate_config)
  
  ::google::container::v1::ClientCertificateConfig* temp = client_certificate_config_;
  client_certificate_config_ = NULL;
  return temp;
}
inline ::google::container::v1::ClientCertificateConfig* MasterAuth::mutable_client_certificate_config() {
  
  if (client_certificate_config_ == NULL) {
    client_certificate_config_ = new ::google::container::v1::ClientCertificateConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.client_certificate_config)
  return client_certificate_config_;
}
inline void MasterAuth::set_allocated_client_certificate_config(::google::container::v1::ClientCertificateConfig* client_certificate_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete client_certificate_config_;
  }
  if (client_certificate_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_certificate_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_certificate_config, submessage_arena);
    }
    
  } else {
    
  }
  client_certificate_config_ = client_certificate_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.client_certificate_config)
}

// string cluster_ca_certificate = 100;
inline void MasterAuth::clear_cluster_ca_certificate() {
  cluster_ca_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::cluster_ca_certificate() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.cluster_ca_certificate)
  return cluster_ca_certificate_.GetNoArena();
}
inline void MasterAuth::set_cluster_ca_certificate(const ::std::string& value) {
  
  cluster_ca_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.cluster_ca_certificate)
}
#if LANG_CXX11
inline void MasterAuth::set_cluster_ca_certificate(::std::string&& value) {
  
  cluster_ca_certificate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.cluster_ca_certificate)
}
#endif
inline void MasterAuth::set_cluster_ca_certificate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_ca_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.cluster_ca_certificate)
}
inline void MasterAuth::set_cluster_ca_certificate(const char* value, size_t size) {
  
  cluster_ca_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.cluster_ca_certificate)
}
inline ::std::string* MasterAuth::mutable_cluster_ca_certificate() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.cluster_ca_certificate)
  return cluster_ca_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_cluster_ca_certificate() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.cluster_ca_certificate)
  
  return cluster_ca_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_cluster_ca_certificate(::std::string* cluster_ca_certificate) {
  if (cluster_ca_certificate != NULL) {
    
  } else {
    
  }
  cluster_ca_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ca_certificate);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.cluster_ca_certificate)
}

// string client_certificate = 101;
inline void MasterAuth::clear_client_certificate() {
  client_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::client_certificate() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.client_certificate)
  return client_certificate_.GetNoArena();
}
inline void MasterAuth::set_client_certificate(const ::std::string& value) {
  
  client_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.client_certificate)
}
#if LANG_CXX11
inline void MasterAuth::set_client_certificate(::std::string&& value) {
  
  client_certificate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.client_certificate)
}
#endif
inline void MasterAuth::set_client_certificate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.client_certificate)
}
inline void MasterAuth::set_client_certificate(const char* value, size_t size) {
  
  client_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.client_certificate)
}
inline ::std::string* MasterAuth::mutable_client_certificate() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.client_certificate)
  return client_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_client_certificate() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.client_certificate)
  
  return client_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_client_certificate(::std::string* client_certificate) {
  if (client_certificate != NULL) {
    
  } else {
    
  }
  client_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_certificate);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.client_certificate)
}

// string client_key = 102;
inline void MasterAuth::clear_client_key() {
  client_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::client_key() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.client_key)
  return client_key_.GetNoArena();
}
inline void MasterAuth::set_client_key(const ::std::string& value) {
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.client_key)
}
#if LANG_CXX11
inline void MasterAuth::set_client_key(::std::string&& value) {
  
  client_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.client_key)
}
#endif
inline void MasterAuth::set_client_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.client_key)
}
inline void MasterAuth::set_client_key(const char* value, size_t size) {
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.client_key)
}
inline ::std::string* MasterAuth::mutable_client_key() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.client_key)
  return client_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_client_key() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.client_key)
  
  return client_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_client_key(::std::string* client_key) {
  if (client_key != NULL) {
    
  } else {
    
  }
  client_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_key);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.client_key)
}

// -------------------------------------------------------------------

// ClientCertificateConfig

// bool issue_client_certificate = 1;
inline void ClientCertificateConfig::clear_issue_client_certificate() {
  issue_client_certificate_ = false;
}
inline bool ClientCertificateConfig::issue_client_certificate() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClientCertificateConfig.issue_client_certificate)
  return issue_client_certificate_;
}
inline void ClientCertificateConfig::set_issue_client_certificate(bool value) {
  
  issue_client_certificate_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ClientCertificateConfig.issue_client_certificate)
}

// -------------------------------------------------------------------

// AddonsConfig

// .google.container.v1.HttpLoadBalancing http_load_balancing = 1;
inline bool AddonsConfig::has_http_load_balancing() const {
  return this != internal_default_instance() && http_load_balancing_ != NULL;
}
inline void AddonsConfig::clear_http_load_balancing() {
  if (GetArenaNoVirtual() == NULL && http_load_balancing_ != NULL) {
    delete http_load_balancing_;
  }
  http_load_balancing_ = NULL;
}
inline const ::google::container::v1::HttpLoadBalancing& AddonsConfig::http_load_balancing() const {
  const ::google::container::v1::HttpLoadBalancing* p = http_load_balancing_;
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.http_load_balancing)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::HttpLoadBalancing*>(
      &::google::container::v1::_HttpLoadBalancing_default_instance_);
}
inline ::google::container::v1::HttpLoadBalancing* AddonsConfig::release_http_load_balancing() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.http_load_balancing)
  
  ::google::container::v1::HttpLoadBalancing* temp = http_load_balancing_;
  http_load_balancing_ = NULL;
  return temp;
}
inline ::google::container::v1::HttpLoadBalancing* AddonsConfig::mutable_http_load_balancing() {
  
  if (http_load_balancing_ == NULL) {
    http_load_balancing_ = new ::google::container::v1::HttpLoadBalancing;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.http_load_balancing)
  return http_load_balancing_;
}
inline void AddonsConfig::set_allocated_http_load_balancing(::google::container::v1::HttpLoadBalancing* http_load_balancing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete http_load_balancing_;
  }
  if (http_load_balancing) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      http_load_balancing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, http_load_balancing, submessage_arena);
    }
    
  } else {
    
  }
  http_load_balancing_ = http_load_balancing;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.http_load_balancing)
}

// .google.container.v1.HorizontalPodAutoscaling horizontal_pod_autoscaling = 2;
inline bool AddonsConfig::has_horizontal_pod_autoscaling() const {
  return this != internal_default_instance() && horizontal_pod_autoscaling_ != NULL;
}
inline void AddonsConfig::clear_horizontal_pod_autoscaling() {
  if (GetArenaNoVirtual() == NULL && horizontal_pod_autoscaling_ != NULL) {
    delete horizontal_pod_autoscaling_;
  }
  horizontal_pod_autoscaling_ = NULL;
}
inline const ::google::container::v1::HorizontalPodAutoscaling& AddonsConfig::horizontal_pod_autoscaling() const {
  const ::google::container::v1::HorizontalPodAutoscaling* p = horizontal_pod_autoscaling_;
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::HorizontalPodAutoscaling*>(
      &::google::container::v1::_HorizontalPodAutoscaling_default_instance_);
}
inline ::google::container::v1::HorizontalPodAutoscaling* AddonsConfig::release_horizontal_pod_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
  
  ::google::container::v1::HorizontalPodAutoscaling* temp = horizontal_pod_autoscaling_;
  horizontal_pod_autoscaling_ = NULL;
  return temp;
}
inline ::google::container::v1::HorizontalPodAutoscaling* AddonsConfig::mutable_horizontal_pod_autoscaling() {
  
  if (horizontal_pod_autoscaling_ == NULL) {
    horizontal_pod_autoscaling_ = new ::google::container::v1::HorizontalPodAutoscaling;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
  return horizontal_pod_autoscaling_;
}
inline void AddonsConfig::set_allocated_horizontal_pod_autoscaling(::google::container::v1::HorizontalPodAutoscaling* horizontal_pod_autoscaling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete horizontal_pod_autoscaling_;
  }
  if (horizontal_pod_autoscaling) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      horizontal_pod_autoscaling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, horizontal_pod_autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  horizontal_pod_autoscaling_ = horizontal_pod_autoscaling;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
}

// .google.container.v1.KubernetesDashboard kubernetes_dashboard = 3;
inline bool AddonsConfig::has_kubernetes_dashboard() const {
  return this != internal_default_instance() && kubernetes_dashboard_ != NULL;
}
inline void AddonsConfig::clear_kubernetes_dashboard() {
  if (GetArenaNoVirtual() == NULL && kubernetes_dashboard_ != NULL) {
    delete kubernetes_dashboard_;
  }
  kubernetes_dashboard_ = NULL;
}
inline const ::google::container::v1::KubernetesDashboard& AddonsConfig::kubernetes_dashboard() const {
  const ::google::container::v1::KubernetesDashboard* p = kubernetes_dashboard_;
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.kubernetes_dashboard)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::KubernetesDashboard*>(
      &::google::container::v1::_KubernetesDashboard_default_instance_);
}
inline ::google::container::v1::KubernetesDashboard* AddonsConfig::release_kubernetes_dashboard() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.kubernetes_dashboard)
  
  ::google::container::v1::KubernetesDashboard* temp = kubernetes_dashboard_;
  kubernetes_dashboard_ = NULL;
  return temp;
}
inline ::google::container::v1::KubernetesDashboard* AddonsConfig::mutable_kubernetes_dashboard() {
  
  if (kubernetes_dashboard_ == NULL) {
    kubernetes_dashboard_ = new ::google::container::v1::KubernetesDashboard;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.kubernetes_dashboard)
  return kubernetes_dashboard_;
}
inline void AddonsConfig::set_allocated_kubernetes_dashboard(::google::container::v1::KubernetesDashboard* kubernetes_dashboard) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete kubernetes_dashboard_;
  }
  if (kubernetes_dashboard) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      kubernetes_dashboard = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kubernetes_dashboard, submessage_arena);
    }
    
  } else {
    
  }
  kubernetes_dashboard_ = kubernetes_dashboard;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.kubernetes_dashboard)
}

// .google.container.v1.NetworkPolicyConfig network_policy_config = 4;
inline bool AddonsConfig::has_network_policy_config() const {
  return this != internal_default_instance() && network_policy_config_ != NULL;
}
inline void AddonsConfig::clear_network_policy_config() {
  if (GetArenaNoVirtual() == NULL && network_policy_config_ != NULL) {
    delete network_policy_config_;
  }
  network_policy_config_ = NULL;
}
inline const ::google::container::v1::NetworkPolicyConfig& AddonsConfig::network_policy_config() const {
  const ::google::container::v1::NetworkPolicyConfig* p = network_policy_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.network_policy_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::NetworkPolicyConfig*>(
      &::google::container::v1::_NetworkPolicyConfig_default_instance_);
}
inline ::google::container::v1::NetworkPolicyConfig* AddonsConfig::release_network_policy_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.network_policy_config)
  
  ::google::container::v1::NetworkPolicyConfig* temp = network_policy_config_;
  network_policy_config_ = NULL;
  return temp;
}
inline ::google::container::v1::NetworkPolicyConfig* AddonsConfig::mutable_network_policy_config() {
  
  if (network_policy_config_ == NULL) {
    network_policy_config_ = new ::google::container::v1::NetworkPolicyConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.network_policy_config)
  return network_policy_config_;
}
inline void AddonsConfig::set_allocated_network_policy_config(::google::container::v1::NetworkPolicyConfig* network_policy_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete network_policy_config_;
  }
  if (network_policy_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      network_policy_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, network_policy_config, submessage_arena);
    }
    
  } else {
    
  }
  network_policy_config_ = network_policy_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.network_policy_config)
}

// -------------------------------------------------------------------

// HttpLoadBalancing

// bool disabled = 1;
inline void HttpLoadBalancing::clear_disabled() {
  disabled_ = false;
}
inline bool HttpLoadBalancing::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.HttpLoadBalancing.disabled)
  return disabled_;
}
inline void HttpLoadBalancing::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.HttpLoadBalancing.disabled)
}

// -------------------------------------------------------------------

// HorizontalPodAutoscaling

// bool disabled = 1;
inline void HorizontalPodAutoscaling::clear_disabled() {
  disabled_ = false;
}
inline bool HorizontalPodAutoscaling::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.HorizontalPodAutoscaling.disabled)
  return disabled_;
}
inline void HorizontalPodAutoscaling::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.HorizontalPodAutoscaling.disabled)
}

// -------------------------------------------------------------------

// KubernetesDashboard

// bool disabled = 1;
inline void KubernetesDashboard::clear_disabled() {
  disabled_ = false;
}
inline bool KubernetesDashboard::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.KubernetesDashboard.disabled)
  return disabled_;
}
inline void KubernetesDashboard::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.KubernetesDashboard.disabled)
}

// -------------------------------------------------------------------

// NetworkPolicyConfig

// bool disabled = 1;
inline void NetworkPolicyConfig::clear_disabled() {
  disabled_ = false;
}
inline bool NetworkPolicyConfig::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NetworkPolicyConfig.disabled)
  return disabled_;
}
inline void NetworkPolicyConfig::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NetworkPolicyConfig.disabled)
}

// -------------------------------------------------------------------

// MasterAuthorizedNetworksConfig_CidrBlock

// string display_name = 1;
inline void MasterAuthorizedNetworksConfig_CidrBlock::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuthorizedNetworksConfig_CidrBlock::display_name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
  return display_name_.GetNoArena();
}
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}
#if LANG_CXX11
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}
#endif
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}
inline ::std::string* MasterAuthorizedNetworksConfig_CidrBlock::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuthorizedNetworksConfig_CidrBlock::release_display_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_allocated_display_name(::std::string* display_name) {
  if (display_name != NULL) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}

// string cidr_block = 2;
inline void MasterAuthorizedNetworksConfig_CidrBlock::clear_cidr_block() {
  cidr_block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuthorizedNetworksConfig_CidrBlock::cidr_block() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
  return cidr_block_.GetNoArena();
}
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_cidr_block(const ::std::string& value) {
  
  cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}
#if LANG_CXX11
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_cidr_block(::std::string&& value) {
  
  cidr_block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}
#endif
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_cidr_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_cidr_block(const char* value, size_t size) {
  
  cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}
inline ::std::string* MasterAuthorizedNetworksConfig_CidrBlock::mutable_cidr_block() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
  return cidr_block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuthorizedNetworksConfig_CidrBlock::release_cidr_block() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
  
  return cidr_block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_allocated_cidr_block(::std::string* cidr_block) {
  if (cidr_block != NULL) {
    
  } else {
    
  }
  cidr_block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cidr_block);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}

// -------------------------------------------------------------------

// MasterAuthorizedNetworksConfig

// bool enabled = 1;
inline void MasterAuthorizedNetworksConfig::clear_enabled() {
  enabled_ = false;
}
inline bool MasterAuthorizedNetworksConfig::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuthorizedNetworksConfig.enabled)
  return enabled_;
}
inline void MasterAuthorizedNetworksConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuthorizedNetworksConfig.enabled)
}

// repeated .google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock cidr_blocks = 2;
inline int MasterAuthorizedNetworksConfig::cidr_blocks_size() const {
  return cidr_blocks_.size();
}
inline void MasterAuthorizedNetworksConfig::clear_cidr_blocks() {
  cidr_blocks_.Clear();
}
inline const ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock& MasterAuthorizedNetworksConfig::cidr_blocks(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return cidr_blocks_.Get(index);
}
inline ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock* MasterAuthorizedNetworksConfig::mutable_cidr_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return cidr_blocks_.Mutable(index);
}
inline ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock* MasterAuthorizedNetworksConfig::add_cidr_blocks() {
  // @@protoc_insertion_point(field_add:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return cidr_blocks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock >*
MasterAuthorizedNetworksConfig::mutable_cidr_blocks() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return &cidr_blocks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock >&
MasterAuthorizedNetworksConfig::cidr_blocks() const {
  // @@protoc_insertion_point(field_list:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return cidr_blocks_;
}

// -------------------------------------------------------------------

// LegacyAbac

// bool enabled = 1;
inline void LegacyAbac::clear_enabled() {
  enabled_ = false;
}
inline bool LegacyAbac::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.LegacyAbac.enabled)
  return enabled_;
}
inline void LegacyAbac::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.LegacyAbac.enabled)
}

// -------------------------------------------------------------------

// NetworkPolicy

// .google.container.v1.NetworkPolicy.Provider provider = 1;
inline void NetworkPolicy::clear_provider() {
  provider_ = 0;
}
inline ::google::container::v1::NetworkPolicy_Provider NetworkPolicy::provider() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NetworkPolicy.provider)
  return static_cast< ::google::container::v1::NetworkPolicy_Provider >(provider_);
}
inline void NetworkPolicy::set_provider(::google::container::v1::NetworkPolicy_Provider value) {
  
  provider_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NetworkPolicy.provider)
}

// bool enabled = 2;
inline void NetworkPolicy::clear_enabled() {
  enabled_ = false;
}
inline bool NetworkPolicy::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NetworkPolicy.enabled)
  return enabled_;
}
inline void NetworkPolicy::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NetworkPolicy.enabled)
}

// -------------------------------------------------------------------

// IPAllocationPolicy

// bool use_ip_aliases = 1;
inline void IPAllocationPolicy::clear_use_ip_aliases() {
  use_ip_aliases_ = false;
}
inline bool IPAllocationPolicy::use_ip_aliases() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.use_ip_aliases)
  return use_ip_aliases_;
}
inline void IPAllocationPolicy::set_use_ip_aliases(bool value) {
  
  use_ip_aliases_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.use_ip_aliases)
}

// bool create_subnetwork = 2;
inline void IPAllocationPolicy::clear_create_subnetwork() {
  create_subnetwork_ = false;
}
inline bool IPAllocationPolicy::create_subnetwork() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.create_subnetwork)
  return create_subnetwork_;
}
inline void IPAllocationPolicy::set_create_subnetwork(bool value) {
  
  create_subnetwork_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.create_subnetwork)
}

// string subnetwork_name = 3;
inline void IPAllocationPolicy::clear_subnetwork_name() {
  subnetwork_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::subnetwork_name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.subnetwork_name)
  return subnetwork_name_.GetNoArena();
}
inline void IPAllocationPolicy::set_subnetwork_name(const ::std::string& value) {
  
  subnetwork_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.subnetwork_name)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_subnetwork_name(::std::string&& value) {
  
  subnetwork_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.subnetwork_name)
}
#endif
inline void IPAllocationPolicy::set_subnetwork_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subnetwork_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.subnetwork_name)
}
inline void IPAllocationPolicy::set_subnetwork_name(const char* value, size_t size) {
  
  subnetwork_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.subnetwork_name)
}
inline ::std::string* IPAllocationPolicy::mutable_subnetwork_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.subnetwork_name)
  return subnetwork_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_subnetwork_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.subnetwork_name)
  
  return subnetwork_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_subnetwork_name(::std::string* subnetwork_name) {
  if (subnetwork_name != NULL) {
    
  } else {
    
  }
  subnetwork_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetwork_name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.subnetwork_name)
}

// string cluster_ipv4_cidr = 4;
inline void IPAllocationPolicy::clear_cluster_ipv4_cidr() {
  cluster_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::cluster_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.GetNoArena();
}
inline void IPAllocationPolicy::set_cluster_ipv4_cidr(const ::std::string& value) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_cluster_ipv4_cidr(::std::string&& value) {
  
  cluster_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}
#endif
inline void IPAllocationPolicy::set_cluster_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}
inline void IPAllocationPolicy::set_cluster_ipv4_cidr(const char* value, size_t size) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}
inline ::std::string* IPAllocationPolicy::mutable_cluster_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_cluster_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
  
  return cluster_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_cluster_ipv4_cidr(::std::string* cluster_ipv4_cidr) {
  if (cluster_ipv4_cidr != NULL) {
    
  } else {
    
  }
  cluster_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}

// string node_ipv4_cidr = 5;
inline void IPAllocationPolicy::clear_node_ipv4_cidr() {
  node_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::node_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
  return node_ipv4_cidr_.GetNoArena();
}
inline void IPAllocationPolicy::set_node_ipv4_cidr(const ::std::string& value) {
  
  node_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_node_ipv4_cidr(::std::string&& value) {
  
  node_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}
#endif
inline void IPAllocationPolicy::set_node_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}
inline void IPAllocationPolicy::set_node_ipv4_cidr(const char* value, size_t size) {
  
  node_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}
inline ::std::string* IPAllocationPolicy::mutable_node_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
  return node_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_node_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
  
  return node_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_node_ipv4_cidr(::std::string* node_ipv4_cidr) {
  if (node_ipv4_cidr != NULL) {
    
  } else {
    
  }
  node_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}

// string services_ipv4_cidr = 6;
inline void IPAllocationPolicy::clear_services_ipv4_cidr() {
  services_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::services_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
  return services_ipv4_cidr_.GetNoArena();
}
inline void IPAllocationPolicy::set_services_ipv4_cidr(const ::std::string& value) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_services_ipv4_cidr(::std::string&& value) {
  
  services_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}
#endif
inline void IPAllocationPolicy::set_services_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}
inline void IPAllocationPolicy::set_services_ipv4_cidr(const char* value, size_t size) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}
inline ::std::string* IPAllocationPolicy::mutable_services_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
  return services_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_services_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
  
  return services_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_services_ipv4_cidr(::std::string* services_ipv4_cidr) {
  if (services_ipv4_cidr != NULL) {
    
  } else {
    
  }
  services_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), services_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}

// string cluster_secondary_range_name = 7;
inline void IPAllocationPolicy::clear_cluster_secondary_range_name() {
  cluster_secondary_range_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::cluster_secondary_range_name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
  return cluster_secondary_range_name_.GetNoArena();
}
inline void IPAllocationPolicy::set_cluster_secondary_range_name(const ::std::string& value) {
  
  cluster_secondary_range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_cluster_secondary_range_name(::std::string&& value) {
  
  cluster_secondary_range_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
}
#endif
inline void IPAllocationPolicy::set_cluster_secondary_range_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_secondary_range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
}
inline void IPAllocationPolicy::set_cluster_secondary_range_name(const char* value, size_t size) {
  
  cluster_secondary_range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
}
inline ::std::string* IPAllocationPolicy::mutable_cluster_secondary_range_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
  return cluster_secondary_range_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_cluster_secondary_range_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
  
  return cluster_secondary_range_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_cluster_secondary_range_name(::std::string* cluster_secondary_range_name) {
  if (cluster_secondary_range_name != NULL) {
    
  } else {
    
  }
  cluster_secondary_range_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_secondary_range_name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
}

// string services_secondary_range_name = 8;
inline void IPAllocationPolicy::clear_services_secondary_range_name() {
  services_secondary_range_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::services_secondary_range_name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
  return services_secondary_range_name_.GetNoArena();
}
inline void IPAllocationPolicy::set_services_secondary_range_name(const ::std::string& value) {
  
  services_secondary_range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_services_secondary_range_name(::std::string&& value) {
  
  services_secondary_range_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
}
#endif
inline void IPAllocationPolicy::set_services_secondary_range_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  services_secondary_range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
}
inline void IPAllocationPolicy::set_services_secondary_range_name(const char* value, size_t size) {
  
  services_secondary_range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
}
inline ::std::string* IPAllocationPolicy::mutable_services_secondary_range_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
  return services_secondary_range_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_services_secondary_range_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
  
  return services_secondary_range_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_services_secondary_range_name(::std::string* services_secondary_range_name) {
  if (services_secondary_range_name != NULL) {
    
  } else {
    
  }
  services_secondary_range_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), services_secondary_range_name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
}

// string cluster_ipv4_cidr_block = 9;
inline void IPAllocationPolicy::clear_cluster_ipv4_cidr_block() {
  cluster_ipv4_cidr_block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::cluster_ipv4_cidr_block() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
  return cluster_ipv4_cidr_block_.GetNoArena();
}
inline void IPAllocationPolicy::set_cluster_ipv4_cidr_block(const ::std::string& value) {
  
  cluster_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_cluster_ipv4_cidr_block(::std::string&& value) {
  
  cluster_ipv4_cidr_block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
}
#endif
inline void IPAllocationPolicy::set_cluster_ipv4_cidr_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
}
inline void IPAllocationPolicy::set_cluster_ipv4_cidr_block(const char* value, size_t size) {
  
  cluster_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
}
inline ::std::string* IPAllocationPolicy::mutable_cluster_ipv4_cidr_block() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
  return cluster_ipv4_cidr_block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_cluster_ipv4_cidr_block() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
  
  return cluster_ipv4_cidr_block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_cluster_ipv4_cidr_block(::std::string* cluster_ipv4_cidr_block) {
  if (cluster_ipv4_cidr_block != NULL) {
    
  } else {
    
  }
  cluster_ipv4_cidr_block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ipv4_cidr_block);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
}

// string node_ipv4_cidr_block = 10;
inline void IPAllocationPolicy::clear_node_ipv4_cidr_block() {
  node_ipv4_cidr_block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::node_ipv4_cidr_block() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
  return node_ipv4_cidr_block_.GetNoArena();
}
inline void IPAllocationPolicy::set_node_ipv4_cidr_block(const ::std::string& value) {
  
  node_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_node_ipv4_cidr_block(::std::string&& value) {
  
  node_ipv4_cidr_block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
}
#endif
inline void IPAllocationPolicy::set_node_ipv4_cidr_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
}
inline void IPAllocationPolicy::set_node_ipv4_cidr_block(const char* value, size_t size) {
  
  node_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
}
inline ::std::string* IPAllocationPolicy::mutable_node_ipv4_cidr_block() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
  return node_ipv4_cidr_block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_node_ipv4_cidr_block() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
  
  return node_ipv4_cidr_block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_node_ipv4_cidr_block(::std::string* node_ipv4_cidr_block) {
  if (node_ipv4_cidr_block != NULL) {
    
  } else {
    
  }
  node_ipv4_cidr_block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_ipv4_cidr_block);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
}

// string services_ipv4_cidr_block = 11;
inline void IPAllocationPolicy::clear_services_ipv4_cidr_block() {
  services_ipv4_cidr_block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::services_ipv4_cidr_block() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
  return services_ipv4_cidr_block_.GetNoArena();
}
inline void IPAllocationPolicy::set_services_ipv4_cidr_block(const ::std::string& value) {
  
  services_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_services_ipv4_cidr_block(::std::string&& value) {
  
  services_ipv4_cidr_block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
}
#endif
inline void IPAllocationPolicy::set_services_ipv4_cidr_block(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  services_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
}
inline void IPAllocationPolicy::set_services_ipv4_cidr_block(const char* value, size_t size) {
  
  services_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
}
inline ::std::string* IPAllocationPolicy::mutable_services_ipv4_cidr_block() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
  return services_ipv4_cidr_block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_services_ipv4_cidr_block() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
  
  return services_ipv4_cidr_block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_services_ipv4_cidr_block(::std::string* services_ipv4_cidr_block) {
  if (services_ipv4_cidr_block != NULL) {
    
  } else {
    
  }
  services_ipv4_cidr_block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), services_ipv4_cidr_block);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Cluster

// string name = 1;
inline void Cluster::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.name)
  return name_.GetNoArena();
}
inline void Cluster::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.name)
}
#if LANG_CXX11
inline void Cluster::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.name)
}
#endif
inline void Cluster::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.name)
}
inline void Cluster::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.name)
}
inline ::std::string* Cluster::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.name)
}

// string description = 2;
inline void Cluster::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::description() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.description)
  return description_.GetNoArena();
}
inline void Cluster::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.description)
}
#if LANG_CXX11
inline void Cluster::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.description)
}
#endif
inline void Cluster::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.description)
}
inline void Cluster::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.description)
}
inline ::std::string* Cluster::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_description() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.description)
}

// int32 initial_node_count = 3;
inline void Cluster::clear_initial_node_count() {
  initial_node_count_ = 0;
}
inline ::google::protobuf::int32 Cluster::initial_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.initial_node_count)
  return initial_node_count_;
}
inline void Cluster::set_initial_node_count(::google::protobuf::int32 value) {
  
  initial_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.initial_node_count)
}

// .google.container.v1.NodeConfig node_config = 4;
inline bool Cluster::has_node_config() const {
  return this != internal_default_instance() && node_config_ != NULL;
}
inline void Cluster::clear_node_config() {
  if (GetArenaNoVirtual() == NULL && node_config_ != NULL) {
    delete node_config_;
  }
  node_config_ = NULL;
}
inline const ::google::container::v1::NodeConfig& Cluster::node_config() const {
  const ::google::container::v1::NodeConfig* p = node_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.node_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::NodeConfig*>(
      &::google::container::v1::_NodeConfig_default_instance_);
}
inline ::google::container::v1::NodeConfig* Cluster::release_node_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.node_config)
  
  ::google::container::v1::NodeConfig* temp = node_config_;
  node_config_ = NULL;
  return temp;
}
inline ::google::container::v1::NodeConfig* Cluster::mutable_node_config() {
  
  if (node_config_ == NULL) {
    node_config_ = new ::google::container::v1::NodeConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.node_config)
  return node_config_;
}
inline void Cluster::set_allocated_node_config(::google::container::v1::NodeConfig* node_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete node_config_;
  }
  if (node_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      node_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node_config, submessage_arena);
    }
    
  } else {
    
  }
  node_config_ = node_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.node_config)
}

// .google.container.v1.MasterAuth master_auth = 5;
inline bool Cluster::has_master_auth() const {
  return this != internal_default_instance() && master_auth_ != NULL;
}
inline void Cluster::clear_master_auth() {
  if (GetArenaNoVirtual() == NULL && master_auth_ != NULL) {
    delete master_auth_;
  }
  master_auth_ = NULL;
}
inline const ::google::container::v1::MasterAuth& Cluster::master_auth() const {
  const ::google::container::v1::MasterAuth* p = master_auth_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.master_auth)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::MasterAuth*>(
      &::google::container::v1::_MasterAuth_default_instance_);
}
inline ::google::container::v1::MasterAuth* Cluster::release_master_auth() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.master_auth)
  
  ::google::container::v1::MasterAuth* temp = master_auth_;
  master_auth_ = NULL;
  return temp;
}
inline ::google::container::v1::MasterAuth* Cluster::mutable_master_auth() {
  
  if (master_auth_ == NULL) {
    master_auth_ = new ::google::container::v1::MasterAuth;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.master_auth)
  return master_auth_;
}
inline void Cluster::set_allocated_master_auth(::google::container::v1::MasterAuth* master_auth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete master_auth_;
  }
  if (master_auth) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      master_auth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, master_auth, submessage_arena);
    }
    
  } else {
    
  }
  master_auth_ = master_auth;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.master_auth)
}

// string logging_service = 6;
inline void Cluster::clear_logging_service() {
  logging_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::logging_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.logging_service)
  return logging_service_.GetNoArena();
}
inline void Cluster::set_logging_service(const ::std::string& value) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.logging_service)
}
#if LANG_CXX11
inline void Cluster::set_logging_service(::std::string&& value) {
  
  logging_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.logging_service)
}
#endif
inline void Cluster::set_logging_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.logging_service)
}
inline void Cluster::set_logging_service(const char* value, size_t size) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.logging_service)
}
inline ::std::string* Cluster::mutable_logging_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.logging_service)
  return logging_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_logging_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.logging_service)
  
  return logging_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_logging_service(::std::string* logging_service) {
  if (logging_service != NULL) {
    
  } else {
    
  }
  logging_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logging_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.logging_service)
}

// string monitoring_service = 7;
inline void Cluster::clear_monitoring_service() {
  monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::monitoring_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.monitoring_service)
  return monitoring_service_.GetNoArena();
}
inline void Cluster::set_monitoring_service(const ::std::string& value) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.monitoring_service)
}
#if LANG_CXX11
inline void Cluster::set_monitoring_service(::std::string&& value) {
  
  monitoring_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.monitoring_service)
}
#endif
inline void Cluster::set_monitoring_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.monitoring_service)
}
inline void Cluster::set_monitoring_service(const char* value, size_t size) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.monitoring_service)
}
inline ::std::string* Cluster::mutable_monitoring_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.monitoring_service)
  return monitoring_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_monitoring_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.monitoring_service)
  
  return monitoring_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_monitoring_service(::std::string* monitoring_service) {
  if (monitoring_service != NULL) {
    
  } else {
    
  }
  monitoring_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitoring_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.monitoring_service)
}

// string network = 8;
inline void Cluster::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::network() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.network)
  return network_.GetNoArena();
}
inline void Cluster::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.network)
}
#if LANG_CXX11
inline void Cluster::set_network(::std::string&& value) {
  
  network_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.network)
}
#endif
inline void Cluster::set_network(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.network)
}
inline void Cluster::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.network)
}
inline ::std::string* Cluster::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_network() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_network(::std::string* network) {
  if (network != NULL) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.network)
}

// string cluster_ipv4_cidr = 9;
inline void Cluster::clear_cluster_ipv4_cidr() {
  cluster_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::cluster_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.GetNoArena();
}
inline void Cluster::set_cluster_ipv4_cidr(const ::std::string& value) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.cluster_ipv4_cidr)
}
#if LANG_CXX11
inline void Cluster::set_cluster_ipv4_cidr(::std::string&& value) {
  
  cluster_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.cluster_ipv4_cidr)
}
#endif
inline void Cluster::set_cluster_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.cluster_ipv4_cidr)
}
inline void Cluster::set_cluster_ipv4_cidr(const char* value, size_t size) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.cluster_ipv4_cidr)
}
inline ::std::string* Cluster::mutable_cluster_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_cluster_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.cluster_ipv4_cidr)
  
  return cluster_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_cluster_ipv4_cidr(::std::string* cluster_ipv4_cidr) {
  if (cluster_ipv4_cidr != NULL) {
    
  } else {
    
  }
  cluster_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.cluster_ipv4_cidr)
}

// .google.container.v1.AddonsConfig addons_config = 10;
inline bool Cluster::has_addons_config() const {
  return this != internal_default_instance() && addons_config_ != NULL;
}
inline void Cluster::clear_addons_config() {
  if (GetArenaNoVirtual() == NULL && addons_config_ != NULL) {
    delete addons_config_;
  }
  addons_config_ = NULL;
}
inline const ::google::container::v1::AddonsConfig& Cluster::addons_config() const {
  const ::google::container::v1::AddonsConfig* p = addons_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.addons_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::AddonsConfig*>(
      &::google::container::v1::_AddonsConfig_default_instance_);
}
inline ::google::container::v1::AddonsConfig* Cluster::release_addons_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.addons_config)
  
  ::google::container::v1::AddonsConfig* temp = addons_config_;
  addons_config_ = NULL;
  return temp;
}
inline ::google::container::v1::AddonsConfig* Cluster::mutable_addons_config() {
  
  if (addons_config_ == NULL) {
    addons_config_ = new ::google::container::v1::AddonsConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.addons_config)
  return addons_config_;
}
inline void Cluster::set_allocated_addons_config(::google::container::v1::AddonsConfig* addons_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete addons_config_;
  }
  if (addons_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      addons_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, addons_config, submessage_arena);
    }
    
  } else {
    
  }
  addons_config_ = addons_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.addons_config)
}

// string subnetwork = 11;
inline void Cluster::clear_subnetwork() {
  subnetwork_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::subnetwork() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.subnetwork)
  return subnetwork_.GetNoArena();
}
inline void Cluster::set_subnetwork(const ::std::string& value) {
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.subnetwork)
}
#if LANG_CXX11
inline void Cluster::set_subnetwork(::std::string&& value) {
  
  subnetwork_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.subnetwork)
}
#endif
inline void Cluster::set_subnetwork(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.subnetwork)
}
inline void Cluster::set_subnetwork(const char* value, size_t size) {
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.subnetwork)
}
inline ::std::string* Cluster::mutable_subnetwork() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.subnetwork)
  return subnetwork_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_subnetwork() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.subnetwork)
  
  return subnetwork_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_subnetwork(::std::string* subnetwork) {
  if (subnetwork != NULL) {
    
  } else {
    
  }
  subnetwork_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetwork);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.subnetwork)
}

// repeated .google.container.v1.NodePool node_pools = 12;
inline int Cluster::node_pools_size() const {
  return node_pools_.size();
}
inline void Cluster::clear_node_pools() {
  node_pools_.Clear();
}
inline const ::google::container::v1::NodePool& Cluster::node_pools(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.node_pools)
  return node_pools_.Get(index);
}
inline ::google::container::v1::NodePool* Cluster::mutable_node_pools(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.node_pools)
  return node_pools_.Mutable(index);
}
inline ::google::container::v1::NodePool* Cluster::add_node_pools() {
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.node_pools)
  return node_pools_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >*
Cluster::mutable_node_pools() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.Cluster.node_pools)
  return &node_pools_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >&
Cluster::node_pools() const {
  // @@protoc_insertion_point(field_list:google.container.v1.Cluster.node_pools)
  return node_pools_;
}

// repeated string locations = 13;
inline int Cluster::locations_size() const {
  return locations_.size();
}
inline void Cluster::clear_locations() {
  locations_.Clear();
}
inline const ::std::string& Cluster::locations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.locations)
  return locations_.Get(index);
}
inline ::std::string* Cluster::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.locations)
  return locations_.Mutable(index);
}
inline void Cluster::set_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.locations)
  locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Cluster::set_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.locations)
  locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Cluster::set_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.locations)
}
inline void Cluster::set_locations(int index, const char* value, size_t size) {
  locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.locations)
}
inline ::std::string* Cluster::add_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.Cluster.locations)
  return locations_.Add();
}
inline void Cluster::add_locations(const ::std::string& value) {
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.locations)
}
#if LANG_CXX11
inline void Cluster::add_locations(::std::string&& value) {
  locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.locations)
}
#endif
inline void Cluster::add_locations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.Cluster.locations)
}
inline void Cluster::add_locations(const char* value, size_t size) {
  locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.Cluster.locations)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Cluster::locations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.Cluster.locations)
  return locations_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Cluster::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.Cluster.locations)
  return &locations_;
}

// bool enable_kubernetes_alpha = 14;
inline void Cluster::clear_enable_kubernetes_alpha() {
  enable_kubernetes_alpha_ = false;
}
inline bool Cluster::enable_kubernetes_alpha() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.enable_kubernetes_alpha)
  return enable_kubernetes_alpha_;
}
inline void Cluster::set_enable_kubernetes_alpha(bool value) {
  
  enable_kubernetes_alpha_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.enable_kubernetes_alpha)
}

// map<string, string> resource_labels = 15;
inline int Cluster::resource_labels_size() const {
  return resource_labels_.size();
}
inline void Cluster::clear_resource_labels() {
  resource_labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Cluster::resource_labels() const {
  // @@protoc_insertion_point(field_map:google.container.v1.Cluster.resource_labels)
  return resource_labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Cluster::mutable_resource_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.Cluster.resource_labels)
  return resource_labels_.MutableMap();
}

// string label_fingerprint = 16;
inline void Cluster::clear_label_fingerprint() {
  label_fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::label_fingerprint() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.label_fingerprint)
  return label_fingerprint_.GetNoArena();
}
inline void Cluster::set_label_fingerprint(const ::std::string& value) {
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.label_fingerprint)
}
#if LANG_CXX11
inline void Cluster::set_label_fingerprint(::std::string&& value) {
  
  label_fingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.label_fingerprint)
}
#endif
inline void Cluster::set_label_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.label_fingerprint)
}
inline void Cluster::set_label_fingerprint(const char* value, size_t size) {
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.label_fingerprint)
}
inline ::std::string* Cluster::mutable_label_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.label_fingerprint)
  return label_fingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_label_fingerprint() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.label_fingerprint)
  
  return label_fingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_label_fingerprint(::std::string* label_fingerprint) {
  if (label_fingerprint != NULL) {
    
  } else {
    
  }
  label_fingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_fingerprint);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.label_fingerprint)
}

// .google.container.v1.LegacyAbac legacy_abac = 18;
inline bool Cluster::has_legacy_abac() const {
  return this != internal_default_instance() && legacy_abac_ != NULL;
}
inline void Cluster::clear_legacy_abac() {
  if (GetArenaNoVirtual() == NULL && legacy_abac_ != NULL) {
    delete legacy_abac_;
  }
  legacy_abac_ = NULL;
}
inline const ::google::container::v1::LegacyAbac& Cluster::legacy_abac() const {
  const ::google::container::v1::LegacyAbac* p = legacy_abac_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.legacy_abac)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::LegacyAbac*>(
      &::google::container::v1::_LegacyAbac_default_instance_);
}
inline ::google::container::v1::LegacyAbac* Cluster::release_legacy_abac() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.legacy_abac)
  
  ::google::container::v1::LegacyAbac* temp = legacy_abac_;
  legacy_abac_ = NULL;
  return temp;
}
inline ::google::container::v1::LegacyAbac* Cluster::mutable_legacy_abac() {
  
  if (legacy_abac_ == NULL) {
    legacy_abac_ = new ::google::container::v1::LegacyAbac;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.legacy_abac)
  return legacy_abac_;
}
inline void Cluster::set_allocated_legacy_abac(::google::container::v1::LegacyAbac* legacy_abac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete legacy_abac_;
  }
  if (legacy_abac) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      legacy_abac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, legacy_abac, submessage_arena);
    }
    
  } else {
    
  }
  legacy_abac_ = legacy_abac;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.legacy_abac)
}

// .google.container.v1.NetworkPolicy network_policy = 19;
inline bool Cluster::has_network_policy() const {
  return this != internal_default_instance() && network_policy_ != NULL;
}
inline void Cluster::clear_network_policy() {
  if (GetArenaNoVirtual() == NULL && network_policy_ != NULL) {
    delete network_policy_;
  }
  network_policy_ = NULL;
}
inline const ::google::container::v1::NetworkPolicy& Cluster::network_policy() const {
  const ::google::container::v1::NetworkPolicy* p = network_policy_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.network_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::NetworkPolicy*>(
      &::google::container::v1::_NetworkPolicy_default_instance_);
}
inline ::google::container::v1::NetworkPolicy* Cluster::release_network_policy() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.network_policy)
  
  ::google::container::v1::NetworkPolicy* temp = network_policy_;
  network_policy_ = NULL;
  return temp;
}
inline ::google::container::v1::NetworkPolicy* Cluster::mutable_network_policy() {
  
  if (network_policy_ == NULL) {
    network_policy_ = new ::google::container::v1::NetworkPolicy;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.network_policy)
  return network_policy_;
}
inline void Cluster::set_allocated_network_policy(::google::container::v1::NetworkPolicy* network_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete network_policy_;
  }
  if (network_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      network_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, network_policy, submessage_arena);
    }
    
  } else {
    
  }
  network_policy_ = network_policy;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.network_policy)
}

// .google.container.v1.IPAllocationPolicy ip_allocation_policy = 20;
inline bool Cluster::has_ip_allocation_policy() const {
  return this != internal_default_instance() && ip_allocation_policy_ != NULL;
}
inline void Cluster::clear_ip_allocation_policy() {
  if (GetArenaNoVirtual() == NULL && ip_allocation_policy_ != NULL) {
    delete ip_allocation_policy_;
  }
  ip_allocation_policy_ = NULL;
}
inline const ::google::container::v1::IPAllocationPolicy& Cluster::ip_allocation_policy() const {
  const ::google::container::v1::IPAllocationPolicy* p = ip_allocation_policy_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.ip_allocation_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::IPAllocationPolicy*>(
      &::google::container::v1::_IPAllocationPolicy_default_instance_);
}
inline ::google::container::v1::IPAllocationPolicy* Cluster::release_ip_allocation_policy() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.ip_allocation_policy)
  
  ::google::container::v1::IPAllocationPolicy* temp = ip_allocation_policy_;
  ip_allocation_policy_ = NULL;
  return temp;
}
inline ::google::container::v1::IPAllocationPolicy* Cluster::mutable_ip_allocation_policy() {
  
  if (ip_allocation_policy_ == NULL) {
    ip_allocation_policy_ = new ::google::container::v1::IPAllocationPolicy;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.ip_allocation_policy)
  return ip_allocation_policy_;
}
inline void Cluster::set_allocated_ip_allocation_policy(::google::container::v1::IPAllocationPolicy* ip_allocation_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete ip_allocation_policy_;
  }
  if (ip_allocation_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ip_allocation_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ip_allocation_policy, submessage_arena);
    }
    
  } else {
    
  }
  ip_allocation_policy_ = ip_allocation_policy;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.ip_allocation_policy)
}

// .google.container.v1.MasterAuthorizedNetworksConfig master_authorized_networks_config = 22;
inline bool Cluster::has_master_authorized_networks_config() const {
  return this != internal_default_instance() && master_authorized_networks_config_ != NULL;
}
inline void Cluster::clear_master_authorized_networks_config() {
  if (GetArenaNoVirtual() == NULL && master_authorized_networks_config_ != NULL) {
    delete master_authorized_networks_config_;
  }
  master_authorized_networks_config_ = NULL;
}
inline const ::google::container::v1::MasterAuthorizedNetworksConfig& Cluster::master_authorized_networks_config() const {
  const ::google::container::v1::MasterAuthorizedNetworksConfig* p = master_authorized_networks_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.master_authorized_networks_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::MasterAuthorizedNetworksConfig*>(
      &::google::container::v1::_MasterAuthorizedNetworksConfig_default_instance_);
}
inline ::google::container::v1::MasterAuthorizedNetworksConfig* Cluster::release_master_authorized_networks_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.master_authorized_networks_config)
  
  ::google::container::v1::MasterAuthorizedNetworksConfig* temp = master_authorized_networks_config_;
  master_authorized_networks_config_ = NULL;
  return temp;
}
inline ::google::container::v1::MasterAuthorizedNetworksConfig* Cluster::mutable_master_authorized_networks_config() {
  
  if (master_authorized_networks_config_ == NULL) {
    master_authorized_networks_config_ = new ::google::container::v1::MasterAuthorizedNetworksConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.master_authorized_networks_config)
  return master_authorized_networks_config_;
}
inline void Cluster::set_allocated_master_authorized_networks_config(::google::container::v1::MasterAuthorizedNetworksConfig* master_authorized_networks_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete master_authorized_networks_config_;
  }
  if (master_authorized_networks_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      master_authorized_networks_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, master_authorized_networks_config, submessage_arena);
    }
    
  } else {
    
  }
  master_authorized_networks_config_ = master_authorized_networks_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.master_authorized_networks_config)
}

// .google.container.v1.MaintenancePolicy maintenance_policy = 23;
inline bool Cluster::has_maintenance_policy() const {
  return this != internal_default_instance() && maintenance_policy_ != NULL;
}
inline void Cluster::clear_maintenance_policy() {
  if (GetArenaNoVirtual() == NULL && maintenance_policy_ != NULL) {
    delete maintenance_policy_;
  }
  maintenance_policy_ = NULL;
}
inline const ::google::container::v1::MaintenancePolicy& Cluster::maintenance_policy() const {
  const ::google::container::v1::MaintenancePolicy* p = maintenance_policy_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.maintenance_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::MaintenancePolicy*>(
      &::google::container::v1::_MaintenancePolicy_default_instance_);
}
inline ::google::container::v1::MaintenancePolicy* Cluster::release_maintenance_policy() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.maintenance_policy)
  
  ::google::container::v1::MaintenancePolicy* temp = maintenance_policy_;
  maintenance_policy_ = NULL;
  return temp;
}
inline ::google::container::v1::MaintenancePolicy* Cluster::mutable_maintenance_policy() {
  
  if (maintenance_policy_ == NULL) {
    maintenance_policy_ = new ::google::container::v1::MaintenancePolicy;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.maintenance_policy)
  return maintenance_policy_;
}
inline void Cluster::set_allocated_maintenance_policy(::google::container::v1::MaintenancePolicy* maintenance_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete maintenance_policy_;
  }
  if (maintenance_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      maintenance_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, maintenance_policy, submessage_arena);
    }
    
  } else {
    
  }
  maintenance_policy_ = maintenance_policy;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.maintenance_policy)
}

// string self_link = 100;
inline void Cluster::clear_self_link() {
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::self_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.self_link)
  return self_link_.GetNoArena();
}
inline void Cluster::set_self_link(const ::std::string& value) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.self_link)
}
#if LANG_CXX11
inline void Cluster::set_self_link(::std::string&& value) {
  
  self_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.self_link)
}
#endif
inline void Cluster::set_self_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.self_link)
}
inline void Cluster::set_self_link(const char* value, size_t size) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.self_link)
}
inline ::std::string* Cluster::mutable_self_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.self_link)
  return self_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_self_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.self_link)
  
  return self_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_self_link(::std::string* self_link) {
  if (self_link != NULL) {
    
  } else {
    
  }
  self_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.self_link)
}

// string zone = 101;
inline void Cluster::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.zone)
  return zone_.GetNoArena();
}
inline void Cluster::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.zone)
}
#if LANG_CXX11
inline void Cluster::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.zone)
}
#endif
inline void Cluster::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.zone)
}
inline void Cluster::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.zone)
}
inline ::std::string* Cluster::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.zone)
}

// string endpoint = 102;
inline void Cluster::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::endpoint() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.endpoint)
  return endpoint_.GetNoArena();
}
inline void Cluster::set_endpoint(const ::std::string& value) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.endpoint)
}
#if LANG_CXX11
inline void Cluster::set_endpoint(::std::string&& value) {
  
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.endpoint)
}
#endif
inline void Cluster::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.endpoint)
}
inline void Cluster::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.endpoint)
}
inline ::std::string* Cluster::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_endpoint() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.endpoint)
  
  return endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.endpoint)
}

// string initial_cluster_version = 103;
inline void Cluster::clear_initial_cluster_version() {
  initial_cluster_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::initial_cluster_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.initial_cluster_version)
  return initial_cluster_version_.GetNoArena();
}
inline void Cluster::set_initial_cluster_version(const ::std::string& value) {
  
  initial_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.initial_cluster_version)
}
#if LANG_CXX11
inline void Cluster::set_initial_cluster_version(::std::string&& value) {
  
  initial_cluster_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.initial_cluster_version)
}
#endif
inline void Cluster::set_initial_cluster_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  initial_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.initial_cluster_version)
}
inline void Cluster::set_initial_cluster_version(const char* value, size_t size) {
  
  initial_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.initial_cluster_version)
}
inline ::std::string* Cluster::mutable_initial_cluster_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.initial_cluster_version)
  return initial_cluster_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_initial_cluster_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.initial_cluster_version)
  
  return initial_cluster_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_initial_cluster_version(::std::string* initial_cluster_version) {
  if (initial_cluster_version != NULL) {
    
  } else {
    
  }
  initial_cluster_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initial_cluster_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.initial_cluster_version)
}

// string current_master_version = 104;
inline void Cluster::clear_current_master_version() {
  current_master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::current_master_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.current_master_version)
  return current_master_version_.GetNoArena();
}
inline void Cluster::set_current_master_version(const ::std::string& value) {
  
  current_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.current_master_version)
}
#if LANG_CXX11
inline void Cluster::set_current_master_version(::std::string&& value) {
  
  current_master_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.current_master_version)
}
#endif
inline void Cluster::set_current_master_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  current_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.current_master_version)
}
inline void Cluster::set_current_master_version(const char* value, size_t size) {
  
  current_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.current_master_version)
}
inline ::std::string* Cluster::mutable_current_master_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.current_master_version)
  return current_master_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_current_master_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.current_master_version)
  
  return current_master_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_current_master_version(::std::string* current_master_version) {
  if (current_master_version != NULL) {
    
  } else {
    
  }
  current_master_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_master_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.current_master_version)
}

// string current_node_version = 105;
inline void Cluster::clear_current_node_version() {
  current_node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::current_node_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.current_node_version)
  return current_node_version_.GetNoArena();
}
inline void Cluster::set_current_node_version(const ::std::string& value) {
  
  current_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.current_node_version)
}
#if LANG_CXX11
inline void Cluster::set_current_node_version(::std::string&& value) {
  
  current_node_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.current_node_version)
}
#endif
inline void Cluster::set_current_node_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  current_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.current_node_version)
}
inline void Cluster::set_current_node_version(const char* value, size_t size) {
  
  current_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.current_node_version)
}
inline ::std::string* Cluster::mutable_current_node_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.current_node_version)
  return current_node_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_current_node_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.current_node_version)
  
  return current_node_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_current_node_version(::std::string* current_node_version) {
  if (current_node_version != NULL) {
    
  } else {
    
  }
  current_node_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_node_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.current_node_version)
}

// string create_time = 106;
inline void Cluster::clear_create_time() {
  create_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::create_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.create_time)
  return create_time_.GetNoArena();
}
inline void Cluster::set_create_time(const ::std::string& value) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.create_time)
}
#if LANG_CXX11
inline void Cluster::set_create_time(::std::string&& value) {
  
  create_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.create_time)
}
#endif
inline void Cluster::set_create_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.create_time)
}
inline void Cluster::set_create_time(const char* value, size_t size) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.create_time)
}
inline ::std::string* Cluster::mutable_create_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.create_time)
  return create_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_create_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.create_time)
  
  return create_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_create_time(::std::string* create_time) {
  if (create_time != NULL) {
    
  } else {
    
  }
  create_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.create_time)
}

// .google.container.v1.Cluster.Status status = 107;
inline void Cluster::clear_status() {
  status_ = 0;
}
inline ::google::container::v1::Cluster_Status Cluster::status() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.status)
  return static_cast< ::google::container::v1::Cluster_Status >(status_);
}
inline void Cluster::set_status(::google::container::v1::Cluster_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.status)
}

// string status_message = 108;
inline void Cluster::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::status_message() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.status_message)
  return status_message_.GetNoArena();
}
inline void Cluster::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.status_message)
}
#if LANG_CXX11
inline void Cluster::set_status_message(::std::string&& value) {
  
  status_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.status_message)
}
#endif
inline void Cluster::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.status_message)
}
inline void Cluster::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.status_message)
}
inline ::std::string* Cluster::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_status_message() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_status_message(::std::string* status_message) {
  if (status_message != NULL) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.status_message)
}

// int32 node_ipv4_cidr_size = 109;
inline void Cluster::clear_node_ipv4_cidr_size() {
  node_ipv4_cidr_size_ = 0;
}
inline ::google::protobuf::int32 Cluster::node_ipv4_cidr_size() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.node_ipv4_cidr_size)
  return node_ipv4_cidr_size_;
}
inline void Cluster::set_node_ipv4_cidr_size(::google::protobuf::int32 value) {
  
  node_ipv4_cidr_size_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.node_ipv4_cidr_size)
}

// string services_ipv4_cidr = 110;
inline void Cluster::clear_services_ipv4_cidr() {
  services_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::services_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.services_ipv4_cidr)
  return services_ipv4_cidr_.GetNoArena();
}
inline void Cluster::set_services_ipv4_cidr(const ::std::string& value) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.services_ipv4_cidr)
}
#if LANG_CXX11
inline void Cluster::set_services_ipv4_cidr(::std::string&& value) {
  
  services_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.services_ipv4_cidr)
}
#endif
inline void Cluster::set_services_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.services_ipv4_cidr)
}
inline void Cluster::set_services_ipv4_cidr(const char* value, size_t size) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.services_ipv4_cidr)
}
inline ::std::string* Cluster::mutable_services_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.services_ipv4_cidr)
  return services_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_services_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.services_ipv4_cidr)
  
  return services_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_services_ipv4_cidr(::std::string* services_ipv4_cidr) {
  if (services_ipv4_cidr != NULL) {
    
  } else {
    
  }
  services_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), services_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.services_ipv4_cidr)
}

// repeated string instance_group_urls = 111;
inline int Cluster::instance_group_urls_size() const {
  return instance_group_urls_.size();
}
inline void Cluster::clear_instance_group_urls() {
  instance_group_urls_.Clear();
}
inline const ::std::string& Cluster::instance_group_urls(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_.Get(index);
}
inline ::std::string* Cluster::mutable_instance_group_urls(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_.Mutable(index);
}
inline void Cluster::set_instance_group_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.instance_group_urls)
  instance_group_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Cluster::set_instance_group_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.instance_group_urls)
  instance_group_urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Cluster::set_instance_group_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instance_group_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.instance_group_urls)
}
inline void Cluster::set_instance_group_urls(int index, const char* value, size_t size) {
  instance_group_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.instance_group_urls)
}
inline ::std::string* Cluster::add_instance_group_urls() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_.Add();
}
inline void Cluster::add_instance_group_urls(const ::std::string& value) {
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.instance_group_urls)
}
#if LANG_CXX11
inline void Cluster::add_instance_group_urls(::std::string&& value) {
  instance_group_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.instance_group_urls)
}
#endif
inline void Cluster::add_instance_group_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.Cluster.instance_group_urls)
}
inline void Cluster::add_instance_group_urls(const char* value, size_t size) {
  instance_group_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.Cluster.instance_group_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Cluster::instance_group_urls() const {
  // @@protoc_insertion_point(field_list:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Cluster::mutable_instance_group_urls() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.Cluster.instance_group_urls)
  return &instance_group_urls_;
}

// int32 current_node_count = 112;
inline void Cluster::clear_current_node_count() {
  current_node_count_ = 0;
}
inline ::google::protobuf::int32 Cluster::current_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.current_node_count)
  return current_node_count_;
}
inline void Cluster::set_current_node_count(::google::protobuf::int32 value) {
  
  current_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.current_node_count)
}

// string expire_time = 113;
inline void Cluster::clear_expire_time() {
  expire_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::expire_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.expire_time)
  return expire_time_.GetNoArena();
}
inline void Cluster::set_expire_time(const ::std::string& value) {
  
  expire_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.expire_time)
}
#if LANG_CXX11
inline void Cluster::set_expire_time(::std::string&& value) {
  
  expire_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.expire_time)
}
#endif
inline void Cluster::set_expire_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  expire_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.expire_time)
}
inline void Cluster::set_expire_time(const char* value, size_t size) {
  
  expire_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.expire_time)
}
inline ::std::string* Cluster::mutable_expire_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.expire_time)
  return expire_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_expire_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.expire_time)
  
  return expire_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_expire_time(::std::string* expire_time) {
  if (expire_time != NULL) {
    
  } else {
    
  }
  expire_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expire_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.expire_time)
}

// -------------------------------------------------------------------

// ClusterUpdate

// string desired_node_version = 4;
inline void ClusterUpdate::clear_desired_node_version() {
  desired_node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_node_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_node_version)
  return desired_node_version_.GetNoArena();
}
inline void ClusterUpdate::set_desired_node_version(const ::std::string& value) {
  
  desired_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_node_version)
}
#if LANG_CXX11
inline void ClusterUpdate::set_desired_node_version(::std::string&& value) {
  
  desired_node_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_node_version)
}
#endif
inline void ClusterUpdate::set_desired_node_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desired_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_node_version)
}
inline void ClusterUpdate::set_desired_node_version(const char* value, size_t size) {
  
  desired_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_node_version)
}
inline ::std::string* ClusterUpdate::mutable_desired_node_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_node_version)
  return desired_node_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_node_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_node_version)
  
  return desired_node_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_node_version(::std::string* desired_node_version) {
  if (desired_node_version != NULL) {
    
  } else {
    
  }
  desired_node_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_node_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_node_version)
}

// string desired_monitoring_service = 5;
inline void ClusterUpdate::clear_desired_monitoring_service() {
  desired_monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_monitoring_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_monitoring_service)
  return desired_monitoring_service_.GetNoArena();
}
inline void ClusterUpdate::set_desired_monitoring_service(const ::std::string& value) {
  
  desired_monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
#if LANG_CXX11
inline void ClusterUpdate::set_desired_monitoring_service(::std::string&& value) {
  
  desired_monitoring_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
#endif
inline void ClusterUpdate::set_desired_monitoring_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desired_monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
inline void ClusterUpdate::set_desired_monitoring_service(const char* value, size_t size) {
  
  desired_monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
inline ::std::string* ClusterUpdate::mutable_desired_monitoring_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_monitoring_service)
  return desired_monitoring_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_monitoring_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_monitoring_service)
  
  return desired_monitoring_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_monitoring_service(::std::string* desired_monitoring_service) {
  if (desired_monitoring_service != NULL) {
    
  } else {
    
  }
  desired_monitoring_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_monitoring_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_monitoring_service)
}

// .google.container.v1.AddonsConfig desired_addons_config = 6;
inline bool ClusterUpdate::has_desired_addons_config() const {
  return this != internal_default_instance() && desired_addons_config_ != NULL;
}
inline void ClusterUpdate::clear_desired_addons_config() {
  if (GetArenaNoVirtual() == NULL && desired_addons_config_ != NULL) {
    delete desired_addons_config_;
  }
  desired_addons_config_ = NULL;
}
inline const ::google::container::v1::AddonsConfig& ClusterUpdate::desired_addons_config() const {
  const ::google::container::v1::AddonsConfig* p = desired_addons_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_addons_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::AddonsConfig*>(
      &::google::container::v1::_AddonsConfig_default_instance_);
}
inline ::google::container::v1::AddonsConfig* ClusterUpdate::release_desired_addons_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_addons_config)
  
  ::google::container::v1::AddonsConfig* temp = desired_addons_config_;
  desired_addons_config_ = NULL;
  return temp;
}
inline ::google::container::v1::AddonsConfig* ClusterUpdate::mutable_desired_addons_config() {
  
  if (desired_addons_config_ == NULL) {
    desired_addons_config_ = new ::google::container::v1::AddonsConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_addons_config)
  return desired_addons_config_;
}
inline void ClusterUpdate::set_allocated_desired_addons_config(::google::container::v1::AddonsConfig* desired_addons_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete desired_addons_config_;
  }
  if (desired_addons_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      desired_addons_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_addons_config, submessage_arena);
    }
    
  } else {
    
  }
  desired_addons_config_ = desired_addons_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_addons_config)
}

// string desired_node_pool_id = 7;
inline void ClusterUpdate::clear_desired_node_pool_id() {
  desired_node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_node_pool_id)
  return desired_node_pool_id_.GetNoArena();
}
inline void ClusterUpdate::set_desired_node_pool_id(const ::std::string& value) {
  
  desired_node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_node_pool_id)
}
#if LANG_CXX11
inline void ClusterUpdate::set_desired_node_pool_id(::std::string&& value) {
  
  desired_node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_node_pool_id)
}
#endif
inline void ClusterUpdate::set_desired_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desired_node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_node_pool_id)
}
inline void ClusterUpdate::set_desired_node_pool_id(const char* value, size_t size) {
  
  desired_node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_node_pool_id)
}
inline ::std::string* ClusterUpdate::mutable_desired_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_node_pool_id)
  return desired_node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_node_pool_id)
  
  return desired_node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_node_pool_id(::std::string* desired_node_pool_id) {
  if (desired_node_pool_id != NULL) {
    
  } else {
    
  }
  desired_node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_node_pool_id)
}

// string desired_image_type = 8;
inline void ClusterUpdate::clear_desired_image_type() {
  desired_image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_image_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_image_type)
  return desired_image_type_.GetNoArena();
}
inline void ClusterUpdate::set_desired_image_type(const ::std::string& value) {
  
  desired_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_image_type)
}
#if LANG_CXX11
inline void ClusterUpdate::set_desired_image_type(::std::string&& value) {
  
  desired_image_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_image_type)
}
#endif
inline void ClusterUpdate::set_desired_image_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desired_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_image_type)
}
inline void ClusterUpdate::set_desired_image_type(const char* value, size_t size) {
  
  desired_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_image_type)
}
inline ::std::string* ClusterUpdate::mutable_desired_image_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_image_type)
  return desired_image_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_image_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_image_type)
  
  return desired_image_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_image_type(::std::string* desired_image_type) {
  if (desired_image_type != NULL) {
    
  } else {
    
  }
  desired_image_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_image_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_image_type)
}

// .google.container.v1.NodePoolAutoscaling desired_node_pool_autoscaling = 9;
inline bool ClusterUpdate::has_desired_node_pool_autoscaling() const {
  return this != internal_default_instance() && desired_node_pool_autoscaling_ != NULL;
}
inline void ClusterUpdate::clear_desired_node_pool_autoscaling() {
  if (GetArenaNoVirtual() == NULL && desired_node_pool_autoscaling_ != NULL) {
    delete desired_node_pool_autoscaling_;
  }
  desired_node_pool_autoscaling_ = NULL;
}
inline const ::google::container::v1::NodePoolAutoscaling& ClusterUpdate::desired_node_pool_autoscaling() const {
  const ::google::container::v1::NodePoolAutoscaling* p = desired_node_pool_autoscaling_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_node_pool_autoscaling)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::NodePoolAutoscaling*>(
      &::google::container::v1::_NodePoolAutoscaling_default_instance_);
}
inline ::google::container::v1::NodePoolAutoscaling* ClusterUpdate::release_desired_node_pool_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_node_pool_autoscaling)
  
  ::google::container::v1::NodePoolAutoscaling* temp = desired_node_pool_autoscaling_;
  desired_node_pool_autoscaling_ = NULL;
  return temp;
}
inline ::google::container::v1::NodePoolAutoscaling* ClusterUpdate::mutable_desired_node_pool_autoscaling() {
  
  if (desired_node_pool_autoscaling_ == NULL) {
    desired_node_pool_autoscaling_ = new ::google::container::v1::NodePoolAutoscaling;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_node_pool_autoscaling)
  return desired_node_pool_autoscaling_;
}
inline void ClusterUpdate::set_allocated_desired_node_pool_autoscaling(::google::container::v1::NodePoolAutoscaling* desired_node_pool_autoscaling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete desired_node_pool_autoscaling_;
  }
  if (desired_node_pool_autoscaling) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      desired_node_pool_autoscaling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_node_pool_autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  desired_node_pool_autoscaling_ = desired_node_pool_autoscaling;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_node_pool_autoscaling)
}

// repeated string desired_locations = 10;
inline int ClusterUpdate::desired_locations_size() const {
  return desired_locations_.size();
}
inline void ClusterUpdate::clear_desired_locations() {
  desired_locations_.Clear();
}
inline const ::std::string& ClusterUpdate::desired_locations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_locations)
  return desired_locations_.Get(index);
}
inline ::std::string* ClusterUpdate::mutable_desired_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_locations)
  return desired_locations_.Mutable(index);
}
inline void ClusterUpdate::set_desired_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_locations)
  desired_locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ClusterUpdate::set_desired_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_locations)
  desired_locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ClusterUpdate::set_desired_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  desired_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_locations)
}
inline void ClusterUpdate::set_desired_locations(int index, const char* value, size_t size) {
  desired_locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_locations)
}
inline ::std::string* ClusterUpdate::add_desired_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ClusterUpdate.desired_locations)
  return desired_locations_.Add();
}
inline void ClusterUpdate::add_desired_locations(const ::std::string& value) {
  desired_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ClusterUpdate.desired_locations)
}
#if LANG_CXX11
inline void ClusterUpdate::add_desired_locations(::std::string&& value) {
  desired_locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ClusterUpdate.desired_locations)
}
#endif
inline void ClusterUpdate::add_desired_locations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  desired_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ClusterUpdate.desired_locations)
}
inline void ClusterUpdate::add_desired_locations(const char* value, size_t size) {
  desired_locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ClusterUpdate.desired_locations)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ClusterUpdate::desired_locations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ClusterUpdate.desired_locations)
  return desired_locations_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ClusterUpdate::mutable_desired_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ClusterUpdate.desired_locations)
  return &desired_locations_;
}

// .google.container.v1.MasterAuthorizedNetworksConfig desired_master_authorized_networks_config = 12;
inline bool ClusterUpdate::has_desired_master_authorized_networks_config() const {
  return this != internal_default_instance() && desired_master_authorized_networks_config_ != NULL;
}
inline void ClusterUpdate::clear_desired_master_authorized_networks_config() {
  if (GetArenaNoVirtual() == NULL && desired_master_authorized_networks_config_ != NULL) {
    delete desired_master_authorized_networks_config_;
  }
  desired_master_authorized_networks_config_ = NULL;
}
inline const ::google::container::v1::MasterAuthorizedNetworksConfig& ClusterUpdate::desired_master_authorized_networks_config() const {
  const ::google::container::v1::MasterAuthorizedNetworksConfig* p = desired_master_authorized_networks_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_master_authorized_networks_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::MasterAuthorizedNetworksConfig*>(
      &::google::container::v1::_MasterAuthorizedNetworksConfig_default_instance_);
}
inline ::google::container::v1::MasterAuthorizedNetworksConfig* ClusterUpdate::release_desired_master_authorized_networks_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_master_authorized_networks_config)
  
  ::google::container::v1::MasterAuthorizedNetworksConfig* temp = desired_master_authorized_networks_config_;
  desired_master_authorized_networks_config_ = NULL;
  return temp;
}
inline ::google::container::v1::MasterAuthorizedNetworksConfig* ClusterUpdate::mutable_desired_master_authorized_networks_config() {
  
  if (desired_master_authorized_networks_config_ == NULL) {
    desired_master_authorized_networks_config_ = new ::google::container::v1::MasterAuthorizedNetworksConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_master_authorized_networks_config)
  return desired_master_authorized_networks_config_;
}
inline void ClusterUpdate::set_allocated_desired_master_authorized_networks_config(::google::container::v1::MasterAuthorizedNetworksConfig* desired_master_authorized_networks_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete desired_master_authorized_networks_config_;
  }
  if (desired_master_authorized_networks_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      desired_master_authorized_networks_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_master_authorized_networks_config, submessage_arena);
    }
    
  } else {
    
  }
  desired_master_authorized_networks_config_ = desired_master_authorized_networks_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_master_authorized_networks_config)
}

// string desired_master_version = 100;
inline void ClusterUpdate::clear_desired_master_version() {
  desired_master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_master_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_master_version)
  return desired_master_version_.GetNoArena();
}
inline void ClusterUpdate::set_desired_master_version(const ::std::string& value) {
  
  desired_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_master_version)
}
#if LANG_CXX11
inline void ClusterUpdate::set_desired_master_version(::std::string&& value) {
  
  desired_master_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_master_version)
}
#endif
inline void ClusterUpdate::set_desired_master_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  desired_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_master_version)
}
inline void ClusterUpdate::set_desired_master_version(const char* value, size_t size) {
  
  desired_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_master_version)
}
inline ::std::string* ClusterUpdate::mutable_desired_master_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_master_version)
  return desired_master_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_master_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_master_version)
  
  return desired_master_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_master_version(::std::string* desired_master_version) {
  if (desired_master_version != NULL) {
    
  } else {
    
  }
  desired_master_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_master_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_master_version)
}

// -------------------------------------------------------------------

// Operation

// string name = 1;
inline void Operation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.name)
  return name_.GetNoArena();
}
inline void Operation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.name)
}
#if LANG_CXX11
inline void Operation::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.name)
}
#endif
inline void Operation::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.name)
}
inline void Operation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.name)
}
inline ::std::string* Operation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.name)
}

// string zone = 2;
inline void Operation::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.zone)
  return zone_.GetNoArena();
}
inline void Operation::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.zone)
}
#if LANG_CXX11
inline void Operation::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.zone)
}
#endif
inline void Operation::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.zone)
}
inline void Operation::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.zone)
}
inline ::std::string* Operation::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.zone)
}

// .google.container.v1.Operation.Type operation_type = 3;
inline void Operation::clear_operation_type() {
  operation_type_ = 0;
}
inline ::google::container::v1::Operation_Type Operation::operation_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.operation_type)
  return static_cast< ::google::container::v1::Operation_Type >(operation_type_);
}
inline void Operation::set_operation_type(::google::container::v1::Operation_Type value) {
  
  operation_type_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.operation_type)
}

// .google.container.v1.Operation.Status status = 4;
inline void Operation::clear_status() {
  status_ = 0;
}
inline ::google::container::v1::Operation_Status Operation::status() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.status)
  return static_cast< ::google::container::v1::Operation_Status >(status_);
}
inline void Operation::set_status(::google::container::v1::Operation_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.status)
}

// string detail = 8;
inline void Operation::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::detail() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.detail)
  return detail_.GetNoArena();
}
inline void Operation::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.detail)
}
#if LANG_CXX11
inline void Operation::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.detail)
}
#endif
inline void Operation::set_detail(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.detail)
}
inline void Operation::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.detail)
}
inline ::std::string* Operation::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_detail() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_detail(::std::string* detail) {
  if (detail != NULL) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.detail)
}

// string status_message = 5;
inline void Operation::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::status_message() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.status_message)
  return status_message_.GetNoArena();
}
inline void Operation::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.status_message)
}
#if LANG_CXX11
inline void Operation::set_status_message(::std::string&& value) {
  
  status_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.status_message)
}
#endif
inline void Operation::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.status_message)
}
inline void Operation::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.status_message)
}
inline ::std::string* Operation::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_status_message() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_status_message(::std::string* status_message) {
  if (status_message != NULL) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.status_message)
}

// string self_link = 6;
inline void Operation::clear_self_link() {
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::self_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.self_link)
  return self_link_.GetNoArena();
}
inline void Operation::set_self_link(const ::std::string& value) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.self_link)
}
#if LANG_CXX11
inline void Operation::set_self_link(::std::string&& value) {
  
  self_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.self_link)
}
#endif
inline void Operation::set_self_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.self_link)
}
inline void Operation::set_self_link(const char* value, size_t size) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.self_link)
}
inline ::std::string* Operation::mutable_self_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.self_link)
  return self_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_self_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.self_link)
  
  return self_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_self_link(::std::string* self_link) {
  if (self_link != NULL) {
    
  } else {
    
  }
  self_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.self_link)
}

// string target_link = 7;
inline void Operation::clear_target_link() {
  target_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::target_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.target_link)
  return target_link_.GetNoArena();
}
inline void Operation::set_target_link(const ::std::string& value) {
  
  target_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.target_link)
}
#if LANG_CXX11
inline void Operation::set_target_link(::std::string&& value) {
  
  target_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.target_link)
}
#endif
inline void Operation::set_target_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  target_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.target_link)
}
inline void Operation::set_target_link(const char* value, size_t size) {
  
  target_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.target_link)
}
inline ::std::string* Operation::mutable_target_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.target_link)
  return target_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_target_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.target_link)
  
  return target_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_target_link(::std::string* target_link) {
  if (target_link != NULL) {
    
  } else {
    
  }
  target_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.target_link)
}

// string start_time = 10;
inline void Operation::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::start_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.start_time)
  return start_time_.GetNoArena();
}
inline void Operation::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.start_time)
}
#if LANG_CXX11
inline void Operation::set_start_time(::std::string&& value) {
  
  start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.start_time)
}
#endif
inline void Operation::set_start_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.start_time)
}
inline void Operation::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.start_time)
}
inline ::std::string* Operation::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_start_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_start_time(::std::string* start_time) {
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.start_time)
}

// string end_time = 11;
inline void Operation::clear_end_time() {
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::end_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.end_time)
  return end_time_.GetNoArena();
}
inline void Operation::set_end_time(const ::std::string& value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.end_time)
}
#if LANG_CXX11
inline void Operation::set_end_time(::std::string&& value) {
  
  end_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.end_time)
}
#endif
inline void Operation::set_end_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.end_time)
}
inline void Operation::set_end_time(const char* value, size_t size) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.end_time)
}
inline ::std::string* Operation::mutable_end_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.end_time)
  return end_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_end_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.end_time)
  
  return end_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_end_time(::std::string* end_time) {
  if (end_time != NULL) {
    
  } else {
    
  }
  end_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.end_time)
}

// -------------------------------------------------------------------

// CreateClusterRequest

// string project_id = 1;
inline void CreateClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void CreateClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateClusterRequest.project_id)
}
#if LANG_CXX11
inline void CreateClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateClusterRequest.project_id)
}
#endif
inline void CreateClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateClusterRequest.project_id)
}
inline void CreateClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateClusterRequest.project_id)
}
inline ::std::string* CreateClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateClusterRequest.project_id)
}

// string zone = 2;
inline void CreateClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateClusterRequest.zone)
  return zone_.GetNoArena();
}
inline void CreateClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateClusterRequest.zone)
}
#if LANG_CXX11
inline void CreateClusterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateClusterRequest.zone)
}
#endif
inline void CreateClusterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateClusterRequest.zone)
}
inline void CreateClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateClusterRequest.zone)
}
inline ::std::string* CreateClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateClusterRequest.zone)
}

// .google.container.v1.Cluster cluster = 3;
inline bool CreateClusterRequest::has_cluster() const {
  return this != internal_default_instance() && cluster_ != NULL;
}
inline void CreateClusterRequest::clear_cluster() {
  if (GetArenaNoVirtual() == NULL && cluster_ != NULL) {
    delete cluster_;
  }
  cluster_ = NULL;
}
inline const ::google::container::v1::Cluster& CreateClusterRequest::cluster() const {
  const ::google::container::v1::Cluster* p = cluster_;
  // @@protoc_insertion_point(field_get:google.container.v1.CreateClusterRequest.cluster)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::Cluster*>(
      &::google::container::v1::_Cluster_default_instance_);
}
inline ::google::container::v1::Cluster* CreateClusterRequest::release_cluster() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateClusterRequest.cluster)
  
  ::google::container::v1::Cluster* temp = cluster_;
  cluster_ = NULL;
  return temp;
}
inline ::google::container::v1::Cluster* CreateClusterRequest::mutable_cluster() {
  
  if (cluster_ == NULL) {
    cluster_ = new ::google::container::v1::Cluster;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateClusterRequest.cluster)
  return cluster_;
}
inline void CreateClusterRequest::set_allocated_cluster(::google::container::v1::Cluster* cluster) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete cluster_;
  }
  if (cluster) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      cluster = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cluster, submessage_arena);
    }
    
  } else {
    
  }
  cluster_ = cluster;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateClusterRequest.cluster)
}

// -------------------------------------------------------------------

// GetClusterRequest

// string project_id = 1;
inline void GetClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetClusterRequest.project_id)
}
#if LANG_CXX11
inline void GetClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetClusterRequest.project_id)
}
#endif
inline void GetClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetClusterRequest.project_id)
}
inline void GetClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetClusterRequest.project_id)
}
inline ::std::string* GetClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetClusterRequest.project_id)
}

// string zone = 2;
inline void GetClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetClusterRequest.zone)
  return zone_.GetNoArena();
}
inline void GetClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetClusterRequest.zone)
}
#if LANG_CXX11
inline void GetClusterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetClusterRequest.zone)
}
#endif
inline void GetClusterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetClusterRequest.zone)
}
inline void GetClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetClusterRequest.zone)
}
inline ::std::string* GetClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetClusterRequest.zone)
}

// string cluster_id = 3;
inline void GetClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetClusterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void GetClusterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetClusterRequest.cluster_id)
}
#if LANG_CXX11
inline void GetClusterRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetClusterRequest.cluster_id)
}
#endif
inline void GetClusterRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetClusterRequest.cluster_id)
}
inline void GetClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetClusterRequest.cluster_id)
}
inline ::std::string* GetClusterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetClusterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetClusterRequest.cluster_id)
}

// -------------------------------------------------------------------

// UpdateClusterRequest

// string project_id = 1;
inline void UpdateClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void UpdateClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateClusterRequest.project_id)
}
#if LANG_CXX11
inline void UpdateClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateClusterRequest.project_id)
}
#endif
inline void UpdateClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateClusterRequest.project_id)
}
inline void UpdateClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateClusterRequest.project_id)
}
inline ::std::string* UpdateClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.project_id)
}

// string zone = 2;
inline void UpdateClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.zone)
  return zone_.GetNoArena();
}
inline void UpdateClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateClusterRequest.zone)
}
#if LANG_CXX11
inline void UpdateClusterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateClusterRequest.zone)
}
#endif
inline void UpdateClusterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateClusterRequest.zone)
}
inline void UpdateClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateClusterRequest.zone)
}
inline ::std::string* UpdateClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.zone)
}

// string cluster_id = 3;
inline void UpdateClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void UpdateClusterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateClusterRequest.cluster_id)
}
#if LANG_CXX11
inline void UpdateClusterRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateClusterRequest.cluster_id)
}
#endif
inline void UpdateClusterRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateClusterRequest.cluster_id)
}
inline void UpdateClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateClusterRequest.cluster_id)
}
inline ::std::string* UpdateClusterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.cluster_id)
}

// .google.container.v1.ClusterUpdate update = 4;
inline bool UpdateClusterRequest::has_update() const {
  return this != internal_default_instance() && update_ != NULL;
}
inline void UpdateClusterRequest::clear_update() {
  if (GetArenaNoVirtual() == NULL && update_ != NULL) {
    delete update_;
  }
  update_ = NULL;
}
inline const ::google::container::v1::ClusterUpdate& UpdateClusterRequest::update() const {
  const ::google::container::v1::ClusterUpdate* p = update_;
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.update)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::ClusterUpdate*>(
      &::google::container::v1::_ClusterUpdate_default_instance_);
}
inline ::google::container::v1::ClusterUpdate* UpdateClusterRequest::release_update() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.update)
  
  ::google::container::v1::ClusterUpdate* temp = update_;
  update_ = NULL;
  return temp;
}
inline ::google::container::v1::ClusterUpdate* UpdateClusterRequest::mutable_update() {
  
  if (update_ == NULL) {
    update_ = new ::google::container::v1::ClusterUpdate;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.update)
  return update_;
}
inline void UpdateClusterRequest::set_allocated_update(::google::container::v1::ClusterUpdate* update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_;
  }
  if (update) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.update)
}

// -------------------------------------------------------------------

// UpdateNodePoolRequest

// string project_id = 1;
inline void UpdateNodePoolRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNodePoolRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.project_id)
  return project_id_.GetNoArena();
}
inline void UpdateNodePoolRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.project_id)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.project_id)
}
#endif
inline void UpdateNodePoolRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.project_id)
}
inline void UpdateNodePoolRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.project_id)
}
inline ::std::string* UpdateNodePoolRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNodePoolRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNodePoolRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.project_id)
}

// string zone = 2;
inline void UpdateNodePoolRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNodePoolRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.zone)
  return zone_.GetNoArena();
}
inline void UpdateNodePoolRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.zone)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.zone)
}
#endif
inline void UpdateNodePoolRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.zone)
}
inline void UpdateNodePoolRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.zone)
}
inline ::std::string* UpdateNodePoolRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNodePoolRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNodePoolRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.zone)
}

// string cluster_id = 3;
inline void UpdateNodePoolRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNodePoolRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void UpdateNodePoolRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.cluster_id)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.cluster_id)
}
#endif
inline void UpdateNodePoolRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.cluster_id)
}
inline void UpdateNodePoolRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.cluster_id)
}
inline ::std::string* UpdateNodePoolRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNodePoolRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNodePoolRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.cluster_id)
}

// string node_pool_id = 4;
inline void UpdateNodePoolRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNodePoolRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void UpdateNodePoolRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}
#endif
inline void UpdateNodePoolRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}
inline void UpdateNodePoolRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}
inline ::std::string* UpdateNodePoolRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNodePoolRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNodePoolRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}

// string node_version = 5;
inline void UpdateNodePoolRequest::clear_node_version() {
  node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNodePoolRequest::node_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.node_version)
  return node_version_.GetNoArena();
}
inline void UpdateNodePoolRequest::set_node_version(const ::std::string& value) {
  
  node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.node_version)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_node_version(::std::string&& value) {
  
  node_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.node_version)
}
#endif
inline void UpdateNodePoolRequest::set_node_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.node_version)
}
inline void UpdateNodePoolRequest::set_node_version(const char* value, size_t size) {
  
  node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.node_version)
}
inline ::std::string* UpdateNodePoolRequest::mutable_node_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.node_version)
  return node_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNodePoolRequest::release_node_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.node_version)
  
  return node_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNodePoolRequest::set_allocated_node_version(::std::string* node_version) {
  if (node_version != NULL) {
    
  } else {
    
  }
  node_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.node_version)
}

// string image_type = 6;
inline void UpdateNodePoolRequest::clear_image_type() {
  image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNodePoolRequest::image_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.image_type)
  return image_type_.GetNoArena();
}
inline void UpdateNodePoolRequest::set_image_type(const ::std::string& value) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.image_type)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_image_type(::std::string&& value) {
  
  image_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.image_type)
}
#endif
inline void UpdateNodePoolRequest::set_image_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.image_type)
}
inline void UpdateNodePoolRequest::set_image_type(const char* value, size_t size) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.image_type)
}
inline ::std::string* UpdateNodePoolRequest::mutable_image_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.image_type)
  return image_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNodePoolRequest::release_image_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.image_type)
  
  return image_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNodePoolRequest::set_allocated_image_type(::std::string* image_type) {
  if (image_type != NULL) {
    
  } else {
    
  }
  image_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.image_type)
}

// -------------------------------------------------------------------

// SetNodePoolAutoscalingRequest

// string project_id = 1;
inline void SetNodePoolAutoscalingRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolAutoscalingRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetNodePoolAutoscalingRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}
#if LANG_CXX11
inline void SetNodePoolAutoscalingRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}
#endif
inline void SetNodePoolAutoscalingRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}
inline void SetNodePoolAutoscalingRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}
inline ::std::string* SetNodePoolAutoscalingRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolAutoscalingRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolAutoscalingRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}

// string zone = 2;
inline void SetNodePoolAutoscalingRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolAutoscalingRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.zone)
  return zone_.GetNoArena();
}
inline void SetNodePoolAutoscalingRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}
#if LANG_CXX11
inline void SetNodePoolAutoscalingRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}
#endif
inline void SetNodePoolAutoscalingRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}
inline void SetNodePoolAutoscalingRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}
inline ::std::string* SetNodePoolAutoscalingRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolAutoscalingRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolAutoscalingRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}

// string cluster_id = 3;
inline void SetNodePoolAutoscalingRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolAutoscalingRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetNodePoolAutoscalingRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}
#if LANG_CXX11
inline void SetNodePoolAutoscalingRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}
#endif
inline void SetNodePoolAutoscalingRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}
inline void SetNodePoolAutoscalingRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}
inline ::std::string* SetNodePoolAutoscalingRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolAutoscalingRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolAutoscalingRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}

// string node_pool_id = 4;
inline void SetNodePoolAutoscalingRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolAutoscalingRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void SetNodePoolAutoscalingRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}
#if LANG_CXX11
inline void SetNodePoolAutoscalingRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}
#endif
inline void SetNodePoolAutoscalingRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}
inline void SetNodePoolAutoscalingRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}
inline ::std::string* SetNodePoolAutoscalingRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolAutoscalingRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolAutoscalingRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}

// .google.container.v1.NodePoolAutoscaling autoscaling = 5;
inline bool SetNodePoolAutoscalingRequest::has_autoscaling() const {
  return this != internal_default_instance() && autoscaling_ != NULL;
}
inline void SetNodePoolAutoscalingRequest::clear_autoscaling() {
  if (GetArenaNoVirtual() == NULL && autoscaling_ != NULL) {
    delete autoscaling_;
  }
  autoscaling_ = NULL;
}
inline const ::google::container::v1::NodePoolAutoscaling& SetNodePoolAutoscalingRequest::autoscaling() const {
  const ::google::container::v1::NodePoolAutoscaling* p = autoscaling_;
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.autoscaling)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::NodePoolAutoscaling*>(
      &::google::container::v1::_NodePoolAutoscaling_default_instance_);
}
inline ::google::container::v1::NodePoolAutoscaling* SetNodePoolAutoscalingRequest::release_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.autoscaling)
  
  ::google::container::v1::NodePoolAutoscaling* temp = autoscaling_;
  autoscaling_ = NULL;
  return temp;
}
inline ::google::container::v1::NodePoolAutoscaling* SetNodePoolAutoscalingRequest::mutable_autoscaling() {
  
  if (autoscaling_ == NULL) {
    autoscaling_ = new ::google::container::v1::NodePoolAutoscaling;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.autoscaling)
  return autoscaling_;
}
inline void SetNodePoolAutoscalingRequest::set_allocated_autoscaling(::google::container::v1::NodePoolAutoscaling* autoscaling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete autoscaling_;
  }
  if (autoscaling) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      autoscaling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  autoscaling_ = autoscaling;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.autoscaling)
}

// -------------------------------------------------------------------

// SetLoggingServiceRequest

// string project_id = 1;
inline void SetLoggingServiceRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLoggingServiceRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLoggingServiceRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetLoggingServiceRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLoggingServiceRequest.project_id)
}
#if LANG_CXX11
inline void SetLoggingServiceRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLoggingServiceRequest.project_id)
}
#endif
inline void SetLoggingServiceRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLoggingServiceRequest.project_id)
}
inline void SetLoggingServiceRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLoggingServiceRequest.project_id)
}
inline ::std::string* SetLoggingServiceRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLoggingServiceRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLoggingServiceRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLoggingServiceRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLoggingServiceRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLoggingServiceRequest.project_id)
}

// string zone = 2;
inline void SetLoggingServiceRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLoggingServiceRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLoggingServiceRequest.zone)
  return zone_.GetNoArena();
}
inline void SetLoggingServiceRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLoggingServiceRequest.zone)
}
#if LANG_CXX11
inline void SetLoggingServiceRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLoggingServiceRequest.zone)
}
#endif
inline void SetLoggingServiceRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLoggingServiceRequest.zone)
}
inline void SetLoggingServiceRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLoggingServiceRequest.zone)
}
inline ::std::string* SetLoggingServiceRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLoggingServiceRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLoggingServiceRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLoggingServiceRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLoggingServiceRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLoggingServiceRequest.zone)
}

// string cluster_id = 3;
inline void SetLoggingServiceRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLoggingServiceRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLoggingServiceRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetLoggingServiceRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLoggingServiceRequest.cluster_id)
}
#if LANG_CXX11
inline void SetLoggingServiceRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLoggingServiceRequest.cluster_id)
}
#endif
inline void SetLoggingServiceRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLoggingServiceRequest.cluster_id)
}
inline void SetLoggingServiceRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLoggingServiceRequest.cluster_id)
}
inline ::std::string* SetLoggingServiceRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLoggingServiceRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLoggingServiceRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLoggingServiceRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLoggingServiceRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLoggingServiceRequest.cluster_id)
}

// string logging_service = 4;
inline void SetLoggingServiceRequest::clear_logging_service() {
  logging_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLoggingServiceRequest::logging_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLoggingServiceRequest.logging_service)
  return logging_service_.GetNoArena();
}
inline void SetLoggingServiceRequest::set_logging_service(const ::std::string& value) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLoggingServiceRequest.logging_service)
}
#if LANG_CXX11
inline void SetLoggingServiceRequest::set_logging_service(::std::string&& value) {
  
  logging_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLoggingServiceRequest.logging_service)
}
#endif
inline void SetLoggingServiceRequest::set_logging_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLoggingServiceRequest.logging_service)
}
inline void SetLoggingServiceRequest::set_logging_service(const char* value, size_t size) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLoggingServiceRequest.logging_service)
}
inline ::std::string* SetLoggingServiceRequest::mutable_logging_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLoggingServiceRequest.logging_service)
  return logging_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLoggingServiceRequest::release_logging_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLoggingServiceRequest.logging_service)
  
  return logging_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLoggingServiceRequest::set_allocated_logging_service(::std::string* logging_service) {
  if (logging_service != NULL) {
    
  } else {
    
  }
  logging_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logging_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLoggingServiceRequest.logging_service)
}

// -------------------------------------------------------------------

// SetMonitoringServiceRequest

// string project_id = 1;
inline void SetMonitoringServiceRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMonitoringServiceRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMonitoringServiceRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetMonitoringServiceRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMonitoringServiceRequest.project_id)
}
#if LANG_CXX11
inline void SetMonitoringServiceRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMonitoringServiceRequest.project_id)
}
#endif
inline void SetMonitoringServiceRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMonitoringServiceRequest.project_id)
}
inline void SetMonitoringServiceRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMonitoringServiceRequest.project_id)
}
inline ::std::string* SetMonitoringServiceRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMonitoringServiceRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMonitoringServiceRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMonitoringServiceRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMonitoringServiceRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMonitoringServiceRequest.project_id)
}

// string zone = 2;
inline void SetMonitoringServiceRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMonitoringServiceRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMonitoringServiceRequest.zone)
  return zone_.GetNoArena();
}
inline void SetMonitoringServiceRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMonitoringServiceRequest.zone)
}
#if LANG_CXX11
inline void SetMonitoringServiceRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMonitoringServiceRequest.zone)
}
#endif
inline void SetMonitoringServiceRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMonitoringServiceRequest.zone)
}
inline void SetMonitoringServiceRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMonitoringServiceRequest.zone)
}
inline ::std::string* SetMonitoringServiceRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMonitoringServiceRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMonitoringServiceRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMonitoringServiceRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMonitoringServiceRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMonitoringServiceRequest.zone)
}

// string cluster_id = 3;
inline void SetMonitoringServiceRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMonitoringServiceRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMonitoringServiceRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetMonitoringServiceRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}
#if LANG_CXX11
inline void SetMonitoringServiceRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}
#endif
inline void SetMonitoringServiceRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}
inline void SetMonitoringServiceRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}
inline ::std::string* SetMonitoringServiceRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMonitoringServiceRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMonitoringServiceRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMonitoringServiceRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMonitoringServiceRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}

// string monitoring_service = 4;
inline void SetMonitoringServiceRequest::clear_monitoring_service() {
  monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMonitoringServiceRequest::monitoring_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
  return monitoring_service_.GetNoArena();
}
inline void SetMonitoringServiceRequest::set_monitoring_service(const ::std::string& value) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}
#if LANG_CXX11
inline void SetMonitoringServiceRequest::set_monitoring_service(::std::string&& value) {
  
  monitoring_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}
#endif
inline void SetMonitoringServiceRequest::set_monitoring_service(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}
inline void SetMonitoringServiceRequest::set_monitoring_service(const char* value, size_t size) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}
inline ::std::string* SetMonitoringServiceRequest::mutable_monitoring_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
  return monitoring_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMonitoringServiceRequest::release_monitoring_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
  
  return monitoring_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMonitoringServiceRequest::set_allocated_monitoring_service(::std::string* monitoring_service) {
  if (monitoring_service != NULL) {
    
  } else {
    
  }
  monitoring_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitoring_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}

// -------------------------------------------------------------------

// SetAddonsConfigRequest

// string project_id = 1;
inline void SetAddonsConfigRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAddonsConfigRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetAddonsConfigRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetAddonsConfigRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetAddonsConfigRequest.project_id)
}
#if LANG_CXX11
inline void SetAddonsConfigRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetAddonsConfigRequest.project_id)
}
#endif
inline void SetAddonsConfigRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetAddonsConfigRequest.project_id)
}
inline void SetAddonsConfigRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetAddonsConfigRequest.project_id)
}
inline ::std::string* SetAddonsConfigRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetAddonsConfigRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAddonsConfigRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetAddonsConfigRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAddonsConfigRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetAddonsConfigRequest.project_id)
}

// string zone = 2;
inline void SetAddonsConfigRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAddonsConfigRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetAddonsConfigRequest.zone)
  return zone_.GetNoArena();
}
inline void SetAddonsConfigRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetAddonsConfigRequest.zone)
}
#if LANG_CXX11
inline void SetAddonsConfigRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetAddonsConfigRequest.zone)
}
#endif
inline void SetAddonsConfigRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetAddonsConfigRequest.zone)
}
inline void SetAddonsConfigRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetAddonsConfigRequest.zone)
}
inline ::std::string* SetAddonsConfigRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetAddonsConfigRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAddonsConfigRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetAddonsConfigRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAddonsConfigRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetAddonsConfigRequest.zone)
}

// string cluster_id = 3;
inline void SetAddonsConfigRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAddonsConfigRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetAddonsConfigRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetAddonsConfigRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetAddonsConfigRequest.cluster_id)
}
#if LANG_CXX11
inline void SetAddonsConfigRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetAddonsConfigRequest.cluster_id)
}
#endif
inline void SetAddonsConfigRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetAddonsConfigRequest.cluster_id)
}
inline void SetAddonsConfigRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetAddonsConfigRequest.cluster_id)
}
inline ::std::string* SetAddonsConfigRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetAddonsConfigRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAddonsConfigRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetAddonsConfigRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAddonsConfigRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetAddonsConfigRequest.cluster_id)
}

// .google.container.v1.AddonsConfig addons_config = 4;
inline bool SetAddonsConfigRequest::has_addons_config() const {
  return this != internal_default_instance() && addons_config_ != NULL;
}
inline void SetAddonsConfigRequest::clear_addons_config() {
  if (GetArenaNoVirtual() == NULL && addons_config_ != NULL) {
    delete addons_config_;
  }
  addons_config_ = NULL;
}
inline const ::google::container::v1::AddonsConfig& SetAddonsConfigRequest::addons_config() const {
  const ::google::container::v1::AddonsConfig* p = addons_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.SetAddonsConfigRequest.addons_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::AddonsConfig*>(
      &::google::container::v1::_AddonsConfig_default_instance_);
}
inline ::google::container::v1::AddonsConfig* SetAddonsConfigRequest::release_addons_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetAddonsConfigRequest.addons_config)
  
  ::google::container::v1::AddonsConfig* temp = addons_config_;
  addons_config_ = NULL;
  return temp;
}
inline ::google::container::v1::AddonsConfig* SetAddonsConfigRequest::mutable_addons_config() {
  
  if (addons_config_ == NULL) {
    addons_config_ = new ::google::container::v1::AddonsConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetAddonsConfigRequest.addons_config)
  return addons_config_;
}
inline void SetAddonsConfigRequest::set_allocated_addons_config(::google::container::v1::AddonsConfig* addons_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete addons_config_;
  }
  if (addons_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      addons_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, addons_config, submessage_arena);
    }
    
  } else {
    
  }
  addons_config_ = addons_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetAddonsConfigRequest.addons_config)
}

// -------------------------------------------------------------------

// SetLocationsRequest

// string project_id = 1;
inline void SetLocationsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLocationsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLocationsRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetLocationsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.project_id)
}
#if LANG_CXX11
inline void SetLocationsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLocationsRequest.project_id)
}
#endif
inline void SetLocationsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLocationsRequest.project_id)
}
inline void SetLocationsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLocationsRequest.project_id)
}
inline ::std::string* SetLocationsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLocationsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLocationsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLocationsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLocationsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLocationsRequest.project_id)
}

// string zone = 2;
inline void SetLocationsRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLocationsRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLocationsRequest.zone)
  return zone_.GetNoArena();
}
inline void SetLocationsRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.zone)
}
#if LANG_CXX11
inline void SetLocationsRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLocationsRequest.zone)
}
#endif
inline void SetLocationsRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLocationsRequest.zone)
}
inline void SetLocationsRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLocationsRequest.zone)
}
inline ::std::string* SetLocationsRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLocationsRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLocationsRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLocationsRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLocationsRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLocationsRequest.zone)
}

// string cluster_id = 3;
inline void SetLocationsRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLocationsRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLocationsRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetLocationsRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.cluster_id)
}
#if LANG_CXX11
inline void SetLocationsRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLocationsRequest.cluster_id)
}
#endif
inline void SetLocationsRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLocationsRequest.cluster_id)
}
inline void SetLocationsRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLocationsRequest.cluster_id)
}
inline ::std::string* SetLocationsRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLocationsRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLocationsRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLocationsRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLocationsRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLocationsRequest.cluster_id)
}

// repeated string locations = 4;
inline int SetLocationsRequest::locations_size() const {
  return locations_.size();
}
inline void SetLocationsRequest::clear_locations() {
  locations_.Clear();
}
inline const ::std::string& SetLocationsRequest::locations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLocationsRequest.locations)
  return locations_.Get(index);
}
inline ::std::string* SetLocationsRequest::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLocationsRequest.locations)
  return locations_.Mutable(index);
}
inline void SetLocationsRequest::set_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.locations)
  locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SetLocationsRequest::set_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.locations)
  locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SetLocationsRequest::set_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLocationsRequest.locations)
}
inline void SetLocationsRequest::set_locations(int index, const char* value, size_t size) {
  locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLocationsRequest.locations)
}
inline ::std::string* SetLocationsRequest::add_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.SetLocationsRequest.locations)
  return locations_.Add();
}
inline void SetLocationsRequest::add_locations(const ::std::string& value) {
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.SetLocationsRequest.locations)
}
#if LANG_CXX11
inline void SetLocationsRequest::add_locations(::std::string&& value) {
  locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.SetLocationsRequest.locations)
}
#endif
inline void SetLocationsRequest::add_locations(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.SetLocationsRequest.locations)
}
inline void SetLocationsRequest::add_locations(const char* value, size_t size) {
  locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.SetLocationsRequest.locations)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
SetLocationsRequest::locations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.SetLocationsRequest.locations)
  return locations_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
SetLocationsRequest::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.SetLocationsRequest.locations)
  return &locations_;
}

// -------------------------------------------------------------------

// UpdateMasterRequest

// string project_id = 1;
inline void UpdateMasterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateMasterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateMasterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void UpdateMasterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateMasterRequest.project_id)
}
#if LANG_CXX11
inline void UpdateMasterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateMasterRequest.project_id)
}
#endif
inline void UpdateMasterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateMasterRequest.project_id)
}
inline void UpdateMasterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateMasterRequest.project_id)
}
inline ::std::string* UpdateMasterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateMasterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateMasterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateMasterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateMasterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateMasterRequest.project_id)
}

// string zone = 2;
inline void UpdateMasterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateMasterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateMasterRequest.zone)
  return zone_.GetNoArena();
}
inline void UpdateMasterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateMasterRequest.zone)
}
#if LANG_CXX11
inline void UpdateMasterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateMasterRequest.zone)
}
#endif
inline void UpdateMasterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateMasterRequest.zone)
}
inline void UpdateMasterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateMasterRequest.zone)
}
inline ::std::string* UpdateMasterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateMasterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateMasterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateMasterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateMasterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateMasterRequest.zone)
}

// string cluster_id = 3;
inline void UpdateMasterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateMasterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateMasterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void UpdateMasterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateMasterRequest.cluster_id)
}
#if LANG_CXX11
inline void UpdateMasterRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateMasterRequest.cluster_id)
}
#endif
inline void UpdateMasterRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateMasterRequest.cluster_id)
}
inline void UpdateMasterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateMasterRequest.cluster_id)
}
inline ::std::string* UpdateMasterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateMasterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateMasterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateMasterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateMasterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateMasterRequest.cluster_id)
}

// string master_version = 4;
inline void UpdateMasterRequest::clear_master_version() {
  master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateMasterRequest::master_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateMasterRequest.master_version)
  return master_version_.GetNoArena();
}
inline void UpdateMasterRequest::set_master_version(const ::std::string& value) {
  
  master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateMasterRequest.master_version)
}
#if LANG_CXX11
inline void UpdateMasterRequest::set_master_version(::std::string&& value) {
  
  master_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateMasterRequest.master_version)
}
#endif
inline void UpdateMasterRequest::set_master_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateMasterRequest.master_version)
}
inline void UpdateMasterRequest::set_master_version(const char* value, size_t size) {
  
  master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateMasterRequest.master_version)
}
inline ::std::string* UpdateMasterRequest::mutable_master_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateMasterRequest.master_version)
  return master_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateMasterRequest::release_master_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateMasterRequest.master_version)
  
  return master_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateMasterRequest::set_allocated_master_version(::std::string* master_version) {
  if (master_version != NULL) {
    
  } else {
    
  }
  master_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateMasterRequest.master_version)
}

// -------------------------------------------------------------------

// SetMasterAuthRequest

// string project_id = 1;
inline void SetMasterAuthRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMasterAuthRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetMasterAuthRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMasterAuthRequest.project_id)
}
#if LANG_CXX11
inline void SetMasterAuthRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMasterAuthRequest.project_id)
}
#endif
inline void SetMasterAuthRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMasterAuthRequest.project_id)
}
inline void SetMasterAuthRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMasterAuthRequest.project_id)
}
inline ::std::string* SetMasterAuthRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMasterAuthRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMasterAuthRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMasterAuthRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMasterAuthRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMasterAuthRequest.project_id)
}

// string zone = 2;
inline void SetMasterAuthRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMasterAuthRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.zone)
  return zone_.GetNoArena();
}
inline void SetMasterAuthRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMasterAuthRequest.zone)
}
#if LANG_CXX11
inline void SetMasterAuthRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMasterAuthRequest.zone)
}
#endif
inline void SetMasterAuthRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMasterAuthRequest.zone)
}
inline void SetMasterAuthRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMasterAuthRequest.zone)
}
inline ::std::string* SetMasterAuthRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMasterAuthRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMasterAuthRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMasterAuthRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMasterAuthRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMasterAuthRequest.zone)
}

// string cluster_id = 3;
inline void SetMasterAuthRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMasterAuthRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetMasterAuthRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMasterAuthRequest.cluster_id)
}
#if LANG_CXX11
inline void SetMasterAuthRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMasterAuthRequest.cluster_id)
}
#endif
inline void SetMasterAuthRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMasterAuthRequest.cluster_id)
}
inline void SetMasterAuthRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMasterAuthRequest.cluster_id)
}
inline ::std::string* SetMasterAuthRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMasterAuthRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMasterAuthRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMasterAuthRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMasterAuthRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMasterAuthRequest.cluster_id)
}

// .google.container.v1.SetMasterAuthRequest.Action action = 4;
inline void SetMasterAuthRequest::clear_action() {
  action_ = 0;
}
inline ::google::container::v1::SetMasterAuthRequest_Action SetMasterAuthRequest::action() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.action)
  return static_cast< ::google::container::v1::SetMasterAuthRequest_Action >(action_);
}
inline void SetMasterAuthRequest::set_action(::google::container::v1::SetMasterAuthRequest_Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.SetMasterAuthRequest.action)
}

// .google.container.v1.MasterAuth update = 5;
inline bool SetMasterAuthRequest::has_update() const {
  return this != internal_default_instance() && update_ != NULL;
}
inline void SetMasterAuthRequest::clear_update() {
  if (GetArenaNoVirtual() == NULL && update_ != NULL) {
    delete update_;
  }
  update_ = NULL;
}
inline const ::google::container::v1::MasterAuth& SetMasterAuthRequest::update() const {
  const ::google::container::v1::MasterAuth* p = update_;
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.update)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::MasterAuth*>(
      &::google::container::v1::_MasterAuth_default_instance_);
}
inline ::google::container::v1::MasterAuth* SetMasterAuthRequest::release_update() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMasterAuthRequest.update)
  
  ::google::container::v1::MasterAuth* temp = update_;
  update_ = NULL;
  return temp;
}
inline ::google::container::v1::MasterAuth* SetMasterAuthRequest::mutable_update() {
  
  if (update_ == NULL) {
    update_ = new ::google::container::v1::MasterAuth;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMasterAuthRequest.update)
  return update_;
}
inline void SetMasterAuthRequest::set_allocated_update(::google::container::v1::MasterAuth* update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete update_;
  }
  if (update) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMasterAuthRequest.update)
}

// -------------------------------------------------------------------

// DeleteClusterRequest

// string project_id = 1;
inline void DeleteClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void DeleteClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteClusterRequest.project_id)
}
#if LANG_CXX11
inline void DeleteClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteClusterRequest.project_id)
}
#endif
inline void DeleteClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteClusterRequest.project_id)
}
inline void DeleteClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteClusterRequest.project_id)
}
inline ::std::string* DeleteClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteClusterRequest.project_id)
}

// string zone = 2;
inline void DeleteClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteClusterRequest.zone)
  return zone_.GetNoArena();
}
inline void DeleteClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteClusterRequest.zone)
}
#if LANG_CXX11
inline void DeleteClusterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteClusterRequest.zone)
}
#endif
inline void DeleteClusterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteClusterRequest.zone)
}
inline void DeleteClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteClusterRequest.zone)
}
inline ::std::string* DeleteClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteClusterRequest.zone)
}

// string cluster_id = 3;
inline void DeleteClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteClusterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void DeleteClusterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteClusterRequest.cluster_id)
}
#if LANG_CXX11
inline void DeleteClusterRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteClusterRequest.cluster_id)
}
#endif
inline void DeleteClusterRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteClusterRequest.cluster_id)
}
inline void DeleteClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteClusterRequest.cluster_id)
}
inline ::std::string* DeleteClusterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteClusterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteClusterRequest.cluster_id)
}

// -------------------------------------------------------------------

// ListClustersRequest

// string project_id = 1;
inline void ListClustersRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListClustersRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersRequest.project_id)
  return project_id_.GetNoArena();
}
inline void ListClustersRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersRequest.project_id)
}
#if LANG_CXX11
inline void ListClustersRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListClustersRequest.project_id)
}
#endif
inline void ListClustersRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListClustersRequest.project_id)
}
inline void ListClustersRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListClustersRequest.project_id)
}
inline ::std::string* ListClustersRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListClustersRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListClustersRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListClustersRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListClustersRequest.project_id)
}

// string zone = 2;
inline void ListClustersRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListClustersRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersRequest.zone)
  return zone_.GetNoArena();
}
inline void ListClustersRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersRequest.zone)
}
#if LANG_CXX11
inline void ListClustersRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListClustersRequest.zone)
}
#endif
inline void ListClustersRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListClustersRequest.zone)
}
inline void ListClustersRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListClustersRequest.zone)
}
inline ::std::string* ListClustersRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListClustersRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListClustersRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListClustersRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListClustersRequest.zone)
}

// -------------------------------------------------------------------

// ListClustersResponse

// repeated .google.container.v1.Cluster clusters = 1;
inline int ListClustersResponse::clusters_size() const {
  return clusters_.size();
}
inline void ListClustersResponse::clear_clusters() {
  clusters_.Clear();
}
inline const ::google::container::v1::Cluster& ListClustersResponse::clusters(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersResponse.clusters)
  return clusters_.Get(index);
}
inline ::google::container::v1::Cluster* ListClustersResponse::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersResponse.clusters)
  return clusters_.Mutable(index);
}
inline ::google::container::v1::Cluster* ListClustersResponse::add_clusters() {
  // @@protoc_insertion_point(field_add:google.container.v1.ListClustersResponse.clusters)
  return clusters_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >*
ListClustersResponse::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListClustersResponse.clusters)
  return &clusters_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >&
ListClustersResponse::clusters() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListClustersResponse.clusters)
  return clusters_;
}

// repeated string missing_zones = 2;
inline int ListClustersResponse::missing_zones_size() const {
  return missing_zones_.size();
}
inline void ListClustersResponse::clear_missing_zones() {
  missing_zones_.Clear();
}
inline const ::std::string& ListClustersResponse::missing_zones(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_.Get(index);
}
inline ::std::string* ListClustersResponse::mutable_missing_zones(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_.Mutable(index);
}
inline void ListClustersResponse::set_missing_zones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListClustersResponse::set_missing_zones(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListClustersResponse::set_missing_zones(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  missing_zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListClustersResponse.missing_zones)
}
inline void ListClustersResponse::set_missing_zones(int index, const char* value, size_t size) {
  missing_zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListClustersResponse.missing_zones)
}
inline ::std::string* ListClustersResponse::add_missing_zones() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_.Add();
}
inline void ListClustersResponse::add_missing_zones(const ::std::string& value) {
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ListClustersResponse.missing_zones)
}
#if LANG_CXX11
inline void ListClustersResponse::add_missing_zones(::std::string&& value) {
  missing_zones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ListClustersResponse.missing_zones)
}
#endif
inline void ListClustersResponse::add_missing_zones(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ListClustersResponse.missing_zones)
}
inline void ListClustersResponse::add_missing_zones(const char* value, size_t size) {
  missing_zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ListClustersResponse.missing_zones)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListClustersResponse::missing_zones() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListClustersResponse::mutable_missing_zones() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListClustersResponse.missing_zones)
  return &missing_zones_;
}

// -------------------------------------------------------------------

// GetOperationRequest

// string project_id = 1;
inline void GetOperationRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOperationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOperationRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetOperationRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOperationRequest.project_id)
}
#if LANG_CXX11
inline void GetOperationRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetOperationRequest.project_id)
}
#endif
inline void GetOperationRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOperationRequest.project_id)
}
inline void GetOperationRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOperationRequest.project_id)
}
inline ::std::string* GetOperationRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOperationRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOperationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOperationRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOperationRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOperationRequest.project_id)
}

// string zone = 2;
inline void GetOperationRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOperationRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOperationRequest.zone)
  return zone_.GetNoArena();
}
inline void GetOperationRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOperationRequest.zone)
}
#if LANG_CXX11
inline void GetOperationRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetOperationRequest.zone)
}
#endif
inline void GetOperationRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOperationRequest.zone)
}
inline void GetOperationRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOperationRequest.zone)
}
inline ::std::string* GetOperationRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOperationRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOperationRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOperationRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOperationRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOperationRequest.zone)
}

// string operation_id = 3;
inline void GetOperationRequest::clear_operation_id() {
  operation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOperationRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOperationRequest.operation_id)
  return operation_id_.GetNoArena();
}
inline void GetOperationRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOperationRequest.operation_id)
}
#if LANG_CXX11
inline void GetOperationRequest::set_operation_id(::std::string&& value) {
  
  operation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetOperationRequest.operation_id)
}
#endif
inline void GetOperationRequest::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOperationRequest.operation_id)
}
inline void GetOperationRequest::set_operation_id(const char* value, size_t size) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOperationRequest.operation_id)
}
inline ::std::string* GetOperationRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOperationRequest.operation_id)
  return operation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOperationRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOperationRequest.operation_id)
  
  return operation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOperationRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOperationRequest.operation_id)
}

// -------------------------------------------------------------------

// ListOperationsRequest

// string project_id = 1;
inline void ListOperationsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOperationsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsRequest.project_id)
  return project_id_.GetNoArena();
}
inline void ListOperationsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsRequest.project_id)
}
#if LANG_CXX11
inline void ListOperationsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListOperationsRequest.project_id)
}
#endif
inline void ListOperationsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListOperationsRequest.project_id)
}
inline void ListOperationsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListOperationsRequest.project_id)
}
inline ::std::string* ListOperationsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOperationsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListOperationsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOperationsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListOperationsRequest.project_id)
}

// string zone = 2;
inline void ListOperationsRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOperationsRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsRequest.zone)
  return zone_.GetNoArena();
}
inline void ListOperationsRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsRequest.zone)
}
#if LANG_CXX11
inline void ListOperationsRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListOperationsRequest.zone)
}
#endif
inline void ListOperationsRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListOperationsRequest.zone)
}
inline void ListOperationsRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListOperationsRequest.zone)
}
inline ::std::string* ListOperationsRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOperationsRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListOperationsRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOperationsRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListOperationsRequest.zone)
}

// -------------------------------------------------------------------

// CancelOperationRequest

// string project_id = 1;
inline void CancelOperationRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOperationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CancelOperationRequest.project_id)
  return project_id_.GetNoArena();
}
inline void CancelOperationRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CancelOperationRequest.project_id)
}
#if LANG_CXX11
inline void CancelOperationRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CancelOperationRequest.project_id)
}
#endif
inline void CancelOperationRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CancelOperationRequest.project_id)
}
inline void CancelOperationRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CancelOperationRequest.project_id)
}
inline ::std::string* CancelOperationRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CancelOperationRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOperationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CancelOperationRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOperationRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CancelOperationRequest.project_id)
}

// string zone = 2;
inline void CancelOperationRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOperationRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CancelOperationRequest.zone)
  return zone_.GetNoArena();
}
inline void CancelOperationRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CancelOperationRequest.zone)
}
#if LANG_CXX11
inline void CancelOperationRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CancelOperationRequest.zone)
}
#endif
inline void CancelOperationRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CancelOperationRequest.zone)
}
inline void CancelOperationRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CancelOperationRequest.zone)
}
inline ::std::string* CancelOperationRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CancelOperationRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOperationRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.CancelOperationRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOperationRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CancelOperationRequest.zone)
}

// string operation_id = 3;
inline void CancelOperationRequest::clear_operation_id() {
  operation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOperationRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CancelOperationRequest.operation_id)
  return operation_id_.GetNoArena();
}
inline void CancelOperationRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CancelOperationRequest.operation_id)
}
#if LANG_CXX11
inline void CancelOperationRequest::set_operation_id(::std::string&& value) {
  
  operation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CancelOperationRequest.operation_id)
}
#endif
inline void CancelOperationRequest::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CancelOperationRequest.operation_id)
}
inline void CancelOperationRequest::set_operation_id(const char* value, size_t size) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CancelOperationRequest.operation_id)
}
inline ::std::string* CancelOperationRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CancelOperationRequest.operation_id)
  return operation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOperationRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CancelOperationRequest.operation_id)
  
  return operation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOperationRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CancelOperationRequest.operation_id)
}

// -------------------------------------------------------------------

// ListOperationsResponse

// repeated .google.container.v1.Operation operations = 1;
inline int ListOperationsResponse::operations_size() const {
  return operations_.size();
}
inline void ListOperationsResponse::clear_operations() {
  operations_.Clear();
}
inline const ::google::container::v1::Operation& ListOperationsResponse::operations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsResponse.operations)
  return operations_.Get(index);
}
inline ::google::container::v1::Operation* ListOperationsResponse::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsResponse.operations)
  return operations_.Mutable(index);
}
inline ::google::container::v1::Operation* ListOperationsResponse::add_operations() {
  // @@protoc_insertion_point(field_add:google.container.v1.ListOperationsResponse.operations)
  return operations_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >*
ListOperationsResponse::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListOperationsResponse.operations)
  return &operations_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >&
ListOperationsResponse::operations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListOperationsResponse.operations)
  return operations_;
}

// repeated string missing_zones = 2;
inline int ListOperationsResponse::missing_zones_size() const {
  return missing_zones_.size();
}
inline void ListOperationsResponse::clear_missing_zones() {
  missing_zones_.Clear();
}
inline const ::std::string& ListOperationsResponse::missing_zones(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_.Get(index);
}
inline ::std::string* ListOperationsResponse::mutable_missing_zones(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_.Mutable(index);
}
inline void ListOperationsResponse::set_missing_zones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListOperationsResponse::set_missing_zones(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListOperationsResponse::set_missing_zones(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  missing_zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListOperationsResponse.missing_zones)
}
inline void ListOperationsResponse::set_missing_zones(int index, const char* value, size_t size) {
  missing_zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListOperationsResponse.missing_zones)
}
inline ::std::string* ListOperationsResponse::add_missing_zones() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_.Add();
}
inline void ListOperationsResponse::add_missing_zones(const ::std::string& value) {
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ListOperationsResponse.missing_zones)
}
#if LANG_CXX11
inline void ListOperationsResponse::add_missing_zones(::std::string&& value) {
  missing_zones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ListOperationsResponse.missing_zones)
}
#endif
inline void ListOperationsResponse::add_missing_zones(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ListOperationsResponse.missing_zones)
}
inline void ListOperationsResponse::add_missing_zones(const char* value, size_t size) {
  missing_zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ListOperationsResponse.missing_zones)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListOperationsResponse::missing_zones() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListOperationsResponse::mutable_missing_zones() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListOperationsResponse.missing_zones)
  return &missing_zones_;
}

// -------------------------------------------------------------------

// GetServerConfigRequest

// string project_id = 1;
inline void GetServerConfigRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetServerConfigRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetServerConfigRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetServerConfigRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetServerConfigRequest.project_id)
}
#if LANG_CXX11
inline void GetServerConfigRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetServerConfigRequest.project_id)
}
#endif
inline void GetServerConfigRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetServerConfigRequest.project_id)
}
inline void GetServerConfigRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetServerConfigRequest.project_id)
}
inline ::std::string* GetServerConfigRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetServerConfigRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetServerConfigRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetServerConfigRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServerConfigRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetServerConfigRequest.project_id)
}

// string zone = 2;
inline void GetServerConfigRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetServerConfigRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetServerConfigRequest.zone)
  return zone_.GetNoArena();
}
inline void GetServerConfigRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetServerConfigRequest.zone)
}
#if LANG_CXX11
inline void GetServerConfigRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetServerConfigRequest.zone)
}
#endif
inline void GetServerConfigRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetServerConfigRequest.zone)
}
inline void GetServerConfigRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetServerConfigRequest.zone)
}
inline ::std::string* GetServerConfigRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetServerConfigRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetServerConfigRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetServerConfigRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServerConfigRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetServerConfigRequest.zone)
}

// -------------------------------------------------------------------

// ServerConfig

// string default_cluster_version = 1;
inline void ServerConfig::clear_default_cluster_version() {
  default_cluster_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerConfig::default_cluster_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.default_cluster_version)
  return default_cluster_version_.GetNoArena();
}
inline void ServerConfig::set_default_cluster_version(const ::std::string& value) {
  
  default_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.default_cluster_version)
}
#if LANG_CXX11
inline void ServerConfig::set_default_cluster_version(::std::string&& value) {
  
  default_cluster_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ServerConfig.default_cluster_version)
}
#endif
inline void ServerConfig::set_default_cluster_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  default_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.default_cluster_version)
}
inline void ServerConfig::set_default_cluster_version(const char* value, size_t size) {
  
  default_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.default_cluster_version)
}
inline ::std::string* ServerConfig::mutable_default_cluster_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.default_cluster_version)
  return default_cluster_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_default_cluster_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.ServerConfig.default_cluster_version)
  
  return default_cluster_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_default_cluster_version(::std::string* default_cluster_version) {
  if (default_cluster_version != NULL) {
    
  } else {
    
  }
  default_cluster_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_cluster_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ServerConfig.default_cluster_version)
}

// repeated string valid_node_versions = 3;
inline int ServerConfig::valid_node_versions_size() const {
  return valid_node_versions_.size();
}
inline void ServerConfig::clear_valid_node_versions() {
  valid_node_versions_.Clear();
}
inline const ::std::string& ServerConfig::valid_node_versions(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_.Get(index);
}
inline ::std::string* ServerConfig::mutable_valid_node_versions(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_.Mutable(index);
}
inline void ServerConfig::set_valid_node_versions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_node_versions)
  valid_node_versions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServerConfig::set_valid_node_versions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_node_versions)
  valid_node_versions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServerConfig::set_valid_node_versions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valid_node_versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.valid_node_versions)
}
inline void ServerConfig::set_valid_node_versions(int index, const char* value, size_t size) {
  valid_node_versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.valid_node_versions)
}
inline ::std::string* ServerConfig::add_valid_node_versions() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_.Add();
}
inline void ServerConfig::add_valid_node_versions(const ::std::string& value) {
  valid_node_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_node_versions)
}
#if LANG_CXX11
inline void ServerConfig::add_valid_node_versions(::std::string&& value) {
  valid_node_versions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_node_versions)
}
#endif
inline void ServerConfig::add_valid_node_versions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valid_node_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ServerConfig.valid_node_versions)
}
inline void ServerConfig::add_valid_node_versions(const char* value, size_t size) {
  valid_node_versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ServerConfig.valid_node_versions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerConfig::valid_node_versions() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServerConfig::mutable_valid_node_versions() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ServerConfig.valid_node_versions)
  return &valid_node_versions_;
}

// string default_image_type = 4;
inline void ServerConfig::clear_default_image_type() {
  default_image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerConfig::default_image_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.default_image_type)
  return default_image_type_.GetNoArena();
}
inline void ServerConfig::set_default_image_type(const ::std::string& value) {
  
  default_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.default_image_type)
}
#if LANG_CXX11
inline void ServerConfig::set_default_image_type(::std::string&& value) {
  
  default_image_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ServerConfig.default_image_type)
}
#endif
inline void ServerConfig::set_default_image_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  default_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.default_image_type)
}
inline void ServerConfig::set_default_image_type(const char* value, size_t size) {
  
  default_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.default_image_type)
}
inline ::std::string* ServerConfig::mutable_default_image_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.default_image_type)
  return default_image_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_default_image_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.ServerConfig.default_image_type)
  
  return default_image_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_default_image_type(::std::string* default_image_type) {
  if (default_image_type != NULL) {
    
  } else {
    
  }
  default_image_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_image_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ServerConfig.default_image_type)
}

// repeated string valid_image_types = 5;
inline int ServerConfig::valid_image_types_size() const {
  return valid_image_types_.size();
}
inline void ServerConfig::clear_valid_image_types() {
  valid_image_types_.Clear();
}
inline const ::std::string& ServerConfig::valid_image_types(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.valid_image_types)
  return valid_image_types_.Get(index);
}
inline ::std::string* ServerConfig::mutable_valid_image_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.valid_image_types)
  return valid_image_types_.Mutable(index);
}
inline void ServerConfig::set_valid_image_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_image_types)
  valid_image_types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServerConfig::set_valid_image_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_image_types)
  valid_image_types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServerConfig::set_valid_image_types(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valid_image_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.valid_image_types)
}
inline void ServerConfig::set_valid_image_types(int index, const char* value, size_t size) {
  valid_image_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.valid_image_types)
}
inline ::std::string* ServerConfig::add_valid_image_types() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ServerConfig.valid_image_types)
  return valid_image_types_.Add();
}
inline void ServerConfig::add_valid_image_types(const ::std::string& value) {
  valid_image_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_image_types)
}
#if LANG_CXX11
inline void ServerConfig::add_valid_image_types(::std::string&& value) {
  valid_image_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_image_types)
}
#endif
inline void ServerConfig::add_valid_image_types(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valid_image_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ServerConfig.valid_image_types)
}
inline void ServerConfig::add_valid_image_types(const char* value, size_t size) {
  valid_image_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ServerConfig.valid_image_types)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerConfig::valid_image_types() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ServerConfig.valid_image_types)
  return valid_image_types_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServerConfig::mutable_valid_image_types() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ServerConfig.valid_image_types)
  return &valid_image_types_;
}

// repeated string valid_master_versions = 6;
inline int ServerConfig::valid_master_versions_size() const {
  return valid_master_versions_.size();
}
inline void ServerConfig::clear_valid_master_versions() {
  valid_master_versions_.Clear();
}
inline const ::std::string& ServerConfig::valid_master_versions(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.valid_master_versions)
  return valid_master_versions_.Get(index);
}
inline ::std::string* ServerConfig::mutable_valid_master_versions(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.valid_master_versions)
  return valid_master_versions_.Mutable(index);
}
inline void ServerConfig::set_valid_master_versions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_master_versions)
  valid_master_versions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServerConfig::set_valid_master_versions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_master_versions)
  valid_master_versions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServerConfig::set_valid_master_versions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valid_master_versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.valid_master_versions)
}
inline void ServerConfig::set_valid_master_versions(int index, const char* value, size_t size) {
  valid_master_versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.valid_master_versions)
}
inline ::std::string* ServerConfig::add_valid_master_versions() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ServerConfig.valid_master_versions)
  return valid_master_versions_.Add();
}
inline void ServerConfig::add_valid_master_versions(const ::std::string& value) {
  valid_master_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_master_versions)
}
#if LANG_CXX11
inline void ServerConfig::add_valid_master_versions(::std::string&& value) {
  valid_master_versions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_master_versions)
}
#endif
inline void ServerConfig::add_valid_master_versions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  valid_master_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ServerConfig.valid_master_versions)
}
inline void ServerConfig::add_valid_master_versions(const char* value, size_t size) {
  valid_master_versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ServerConfig.valid_master_versions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ServerConfig::valid_master_versions() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ServerConfig.valid_master_versions)
  return valid_master_versions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ServerConfig::mutable_valid_master_versions() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ServerConfig.valid_master_versions)
  return &valid_master_versions_;
}

// -------------------------------------------------------------------

// CreateNodePoolRequest

// string project_id = 1;
inline void CreateNodePoolRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateNodePoolRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateNodePoolRequest.project_id)
  return project_id_.GetNoArena();
}
inline void CreateNodePoolRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateNodePoolRequest.project_id)
}
#if LANG_CXX11
inline void CreateNodePoolRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateNodePoolRequest.project_id)
}
#endif
inline void CreateNodePoolRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateNodePoolRequest.project_id)
}
inline void CreateNodePoolRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateNodePoolRequest.project_id)
}
inline ::std::string* CreateNodePoolRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateNodePoolRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNodePoolRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateNodePoolRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNodePoolRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateNodePoolRequest.project_id)
}

// string zone = 2;
inline void CreateNodePoolRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateNodePoolRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateNodePoolRequest.zone)
  return zone_.GetNoArena();
}
inline void CreateNodePoolRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateNodePoolRequest.zone)
}
#if LANG_CXX11
inline void CreateNodePoolRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateNodePoolRequest.zone)
}
#endif
inline void CreateNodePoolRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateNodePoolRequest.zone)
}
inline void CreateNodePoolRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateNodePoolRequest.zone)
}
inline ::std::string* CreateNodePoolRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateNodePoolRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNodePoolRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateNodePoolRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNodePoolRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateNodePoolRequest.zone)
}

// string cluster_id = 3;
inline void CreateNodePoolRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateNodePoolRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateNodePoolRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void CreateNodePoolRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateNodePoolRequest.cluster_id)
}
#if LANG_CXX11
inline void CreateNodePoolRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateNodePoolRequest.cluster_id)
}
#endif
inline void CreateNodePoolRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateNodePoolRequest.cluster_id)
}
inline void CreateNodePoolRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateNodePoolRequest.cluster_id)
}
inline ::std::string* CreateNodePoolRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateNodePoolRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNodePoolRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateNodePoolRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNodePoolRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateNodePoolRequest.cluster_id)
}

// .google.container.v1.NodePool node_pool = 4;
inline bool CreateNodePoolRequest::has_node_pool() const {
  return this != internal_default_instance() && node_pool_ != NULL;
}
inline void CreateNodePoolRequest::clear_node_pool() {
  if (GetArenaNoVirtual() == NULL && node_pool_ != NULL) {
    delete node_pool_;
  }
  node_pool_ = NULL;
}
inline const ::google::container::v1::NodePool& CreateNodePoolRequest::node_pool() const {
  const ::google::container::v1::NodePool* p = node_pool_;
  // @@protoc_insertion_point(field_get:google.container.v1.CreateNodePoolRequest.node_pool)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::NodePool*>(
      &::google::container::v1::_NodePool_default_instance_);
}
inline ::google::container::v1::NodePool* CreateNodePoolRequest::release_node_pool() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateNodePoolRequest.node_pool)
  
  ::google::container::v1::NodePool* temp = node_pool_;
  node_pool_ = NULL;
  return temp;
}
inline ::google::container::v1::NodePool* CreateNodePoolRequest::mutable_node_pool() {
  
  if (node_pool_ == NULL) {
    node_pool_ = new ::google::container::v1::NodePool;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateNodePoolRequest.node_pool)
  return node_pool_;
}
inline void CreateNodePoolRequest::set_allocated_node_pool(::google::container::v1::NodePool* node_pool) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete node_pool_;
  }
  if (node_pool) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      node_pool = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node_pool, submessage_arena);
    }
    
  } else {
    
  }
  node_pool_ = node_pool;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateNodePoolRequest.node_pool)
}

// -------------------------------------------------------------------

// DeleteNodePoolRequest

// string project_id = 1;
inline void DeleteNodePoolRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNodePoolRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteNodePoolRequest.project_id)
  return project_id_.GetNoArena();
}
inline void DeleteNodePoolRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteNodePoolRequest.project_id)
}
#if LANG_CXX11
inline void DeleteNodePoolRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteNodePoolRequest.project_id)
}
#endif
inline void DeleteNodePoolRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteNodePoolRequest.project_id)
}
inline void DeleteNodePoolRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteNodePoolRequest.project_id)
}
inline ::std::string* DeleteNodePoolRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteNodePoolRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNodePoolRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteNodePoolRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNodePoolRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteNodePoolRequest.project_id)
}

// string zone = 2;
inline void DeleteNodePoolRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNodePoolRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteNodePoolRequest.zone)
  return zone_.GetNoArena();
}
inline void DeleteNodePoolRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteNodePoolRequest.zone)
}
#if LANG_CXX11
inline void DeleteNodePoolRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteNodePoolRequest.zone)
}
#endif
inline void DeleteNodePoolRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteNodePoolRequest.zone)
}
inline void DeleteNodePoolRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteNodePoolRequest.zone)
}
inline ::std::string* DeleteNodePoolRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteNodePoolRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNodePoolRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteNodePoolRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNodePoolRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteNodePoolRequest.zone)
}

// string cluster_id = 3;
inline void DeleteNodePoolRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNodePoolRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteNodePoolRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void DeleteNodePoolRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteNodePoolRequest.cluster_id)
}
#if LANG_CXX11
inline void DeleteNodePoolRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteNodePoolRequest.cluster_id)
}
#endif
inline void DeleteNodePoolRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteNodePoolRequest.cluster_id)
}
inline void DeleteNodePoolRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteNodePoolRequest.cluster_id)
}
inline ::std::string* DeleteNodePoolRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteNodePoolRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNodePoolRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteNodePoolRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNodePoolRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteNodePoolRequest.cluster_id)
}

// string node_pool_id = 4;
inline void DeleteNodePoolRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNodePoolRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteNodePoolRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void DeleteNodePoolRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}
#if LANG_CXX11
inline void DeleteNodePoolRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}
#endif
inline void DeleteNodePoolRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}
inline void DeleteNodePoolRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}
inline ::std::string* DeleteNodePoolRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteNodePoolRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNodePoolRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteNodePoolRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNodePoolRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}

// -------------------------------------------------------------------

// ListNodePoolsRequest

// string project_id = 1;
inline void ListNodePoolsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNodePoolsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListNodePoolsRequest.project_id)
  return project_id_.GetNoArena();
}
inline void ListNodePoolsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListNodePoolsRequest.project_id)
}
#if LANG_CXX11
inline void ListNodePoolsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListNodePoolsRequest.project_id)
}
#endif
inline void ListNodePoolsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListNodePoolsRequest.project_id)
}
inline void ListNodePoolsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListNodePoolsRequest.project_id)
}
inline ::std::string* ListNodePoolsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListNodePoolsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNodePoolsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListNodePoolsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNodePoolsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListNodePoolsRequest.project_id)
}

// string zone = 2;
inline void ListNodePoolsRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNodePoolsRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListNodePoolsRequest.zone)
  return zone_.GetNoArena();
}
inline void ListNodePoolsRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListNodePoolsRequest.zone)
}
#if LANG_CXX11
inline void ListNodePoolsRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListNodePoolsRequest.zone)
}
#endif
inline void ListNodePoolsRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListNodePoolsRequest.zone)
}
inline void ListNodePoolsRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListNodePoolsRequest.zone)
}
inline ::std::string* ListNodePoolsRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListNodePoolsRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNodePoolsRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListNodePoolsRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNodePoolsRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListNodePoolsRequest.zone)
}

// string cluster_id = 3;
inline void ListNodePoolsRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNodePoolsRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListNodePoolsRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void ListNodePoolsRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListNodePoolsRequest.cluster_id)
}
#if LANG_CXX11
inline void ListNodePoolsRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListNodePoolsRequest.cluster_id)
}
#endif
inline void ListNodePoolsRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListNodePoolsRequest.cluster_id)
}
inline void ListNodePoolsRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListNodePoolsRequest.cluster_id)
}
inline ::std::string* ListNodePoolsRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListNodePoolsRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNodePoolsRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListNodePoolsRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNodePoolsRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListNodePoolsRequest.cluster_id)
}

// -------------------------------------------------------------------

// GetNodePoolRequest

// string project_id = 1;
inline void GetNodePoolRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNodePoolRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetNodePoolRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetNodePoolRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetNodePoolRequest.project_id)
}
#if LANG_CXX11
inline void GetNodePoolRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetNodePoolRequest.project_id)
}
#endif
inline void GetNodePoolRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetNodePoolRequest.project_id)
}
inline void GetNodePoolRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetNodePoolRequest.project_id)
}
inline ::std::string* GetNodePoolRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetNodePoolRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNodePoolRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetNodePoolRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodePoolRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetNodePoolRequest.project_id)
}

// string zone = 2;
inline void GetNodePoolRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNodePoolRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetNodePoolRequest.zone)
  return zone_.GetNoArena();
}
inline void GetNodePoolRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetNodePoolRequest.zone)
}
#if LANG_CXX11
inline void GetNodePoolRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetNodePoolRequest.zone)
}
#endif
inline void GetNodePoolRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetNodePoolRequest.zone)
}
inline void GetNodePoolRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetNodePoolRequest.zone)
}
inline ::std::string* GetNodePoolRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetNodePoolRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNodePoolRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetNodePoolRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodePoolRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetNodePoolRequest.zone)
}

// string cluster_id = 3;
inline void GetNodePoolRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNodePoolRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetNodePoolRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void GetNodePoolRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetNodePoolRequest.cluster_id)
}
#if LANG_CXX11
inline void GetNodePoolRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetNodePoolRequest.cluster_id)
}
#endif
inline void GetNodePoolRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetNodePoolRequest.cluster_id)
}
inline void GetNodePoolRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetNodePoolRequest.cluster_id)
}
inline ::std::string* GetNodePoolRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetNodePoolRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNodePoolRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetNodePoolRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodePoolRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetNodePoolRequest.cluster_id)
}

// string node_pool_id = 4;
inline void GetNodePoolRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNodePoolRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetNodePoolRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void GetNodePoolRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetNodePoolRequest.node_pool_id)
}
#if LANG_CXX11
inline void GetNodePoolRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetNodePoolRequest.node_pool_id)
}
#endif
inline void GetNodePoolRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetNodePoolRequest.node_pool_id)
}
inline void GetNodePoolRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetNodePoolRequest.node_pool_id)
}
inline ::std::string* GetNodePoolRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetNodePoolRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNodePoolRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetNodePoolRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodePoolRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetNodePoolRequest.node_pool_id)
}

// -------------------------------------------------------------------

// NodePool

// string name = 1;
inline void NodePool::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodePool::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.name)
  return name_.GetNoArena();
}
inline void NodePool::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.name)
}
#if LANG_CXX11
inline void NodePool::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodePool.name)
}
#endif
inline void NodePool::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.name)
}
inline void NodePool::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.name)
}
inline ::std::string* NodePool::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodePool::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodePool::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.name)
}

// .google.container.v1.NodeConfig config = 2;
inline bool NodePool::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void NodePool::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}
inline const ::google::container::v1::NodeConfig& NodePool::config() const {
  const ::google::container::v1::NodeConfig* p = config_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::NodeConfig*>(
      &::google::container::v1::_NodeConfig_default_instance_);
}
inline ::google::container::v1::NodeConfig* NodePool::release_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.config)
  
  ::google::container::v1::NodeConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::google::container::v1::NodeConfig* NodePool::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::google::container::v1::NodeConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.config)
  return config_;
}
inline void NodePool::set_allocated_config(::google::container::v1::NodeConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.config)
}

// int32 initial_node_count = 3;
inline void NodePool::clear_initial_node_count() {
  initial_node_count_ = 0;
}
inline ::google::protobuf::int32 NodePool::initial_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.initial_node_count)
  return initial_node_count_;
}
inline void NodePool::set_initial_node_count(::google::protobuf::int32 value) {
  
  initial_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.initial_node_count)
}

// string self_link = 100;
inline void NodePool::clear_self_link() {
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodePool::self_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.self_link)
  return self_link_.GetNoArena();
}
inline void NodePool::set_self_link(const ::std::string& value) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.self_link)
}
#if LANG_CXX11
inline void NodePool::set_self_link(::std::string&& value) {
  
  self_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodePool.self_link)
}
#endif
inline void NodePool::set_self_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.self_link)
}
inline void NodePool::set_self_link(const char* value, size_t size) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.self_link)
}
inline ::std::string* NodePool::mutable_self_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.self_link)
  return self_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodePool::release_self_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.self_link)
  
  return self_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodePool::set_allocated_self_link(::std::string* self_link) {
  if (self_link != NULL) {
    
  } else {
    
  }
  self_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.self_link)
}

// string version = 101;
inline void NodePool::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodePool::version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.version)
  return version_.GetNoArena();
}
inline void NodePool::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.version)
}
#if LANG_CXX11
inline void NodePool::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodePool.version)
}
#endif
inline void NodePool::set_version(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.version)
}
inline void NodePool::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.version)
}
inline ::std::string* NodePool::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodePool::release_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodePool::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.version)
}

// repeated string instance_group_urls = 102;
inline int NodePool::instance_group_urls_size() const {
  return instance_group_urls_.size();
}
inline void NodePool::clear_instance_group_urls() {
  instance_group_urls_.Clear();
}
inline const ::std::string& NodePool::instance_group_urls(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.instance_group_urls)
  return instance_group_urls_.Get(index);
}
inline ::std::string* NodePool::mutable_instance_group_urls(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.instance_group_urls)
  return instance_group_urls_.Mutable(index);
}
inline void NodePool::set_instance_group_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.instance_group_urls)
  instance_group_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodePool::set_instance_group_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.instance_group_urls)
  instance_group_urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodePool::set_instance_group_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instance_group_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.instance_group_urls)
}
inline void NodePool::set_instance_group_urls(int index, const char* value, size_t size) {
  instance_group_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.instance_group_urls)
}
inline ::std::string* NodePool::add_instance_group_urls() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.NodePool.instance_group_urls)
  return instance_group_urls_.Add();
}
inline void NodePool::add_instance_group_urls(const ::std::string& value) {
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.NodePool.instance_group_urls)
}
#if LANG_CXX11
inline void NodePool::add_instance_group_urls(::std::string&& value) {
  instance_group_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.NodePool.instance_group_urls)
}
#endif
inline void NodePool::add_instance_group_urls(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.NodePool.instance_group_urls)
}
inline void NodePool::add_instance_group_urls(const char* value, size_t size) {
  instance_group_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.NodePool.instance_group_urls)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NodePool::instance_group_urls() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodePool.instance_group_urls)
  return instance_group_urls_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NodePool::mutable_instance_group_urls() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodePool.instance_group_urls)
  return &instance_group_urls_;
}

// .google.container.v1.NodePool.Status status = 103;
inline void NodePool::clear_status() {
  status_ = 0;
}
inline ::google::container::v1::NodePool_Status NodePool::status() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.status)
  return static_cast< ::google::container::v1::NodePool_Status >(status_);
}
inline void NodePool::set_status(::google::container::v1::NodePool_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.status)
}

// string status_message = 104;
inline void NodePool::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodePool::status_message() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.status_message)
  return status_message_.GetNoArena();
}
inline void NodePool::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.status_message)
}
#if LANG_CXX11
inline void NodePool::set_status_message(::std::string&& value) {
  
  status_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodePool.status_message)
}
#endif
inline void NodePool::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.status_message)
}
inline void NodePool::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.status_message)
}
inline ::std::string* NodePool::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodePool::release_status_message() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodePool::set_allocated_status_message(::std::string* status_message) {
  if (status_message != NULL) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.status_message)
}

// .google.container.v1.NodePoolAutoscaling autoscaling = 4;
inline bool NodePool::has_autoscaling() const {
  return this != internal_default_instance() && autoscaling_ != NULL;
}
inline void NodePool::clear_autoscaling() {
  if (GetArenaNoVirtual() == NULL && autoscaling_ != NULL) {
    delete autoscaling_;
  }
  autoscaling_ = NULL;
}
inline const ::google::container::v1::NodePoolAutoscaling& NodePool::autoscaling() const {
  const ::google::container::v1::NodePoolAutoscaling* p = autoscaling_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.autoscaling)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::NodePoolAutoscaling*>(
      &::google::container::v1::_NodePoolAutoscaling_default_instance_);
}
inline ::google::container::v1::NodePoolAutoscaling* NodePool::release_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.autoscaling)
  
  ::google::container::v1::NodePoolAutoscaling* temp = autoscaling_;
  autoscaling_ = NULL;
  return temp;
}
inline ::google::container::v1::NodePoolAutoscaling* NodePool::mutable_autoscaling() {
  
  if (autoscaling_ == NULL) {
    autoscaling_ = new ::google::container::v1::NodePoolAutoscaling;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.autoscaling)
  return autoscaling_;
}
inline void NodePool::set_allocated_autoscaling(::google::container::v1::NodePoolAutoscaling* autoscaling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete autoscaling_;
  }
  if (autoscaling) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      autoscaling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  autoscaling_ = autoscaling;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.autoscaling)
}

// .google.container.v1.NodeManagement management = 5;
inline bool NodePool::has_management() const {
  return this != internal_default_instance() && management_ != NULL;
}
inline void NodePool::clear_management() {
  if (GetArenaNoVirtual() == NULL && management_ != NULL) {
    delete management_;
  }
  management_ = NULL;
}
inline const ::google::container::v1::NodeManagement& NodePool::management() const {
  const ::google::container::v1::NodeManagement* p = management_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.management)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::NodeManagement*>(
      &::google::container::v1::_NodeManagement_default_instance_);
}
inline ::google::container::v1::NodeManagement* NodePool::release_management() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.management)
  
  ::google::container::v1::NodeManagement* temp = management_;
  management_ = NULL;
  return temp;
}
inline ::google::container::v1::NodeManagement* NodePool::mutable_management() {
  
  if (management_ == NULL) {
    management_ = new ::google::container::v1::NodeManagement;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.management)
  return management_;
}
inline void NodePool::set_allocated_management(::google::container::v1::NodeManagement* management) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete management_;
  }
  if (management) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      management = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, management, submessage_arena);
    }
    
  } else {
    
  }
  management_ = management;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.management)
}

// -------------------------------------------------------------------

// NodeManagement

// bool auto_upgrade = 1;
inline void NodeManagement::clear_auto_upgrade() {
  auto_upgrade_ = false;
}
inline bool NodeManagement::auto_upgrade() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeManagement.auto_upgrade)
  return auto_upgrade_;
}
inline void NodeManagement::set_auto_upgrade(bool value) {
  
  auto_upgrade_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeManagement.auto_upgrade)
}

// bool auto_repair = 2;
inline void NodeManagement::clear_auto_repair() {
  auto_repair_ = false;
}
inline bool NodeManagement::auto_repair() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeManagement.auto_repair)
  return auto_repair_;
}
inline void NodeManagement::set_auto_repair(bool value) {
  
  auto_repair_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeManagement.auto_repair)
}

// .google.container.v1.AutoUpgradeOptions upgrade_options = 10;
inline bool NodeManagement::has_upgrade_options() const {
  return this != internal_default_instance() && upgrade_options_ != NULL;
}
inline void NodeManagement::clear_upgrade_options() {
  if (GetArenaNoVirtual() == NULL && upgrade_options_ != NULL) {
    delete upgrade_options_;
  }
  upgrade_options_ = NULL;
}
inline const ::google::container::v1::AutoUpgradeOptions& NodeManagement::upgrade_options() const {
  const ::google::container::v1::AutoUpgradeOptions* p = upgrade_options_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodeManagement.upgrade_options)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::AutoUpgradeOptions*>(
      &::google::container::v1::_AutoUpgradeOptions_default_instance_);
}
inline ::google::container::v1::AutoUpgradeOptions* NodeManagement::release_upgrade_options() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeManagement.upgrade_options)
  
  ::google::container::v1::AutoUpgradeOptions* temp = upgrade_options_;
  upgrade_options_ = NULL;
  return temp;
}
inline ::google::container::v1::AutoUpgradeOptions* NodeManagement::mutable_upgrade_options() {
  
  if (upgrade_options_ == NULL) {
    upgrade_options_ = new ::google::container::v1::AutoUpgradeOptions;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeManagement.upgrade_options)
  return upgrade_options_;
}
inline void NodeManagement::set_allocated_upgrade_options(::google::container::v1::AutoUpgradeOptions* upgrade_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete upgrade_options_;
  }
  if (upgrade_options) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upgrade_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upgrade_options, submessage_arena);
    }
    
  } else {
    
  }
  upgrade_options_ = upgrade_options;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeManagement.upgrade_options)
}

// -------------------------------------------------------------------

// AutoUpgradeOptions

// string auto_upgrade_start_time = 1;
inline void AutoUpgradeOptions::clear_auto_upgrade_start_time() {
  auto_upgrade_start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutoUpgradeOptions::auto_upgrade_start_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
  return auto_upgrade_start_time_.GetNoArena();
}
inline void AutoUpgradeOptions::set_auto_upgrade_start_time(const ::std::string& value) {
  
  auto_upgrade_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}
#if LANG_CXX11
inline void AutoUpgradeOptions::set_auto_upgrade_start_time(::std::string&& value) {
  
  auto_upgrade_start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}
#endif
inline void AutoUpgradeOptions::set_auto_upgrade_start_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  auto_upgrade_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}
inline void AutoUpgradeOptions::set_auto_upgrade_start_time(const char* value, size_t size) {
  
  auto_upgrade_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}
inline ::std::string* AutoUpgradeOptions::mutable_auto_upgrade_start_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
  return auto_upgrade_start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoUpgradeOptions::release_auto_upgrade_start_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
  
  return auto_upgrade_start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoUpgradeOptions::set_allocated_auto_upgrade_start_time(::std::string* auto_upgrade_start_time) {
  if (auto_upgrade_start_time != NULL) {
    
  } else {
    
  }
  auto_upgrade_start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auto_upgrade_start_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}

// string description = 2;
inline void AutoUpgradeOptions::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutoUpgradeOptions::description() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AutoUpgradeOptions.description)
  return description_.GetNoArena();
}
inline void AutoUpgradeOptions::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AutoUpgradeOptions.description)
}
#if LANG_CXX11
inline void AutoUpgradeOptions::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AutoUpgradeOptions.description)
}
#endif
inline void AutoUpgradeOptions::set_description(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AutoUpgradeOptions.description)
}
inline void AutoUpgradeOptions::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AutoUpgradeOptions.description)
}
inline ::std::string* AutoUpgradeOptions::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoUpgradeOptions.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoUpgradeOptions::release_description() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoUpgradeOptions.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoUpgradeOptions::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoUpgradeOptions.description)
}

// -------------------------------------------------------------------

// MaintenancePolicy

// .google.container.v1.MaintenanceWindow window = 1;
inline bool MaintenancePolicy::has_window() const {
  return this != internal_default_instance() && window_ != NULL;
}
inline void MaintenancePolicy::clear_window() {
  if (GetArenaNoVirtual() == NULL && window_ != NULL) {
    delete window_;
  }
  window_ = NULL;
}
inline const ::google::container::v1::MaintenanceWindow& MaintenancePolicy::window() const {
  const ::google::container::v1::MaintenanceWindow* p = window_;
  // @@protoc_insertion_point(field_get:google.container.v1.MaintenancePolicy.window)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::MaintenanceWindow*>(
      &::google::container::v1::_MaintenanceWindow_default_instance_);
}
inline ::google::container::v1::MaintenanceWindow* MaintenancePolicy::release_window() {
  // @@protoc_insertion_point(field_release:google.container.v1.MaintenancePolicy.window)
  
  ::google::container::v1::MaintenanceWindow* temp = window_;
  window_ = NULL;
  return temp;
}
inline ::google::container::v1::MaintenanceWindow* MaintenancePolicy::mutable_window() {
  
  if (window_ == NULL) {
    window_ = new ::google::container::v1::MaintenanceWindow;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.MaintenancePolicy.window)
  return window_;
}
inline void MaintenancePolicy::set_allocated_window(::google::container::v1::MaintenanceWindow* window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete window_;
  }
  if (window) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      window = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    
  } else {
    
  }
  window_ = window;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MaintenancePolicy.window)
}

// -------------------------------------------------------------------

// MaintenanceWindow

// .google.container.v1.DailyMaintenanceWindow daily_maintenance_window = 2;
inline bool MaintenanceWindow::has_daily_maintenance_window() const {
  return policy_case() == kDailyMaintenanceWindow;
}
inline void MaintenanceWindow::set_has_daily_maintenance_window() {
  _oneof_case_[0] = kDailyMaintenanceWindow;
}
inline void MaintenanceWindow::clear_daily_maintenance_window() {
  if (has_daily_maintenance_window()) {
    delete policy_.daily_maintenance_window_;
    clear_has_policy();
  }
}
inline ::google::container::v1::DailyMaintenanceWindow* MaintenanceWindow::release_daily_maintenance_window() {
  // @@protoc_insertion_point(field_release:google.container.v1.MaintenanceWindow.daily_maintenance_window)
  if (has_daily_maintenance_window()) {
    clear_has_policy();
      ::google::container::v1::DailyMaintenanceWindow* temp = policy_.daily_maintenance_window_;
    policy_.daily_maintenance_window_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::container::v1::DailyMaintenanceWindow& MaintenanceWindow::daily_maintenance_window() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MaintenanceWindow.daily_maintenance_window)
  return has_daily_maintenance_window()
      ? *policy_.daily_maintenance_window_
      : *reinterpret_cast< ::google::container::v1::DailyMaintenanceWindow*>(&::google::container::v1::_DailyMaintenanceWindow_default_instance_);
}
inline ::google::container::v1::DailyMaintenanceWindow* MaintenanceWindow::mutable_daily_maintenance_window() {
  if (!has_daily_maintenance_window()) {
    clear_policy();
    set_has_daily_maintenance_window();
    policy_.daily_maintenance_window_ = new ::google::container::v1::DailyMaintenanceWindow;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.MaintenanceWindow.daily_maintenance_window)
  return policy_.daily_maintenance_window_;
}

inline bool MaintenanceWindow::has_policy() const {
  return policy_case() != POLICY_NOT_SET;
}
inline void MaintenanceWindow::clear_has_policy() {
  _oneof_case_[0] = POLICY_NOT_SET;
}
inline MaintenanceWindow::PolicyCase MaintenanceWindow::policy_case() const {
  return MaintenanceWindow::PolicyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DailyMaintenanceWindow

// string start_time = 2;
inline void DailyMaintenanceWindow::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DailyMaintenanceWindow::start_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DailyMaintenanceWindow.start_time)
  return start_time_.GetNoArena();
}
inline void DailyMaintenanceWindow::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DailyMaintenanceWindow.start_time)
}
#if LANG_CXX11
inline void DailyMaintenanceWindow::set_start_time(::std::string&& value) {
  
  start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DailyMaintenanceWindow.start_time)
}
#endif
inline void DailyMaintenanceWindow::set_start_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DailyMaintenanceWindow.start_time)
}
inline void DailyMaintenanceWindow::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DailyMaintenanceWindow.start_time)
}
inline ::std::string* DailyMaintenanceWindow::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DailyMaintenanceWindow.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DailyMaintenanceWindow::release_start_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.DailyMaintenanceWindow.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DailyMaintenanceWindow::set_allocated_start_time(::std::string* start_time) {
  if (start_time != NULL) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DailyMaintenanceWindow.start_time)
}

// string duration = 3;
inline void DailyMaintenanceWindow::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DailyMaintenanceWindow::duration() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DailyMaintenanceWindow.duration)
  return duration_.GetNoArena();
}
inline void DailyMaintenanceWindow::set_duration(const ::std::string& value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DailyMaintenanceWindow.duration)
}
#if LANG_CXX11
inline void DailyMaintenanceWindow::set_duration(::std::string&& value) {
  
  duration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DailyMaintenanceWindow.duration)
}
#endif
inline void DailyMaintenanceWindow::set_duration(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DailyMaintenanceWindow.duration)
}
inline void DailyMaintenanceWindow::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DailyMaintenanceWindow.duration)
}
inline ::std::string* DailyMaintenanceWindow::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DailyMaintenanceWindow.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DailyMaintenanceWindow::release_duration() {
  // @@protoc_insertion_point(field_release:google.container.v1.DailyMaintenanceWindow.duration)
  
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DailyMaintenanceWindow::set_allocated_duration(::std::string* duration) {
  if (duration != NULL) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DailyMaintenanceWindow.duration)
}

// -------------------------------------------------------------------

// SetNodePoolManagementRequest

// string project_id = 1;
inline void SetNodePoolManagementRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolManagementRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetNodePoolManagementRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolManagementRequest.project_id)
}
#if LANG_CXX11
inline void SetNodePoolManagementRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolManagementRequest.project_id)
}
#endif
inline void SetNodePoolManagementRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolManagementRequest.project_id)
}
inline void SetNodePoolManagementRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolManagementRequest.project_id)
}
inline ::std::string* SetNodePoolManagementRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolManagementRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolManagementRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.project_id)
}

// string zone = 2;
inline void SetNodePoolManagementRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolManagementRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.zone)
  return zone_.GetNoArena();
}
inline void SetNodePoolManagementRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolManagementRequest.zone)
}
#if LANG_CXX11
inline void SetNodePoolManagementRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolManagementRequest.zone)
}
#endif
inline void SetNodePoolManagementRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolManagementRequest.zone)
}
inline void SetNodePoolManagementRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolManagementRequest.zone)
}
inline ::std::string* SetNodePoolManagementRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolManagementRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolManagementRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.zone)
}

// string cluster_id = 3;
inline void SetNodePoolManagementRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolManagementRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetNodePoolManagementRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}
#if LANG_CXX11
inline void SetNodePoolManagementRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}
#endif
inline void SetNodePoolManagementRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}
inline void SetNodePoolManagementRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}
inline ::std::string* SetNodePoolManagementRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolManagementRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolManagementRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}

// string node_pool_id = 4;
inline void SetNodePoolManagementRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolManagementRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void SetNodePoolManagementRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}
#if LANG_CXX11
inline void SetNodePoolManagementRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}
#endif
inline void SetNodePoolManagementRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}
inline void SetNodePoolManagementRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}
inline ::std::string* SetNodePoolManagementRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolManagementRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolManagementRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}

// .google.container.v1.NodeManagement management = 5;
inline bool SetNodePoolManagementRequest::has_management() const {
  return this != internal_default_instance() && management_ != NULL;
}
inline void SetNodePoolManagementRequest::clear_management() {
  if (GetArenaNoVirtual() == NULL && management_ != NULL) {
    delete management_;
  }
  management_ = NULL;
}
inline const ::google::container::v1::NodeManagement& SetNodePoolManagementRequest::management() const {
  const ::google::container::v1::NodeManagement* p = management_;
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.management)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::NodeManagement*>(
      &::google::container::v1::_NodeManagement_default_instance_);
}
inline ::google::container::v1::NodeManagement* SetNodePoolManagementRequest::release_management() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.management)
  
  ::google::container::v1::NodeManagement* temp = management_;
  management_ = NULL;
  return temp;
}
inline ::google::container::v1::NodeManagement* SetNodePoolManagementRequest::mutable_management() {
  
  if (management_ == NULL) {
    management_ = new ::google::container::v1::NodeManagement;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.management)
  return management_;
}
inline void SetNodePoolManagementRequest::set_allocated_management(::google::container::v1::NodeManagement* management) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete management_;
  }
  if (management) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      management = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, management, submessage_arena);
    }
    
  } else {
    
  }
  management_ = management;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.management)
}

// -------------------------------------------------------------------

// SetNodePoolSizeRequest

// string project_id = 1;
inline void SetNodePoolSizeRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolSizeRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetNodePoolSizeRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.project_id)
}
#if LANG_CXX11
inline void SetNodePoolSizeRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolSizeRequest.project_id)
}
#endif
inline void SetNodePoolSizeRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolSizeRequest.project_id)
}
inline void SetNodePoolSizeRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolSizeRequest.project_id)
}
inline ::std::string* SetNodePoolSizeRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolSizeRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolSizeRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolSizeRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolSizeRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolSizeRequest.project_id)
}

// string zone = 2;
inline void SetNodePoolSizeRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolSizeRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.zone)
  return zone_.GetNoArena();
}
inline void SetNodePoolSizeRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.zone)
}
#if LANG_CXX11
inline void SetNodePoolSizeRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolSizeRequest.zone)
}
#endif
inline void SetNodePoolSizeRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolSizeRequest.zone)
}
inline void SetNodePoolSizeRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolSizeRequest.zone)
}
inline ::std::string* SetNodePoolSizeRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolSizeRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolSizeRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolSizeRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolSizeRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolSizeRequest.zone)
}

// string cluster_id = 3;
inline void SetNodePoolSizeRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolSizeRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetNodePoolSizeRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}
#if LANG_CXX11
inline void SetNodePoolSizeRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}
#endif
inline void SetNodePoolSizeRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}
inline void SetNodePoolSizeRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}
inline ::std::string* SetNodePoolSizeRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolSizeRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolSizeRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolSizeRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolSizeRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}

// string node_pool_id = 4;
inline void SetNodePoolSizeRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolSizeRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void SetNodePoolSizeRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}
#if LANG_CXX11
inline void SetNodePoolSizeRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}
#endif
inline void SetNodePoolSizeRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}
inline void SetNodePoolSizeRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}
inline ::std::string* SetNodePoolSizeRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolSizeRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolSizeRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}

// int32 node_count = 5;
inline void SetNodePoolSizeRequest::clear_node_count() {
  node_count_ = 0;
}
inline ::google::protobuf::int32 SetNodePoolSizeRequest::node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.node_count)
  return node_count_;
}
inline void SetNodePoolSizeRequest::set_node_count(::google::protobuf::int32 value) {
  
  node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.node_count)
}

// -------------------------------------------------------------------

// RollbackNodePoolUpgradeRequest

// string project_id = 1;
inline void RollbackNodePoolUpgradeRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollbackNodePoolUpgradeRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
  return project_id_.GetNoArena();
}
inline void RollbackNodePoolUpgradeRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}
#if LANG_CXX11
inline void RollbackNodePoolUpgradeRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}
#endif
inline void RollbackNodePoolUpgradeRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}
inline void RollbackNodePoolUpgradeRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}
inline ::std::string* RollbackNodePoolUpgradeRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollbackNodePoolUpgradeRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackNodePoolUpgradeRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}

// string zone = 2;
inline void RollbackNodePoolUpgradeRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollbackNodePoolUpgradeRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
  return zone_.GetNoArena();
}
inline void RollbackNodePoolUpgradeRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}
#if LANG_CXX11
inline void RollbackNodePoolUpgradeRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}
#endif
inline void RollbackNodePoolUpgradeRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}
inline void RollbackNodePoolUpgradeRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}
inline ::std::string* RollbackNodePoolUpgradeRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollbackNodePoolUpgradeRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackNodePoolUpgradeRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}

// string cluster_id = 3;
inline void RollbackNodePoolUpgradeRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollbackNodePoolUpgradeRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void RollbackNodePoolUpgradeRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}
#if LANG_CXX11
inline void RollbackNodePoolUpgradeRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}
#endif
inline void RollbackNodePoolUpgradeRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}
inline void RollbackNodePoolUpgradeRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}
inline ::std::string* RollbackNodePoolUpgradeRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollbackNodePoolUpgradeRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackNodePoolUpgradeRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}

// string node_pool_id = 4;
inline void RollbackNodePoolUpgradeRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollbackNodePoolUpgradeRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void RollbackNodePoolUpgradeRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}
#if LANG_CXX11
inline void RollbackNodePoolUpgradeRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}
#endif
inline void RollbackNodePoolUpgradeRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}
inline void RollbackNodePoolUpgradeRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}
inline ::std::string* RollbackNodePoolUpgradeRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollbackNodePoolUpgradeRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackNodePoolUpgradeRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != NULL) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}

// -------------------------------------------------------------------

// ListNodePoolsResponse

// repeated .google.container.v1.NodePool node_pools = 1;
inline int ListNodePoolsResponse::node_pools_size() const {
  return node_pools_.size();
}
inline void ListNodePoolsResponse::clear_node_pools() {
  node_pools_.Clear();
}
inline const ::google::container::v1::NodePool& ListNodePoolsResponse::node_pools(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListNodePoolsResponse.node_pools)
  return node_pools_.Get(index);
}
inline ::google::container::v1::NodePool* ListNodePoolsResponse::mutable_node_pools(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListNodePoolsResponse.node_pools)
  return node_pools_.Mutable(index);
}
inline ::google::container::v1::NodePool* ListNodePoolsResponse::add_node_pools() {
  // @@protoc_insertion_point(field_add:google.container.v1.ListNodePoolsResponse.node_pools)
  return node_pools_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >*
ListNodePoolsResponse::mutable_node_pools() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListNodePoolsResponse.node_pools)
  return &node_pools_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >&
ListNodePoolsResponse::node_pools() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListNodePoolsResponse.node_pools)
  return node_pools_;
}

// -------------------------------------------------------------------

// NodePoolAutoscaling

// bool enabled = 1;
inline void NodePoolAutoscaling::clear_enabled() {
  enabled_ = false;
}
inline bool NodePoolAutoscaling::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePoolAutoscaling.enabled)
  return enabled_;
}
inline void NodePoolAutoscaling::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePoolAutoscaling.enabled)
}

// int32 min_node_count = 2;
inline void NodePoolAutoscaling::clear_min_node_count() {
  min_node_count_ = 0;
}
inline ::google::protobuf::int32 NodePoolAutoscaling::min_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePoolAutoscaling.min_node_count)
  return min_node_count_;
}
inline void NodePoolAutoscaling::set_min_node_count(::google::protobuf::int32 value) {
  
  min_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePoolAutoscaling.min_node_count)
}

// int32 max_node_count = 3;
inline void NodePoolAutoscaling::clear_max_node_count() {
  max_node_count_ = 0;
}
inline ::google::protobuf::int32 NodePoolAutoscaling::max_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePoolAutoscaling.max_node_count)
  return max_node_count_;
}
inline void NodePoolAutoscaling::set_max_node_count(::google::protobuf::int32 value) {
  
  max_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePoolAutoscaling.max_node_count)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SetLabelsRequest

// string project_id = 1;
inline void SetLabelsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLabelsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLabelsRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetLabelsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLabelsRequest.project_id)
}
#if LANG_CXX11
inline void SetLabelsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLabelsRequest.project_id)
}
#endif
inline void SetLabelsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLabelsRequest.project_id)
}
inline void SetLabelsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLabelsRequest.project_id)
}
inline ::std::string* SetLabelsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLabelsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLabelsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLabelsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLabelsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLabelsRequest.project_id)
}

// string zone = 2;
inline void SetLabelsRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLabelsRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLabelsRequest.zone)
  return zone_.GetNoArena();
}
inline void SetLabelsRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLabelsRequest.zone)
}
#if LANG_CXX11
inline void SetLabelsRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLabelsRequest.zone)
}
#endif
inline void SetLabelsRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLabelsRequest.zone)
}
inline void SetLabelsRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLabelsRequest.zone)
}
inline ::std::string* SetLabelsRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLabelsRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLabelsRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLabelsRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLabelsRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLabelsRequest.zone)
}

// string cluster_id = 3;
inline void SetLabelsRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLabelsRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLabelsRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetLabelsRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLabelsRequest.cluster_id)
}
#if LANG_CXX11
inline void SetLabelsRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLabelsRequest.cluster_id)
}
#endif
inline void SetLabelsRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLabelsRequest.cluster_id)
}
inline void SetLabelsRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLabelsRequest.cluster_id)
}
inline ::std::string* SetLabelsRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLabelsRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLabelsRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLabelsRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLabelsRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLabelsRequest.cluster_id)
}

// map<string, string> resource_labels = 4;
inline int SetLabelsRequest::resource_labels_size() const {
  return resource_labels_.size();
}
inline void SetLabelsRequest::clear_resource_labels() {
  resource_labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SetLabelsRequest::resource_labels() const {
  // @@protoc_insertion_point(field_map:google.container.v1.SetLabelsRequest.resource_labels)
  return resource_labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SetLabelsRequest::mutable_resource_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.SetLabelsRequest.resource_labels)
  return resource_labels_.MutableMap();
}

// string label_fingerprint = 5;
inline void SetLabelsRequest::clear_label_fingerprint() {
  label_fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLabelsRequest::label_fingerprint() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLabelsRequest.label_fingerprint)
  return label_fingerprint_.GetNoArena();
}
inline void SetLabelsRequest::set_label_fingerprint(const ::std::string& value) {
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLabelsRequest.label_fingerprint)
}
#if LANG_CXX11
inline void SetLabelsRequest::set_label_fingerprint(::std::string&& value) {
  
  label_fingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLabelsRequest.label_fingerprint)
}
#endif
inline void SetLabelsRequest::set_label_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLabelsRequest.label_fingerprint)
}
inline void SetLabelsRequest::set_label_fingerprint(const char* value, size_t size) {
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLabelsRequest.label_fingerprint)
}
inline ::std::string* SetLabelsRequest::mutable_label_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLabelsRequest.label_fingerprint)
  return label_fingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLabelsRequest::release_label_fingerprint() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLabelsRequest.label_fingerprint)
  
  return label_fingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLabelsRequest::set_allocated_label_fingerprint(::std::string* label_fingerprint) {
  if (label_fingerprint != NULL) {
    
  } else {
    
  }
  label_fingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_fingerprint);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLabelsRequest.label_fingerprint)
}

// -------------------------------------------------------------------

// SetLegacyAbacRequest

// string project_id = 1;
inline void SetLegacyAbacRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLegacyAbacRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLegacyAbacRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetLegacyAbacRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLegacyAbacRequest.project_id)
}
#if LANG_CXX11
inline void SetLegacyAbacRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLegacyAbacRequest.project_id)
}
#endif
inline void SetLegacyAbacRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLegacyAbacRequest.project_id)
}
inline void SetLegacyAbacRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLegacyAbacRequest.project_id)
}
inline ::std::string* SetLegacyAbacRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLegacyAbacRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLegacyAbacRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLegacyAbacRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLegacyAbacRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLegacyAbacRequest.project_id)
}

// string zone = 2;
inline void SetLegacyAbacRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLegacyAbacRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLegacyAbacRequest.zone)
  return zone_.GetNoArena();
}
inline void SetLegacyAbacRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLegacyAbacRequest.zone)
}
#if LANG_CXX11
inline void SetLegacyAbacRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLegacyAbacRequest.zone)
}
#endif
inline void SetLegacyAbacRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLegacyAbacRequest.zone)
}
inline void SetLegacyAbacRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLegacyAbacRequest.zone)
}
inline ::std::string* SetLegacyAbacRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLegacyAbacRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLegacyAbacRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLegacyAbacRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLegacyAbacRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLegacyAbacRequest.zone)
}

// string cluster_id = 3;
inline void SetLegacyAbacRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLegacyAbacRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLegacyAbacRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetLegacyAbacRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLegacyAbacRequest.cluster_id)
}
#if LANG_CXX11
inline void SetLegacyAbacRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLegacyAbacRequest.cluster_id)
}
#endif
inline void SetLegacyAbacRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLegacyAbacRequest.cluster_id)
}
inline void SetLegacyAbacRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLegacyAbacRequest.cluster_id)
}
inline ::std::string* SetLegacyAbacRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLegacyAbacRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLegacyAbacRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLegacyAbacRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLegacyAbacRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLegacyAbacRequest.cluster_id)
}

// bool enabled = 4;
inline void SetLegacyAbacRequest::clear_enabled() {
  enabled_ = false;
}
inline bool SetLegacyAbacRequest::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLegacyAbacRequest.enabled)
  return enabled_;
}
inline void SetLegacyAbacRequest::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.SetLegacyAbacRequest.enabled)
}

// -------------------------------------------------------------------

// StartIPRotationRequest

// string project_id = 1;
inline void StartIPRotationRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartIPRotationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.StartIPRotationRequest.project_id)
  return project_id_.GetNoArena();
}
inline void StartIPRotationRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.StartIPRotationRequest.project_id)
}
#if LANG_CXX11
inline void StartIPRotationRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.StartIPRotationRequest.project_id)
}
#endif
inline void StartIPRotationRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.StartIPRotationRequest.project_id)
}
inline void StartIPRotationRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.StartIPRotationRequest.project_id)
}
inline ::std::string* StartIPRotationRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.StartIPRotationRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartIPRotationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.StartIPRotationRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartIPRotationRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.StartIPRotationRequest.project_id)
}

// string zone = 2;
inline void StartIPRotationRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartIPRotationRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.StartIPRotationRequest.zone)
  return zone_.GetNoArena();
}
inline void StartIPRotationRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.StartIPRotationRequest.zone)
}
#if LANG_CXX11
inline void StartIPRotationRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.StartIPRotationRequest.zone)
}
#endif
inline void StartIPRotationRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.StartIPRotationRequest.zone)
}
inline void StartIPRotationRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.StartIPRotationRequest.zone)
}
inline ::std::string* StartIPRotationRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.StartIPRotationRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartIPRotationRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.StartIPRotationRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartIPRotationRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.StartIPRotationRequest.zone)
}

// string cluster_id = 3;
inline void StartIPRotationRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartIPRotationRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.StartIPRotationRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void StartIPRotationRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.StartIPRotationRequest.cluster_id)
}
#if LANG_CXX11
inline void StartIPRotationRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.StartIPRotationRequest.cluster_id)
}
#endif
inline void StartIPRotationRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.StartIPRotationRequest.cluster_id)
}
inline void StartIPRotationRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.StartIPRotationRequest.cluster_id)
}
inline ::std::string* StartIPRotationRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.StartIPRotationRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartIPRotationRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.StartIPRotationRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartIPRotationRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.StartIPRotationRequest.cluster_id)
}

// -------------------------------------------------------------------

// CompleteIPRotationRequest

// string project_id = 1;
inline void CompleteIPRotationRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompleteIPRotationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CompleteIPRotationRequest.project_id)
  return project_id_.GetNoArena();
}
inline void CompleteIPRotationRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CompleteIPRotationRequest.project_id)
}
#if LANG_CXX11
inline void CompleteIPRotationRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CompleteIPRotationRequest.project_id)
}
#endif
inline void CompleteIPRotationRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CompleteIPRotationRequest.project_id)
}
inline void CompleteIPRotationRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CompleteIPRotationRequest.project_id)
}
inline ::std::string* CompleteIPRotationRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CompleteIPRotationRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompleteIPRotationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CompleteIPRotationRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompleteIPRotationRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CompleteIPRotationRequest.project_id)
}

// string zone = 2;
inline void CompleteIPRotationRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompleteIPRotationRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CompleteIPRotationRequest.zone)
  return zone_.GetNoArena();
}
inline void CompleteIPRotationRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CompleteIPRotationRequest.zone)
}
#if LANG_CXX11
inline void CompleteIPRotationRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CompleteIPRotationRequest.zone)
}
#endif
inline void CompleteIPRotationRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CompleteIPRotationRequest.zone)
}
inline void CompleteIPRotationRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CompleteIPRotationRequest.zone)
}
inline ::std::string* CompleteIPRotationRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CompleteIPRotationRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompleteIPRotationRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.CompleteIPRotationRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompleteIPRotationRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CompleteIPRotationRequest.zone)
}

// string cluster_id = 3;
inline void CompleteIPRotationRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompleteIPRotationRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CompleteIPRotationRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void CompleteIPRotationRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CompleteIPRotationRequest.cluster_id)
}
#if LANG_CXX11
inline void CompleteIPRotationRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CompleteIPRotationRequest.cluster_id)
}
#endif
inline void CompleteIPRotationRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CompleteIPRotationRequest.cluster_id)
}
inline void CompleteIPRotationRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CompleteIPRotationRequest.cluster_id)
}
inline ::std::string* CompleteIPRotationRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CompleteIPRotationRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompleteIPRotationRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CompleteIPRotationRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompleteIPRotationRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CompleteIPRotationRequest.cluster_id)
}

// -------------------------------------------------------------------

// AcceleratorConfig

// int64 accelerator_count = 1;
inline void AcceleratorConfig::clear_accelerator_count() {
  accelerator_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 AcceleratorConfig::accelerator_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AcceleratorConfig.accelerator_count)
  return accelerator_count_;
}
inline void AcceleratorConfig::set_accelerator_count(::google::protobuf::int64 value) {
  
  accelerator_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.AcceleratorConfig.accelerator_count)
}

// string accelerator_type = 2;
inline void AcceleratorConfig::clear_accelerator_type() {
  accelerator_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcceleratorConfig::accelerator_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AcceleratorConfig.accelerator_type)
  return accelerator_type_.GetNoArena();
}
inline void AcceleratorConfig::set_accelerator_type(const ::std::string& value) {
  
  accelerator_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AcceleratorConfig.accelerator_type)
}
#if LANG_CXX11
inline void AcceleratorConfig::set_accelerator_type(::std::string&& value) {
  
  accelerator_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AcceleratorConfig.accelerator_type)
}
#endif
inline void AcceleratorConfig::set_accelerator_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  accelerator_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AcceleratorConfig.accelerator_type)
}
inline void AcceleratorConfig::set_accelerator_type(const char* value, size_t size) {
  
  accelerator_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AcceleratorConfig.accelerator_type)
}
inline ::std::string* AcceleratorConfig::mutable_accelerator_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AcceleratorConfig.accelerator_type)
  return accelerator_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcceleratorConfig::release_accelerator_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.AcceleratorConfig.accelerator_type)
  
  return accelerator_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcceleratorConfig::set_allocated_accelerator_type(::std::string* accelerator_type) {
  if (accelerator_type != NULL) {
    
  } else {
    
  }
  accelerator_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accelerator_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AcceleratorConfig.accelerator_type)
}

// -------------------------------------------------------------------

// SetNetworkPolicyRequest

// string project_id = 1;
inline void SetNetworkPolicyRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNetworkPolicyRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNetworkPolicyRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetNetworkPolicyRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNetworkPolicyRequest.project_id)
}
#if LANG_CXX11
inline void SetNetworkPolicyRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNetworkPolicyRequest.project_id)
}
#endif
inline void SetNetworkPolicyRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNetworkPolicyRequest.project_id)
}
inline void SetNetworkPolicyRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNetworkPolicyRequest.project_id)
}
inline ::std::string* SetNetworkPolicyRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNetworkPolicyRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNetworkPolicyRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNetworkPolicyRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNetworkPolicyRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNetworkPolicyRequest.project_id)
}

// string zone = 2;
inline void SetNetworkPolicyRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNetworkPolicyRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNetworkPolicyRequest.zone)
  return zone_.GetNoArena();
}
inline void SetNetworkPolicyRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNetworkPolicyRequest.zone)
}
#if LANG_CXX11
inline void SetNetworkPolicyRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNetworkPolicyRequest.zone)
}
#endif
inline void SetNetworkPolicyRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNetworkPolicyRequest.zone)
}
inline void SetNetworkPolicyRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNetworkPolicyRequest.zone)
}
inline ::std::string* SetNetworkPolicyRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNetworkPolicyRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNetworkPolicyRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNetworkPolicyRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNetworkPolicyRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNetworkPolicyRequest.zone)
}

// string cluster_id = 3;
inline void SetNetworkPolicyRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNetworkPolicyRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNetworkPolicyRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetNetworkPolicyRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}
#if LANG_CXX11
inline void SetNetworkPolicyRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}
#endif
inline void SetNetworkPolicyRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}
inline void SetNetworkPolicyRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}
inline ::std::string* SetNetworkPolicyRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNetworkPolicyRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNetworkPolicyRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNetworkPolicyRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNetworkPolicyRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}

// .google.container.v1.NetworkPolicy network_policy = 4;
inline bool SetNetworkPolicyRequest::has_network_policy() const {
  return this != internal_default_instance() && network_policy_ != NULL;
}
inline void SetNetworkPolicyRequest::clear_network_policy() {
  if (GetArenaNoVirtual() == NULL && network_policy_ != NULL) {
    delete network_policy_;
  }
  network_policy_ = NULL;
}
inline const ::google::container::v1::NetworkPolicy& SetNetworkPolicyRequest::network_policy() const {
  const ::google::container::v1::NetworkPolicy* p = network_policy_;
  // @@protoc_insertion_point(field_get:google.container.v1.SetNetworkPolicyRequest.network_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::NetworkPolicy*>(
      &::google::container::v1::_NetworkPolicy_default_instance_);
}
inline ::google::container::v1::NetworkPolicy* SetNetworkPolicyRequest::release_network_policy() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNetworkPolicyRequest.network_policy)
  
  ::google::container::v1::NetworkPolicy* temp = network_policy_;
  network_policy_ = NULL;
  return temp;
}
inline ::google::container::v1::NetworkPolicy* SetNetworkPolicyRequest::mutable_network_policy() {
  
  if (network_policy_ == NULL) {
    network_policy_ = new ::google::container::v1::NetworkPolicy;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNetworkPolicyRequest.network_policy)
  return network_policy_;
}
inline void SetNetworkPolicyRequest::set_allocated_network_policy(::google::container::v1::NetworkPolicy* network_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete network_policy_;
  }
  if (network_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      network_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, network_policy, submessage_arena);
    }
    
  } else {
    
  }
  network_policy_ = network_policy;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNetworkPolicyRequest.network_policy)
}

// -------------------------------------------------------------------

// SetMaintenancePolicyRequest

// string project_id = 1;
inline void SetMaintenancePolicyRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMaintenancePolicyRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMaintenancePolicyRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetMaintenancePolicyRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMaintenancePolicyRequest.project_id)
}
#if LANG_CXX11
inline void SetMaintenancePolicyRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMaintenancePolicyRequest.project_id)
}
#endif
inline void SetMaintenancePolicyRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMaintenancePolicyRequest.project_id)
}
inline void SetMaintenancePolicyRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMaintenancePolicyRequest.project_id)
}
inline ::std::string* SetMaintenancePolicyRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMaintenancePolicyRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMaintenancePolicyRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMaintenancePolicyRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMaintenancePolicyRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != NULL) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMaintenancePolicyRequest.project_id)
}

// string zone = 2;
inline void SetMaintenancePolicyRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMaintenancePolicyRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMaintenancePolicyRequest.zone)
  return zone_.GetNoArena();
}
inline void SetMaintenancePolicyRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMaintenancePolicyRequest.zone)
}
#if LANG_CXX11
inline void SetMaintenancePolicyRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMaintenancePolicyRequest.zone)
}
#endif
inline void SetMaintenancePolicyRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMaintenancePolicyRequest.zone)
}
inline void SetMaintenancePolicyRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMaintenancePolicyRequest.zone)
}
inline ::std::string* SetMaintenancePolicyRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMaintenancePolicyRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMaintenancePolicyRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMaintenancePolicyRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMaintenancePolicyRequest::set_allocated_zone(::std::string* zone) {
  if (zone != NULL) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMaintenancePolicyRequest.zone)
}

// string cluster_id = 3;
inline void SetMaintenancePolicyRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMaintenancePolicyRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetMaintenancePolicyRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
}
#if LANG_CXX11
inline void SetMaintenancePolicyRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
}
#endif
inline void SetMaintenancePolicyRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
}
inline void SetMaintenancePolicyRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
}
inline ::std::string* SetMaintenancePolicyRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMaintenancePolicyRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMaintenancePolicyRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != NULL) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
}

// .google.container.v1.MaintenancePolicy maintenance_policy = 4;
inline bool SetMaintenancePolicyRequest::has_maintenance_policy() const {
  return this != internal_default_instance() && maintenance_policy_ != NULL;
}
inline void SetMaintenancePolicyRequest::clear_maintenance_policy() {
  if (GetArenaNoVirtual() == NULL && maintenance_policy_ != NULL) {
    delete maintenance_policy_;
  }
  maintenance_policy_ = NULL;
}
inline const ::google::container::v1::MaintenancePolicy& SetMaintenancePolicyRequest::maintenance_policy() const {
  const ::google::container::v1::MaintenancePolicy* p = maintenance_policy_;
  // @@protoc_insertion_point(field_get:google.container.v1.SetMaintenancePolicyRequest.maintenance_policy)
  return p != NULL ? *p : *reinterpret_cast<const ::google::container::v1::MaintenancePolicy*>(
      &::google::container::v1::_MaintenancePolicy_default_instance_);
}
inline ::google::container::v1::MaintenancePolicy* SetMaintenancePolicyRequest::release_maintenance_policy() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMaintenancePolicyRequest.maintenance_policy)
  
  ::google::container::v1::MaintenancePolicy* temp = maintenance_policy_;
  maintenance_policy_ = NULL;
  return temp;
}
inline ::google::container::v1::MaintenancePolicy* SetMaintenancePolicyRequest::mutable_maintenance_policy() {
  
  if (maintenance_policy_ == NULL) {
    maintenance_policy_ = new ::google::container::v1::MaintenancePolicy;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMaintenancePolicyRequest.maintenance_policy)
  return maintenance_policy_;
}
inline void SetMaintenancePolicyRequest::set_allocated_maintenance_policy(::google::container::v1::MaintenancePolicy* maintenance_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete maintenance_policy_;
  }
  if (maintenance_policy) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      maintenance_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, maintenance_policy, submessage_arena);
    }
    
  } else {
    
  }
  maintenance_policy_ = maintenance_policy;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMaintenancePolicyRequest.maintenance_policy)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace container
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::container::v1::NetworkPolicy_Provider> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::NetworkPolicy_Provider>() {
  return ::google::container::v1::NetworkPolicy_Provider_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::Cluster_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::Cluster_Status>() {
  return ::google::container::v1::Cluster_Status_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::Operation_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::Operation_Status>() {
  return ::google::container::v1::Operation_Status_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::Operation_Type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::Operation_Type>() {
  return ::google::container::v1::Operation_Type_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::SetMasterAuthRequest_Action> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::SetMasterAuthRequest_Action>() {
  return ::google::container::v1::SetMasterAuthRequest_Action_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::NodePool_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::NodePool_Status>() {
  return ::google::container::v1::NodePool_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto__INCLUDED
