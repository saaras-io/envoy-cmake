// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/streetview/publish/v1/streetview_publish.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fstreetview_2fpublish_2fv1_2fstreetview_5fpublish_2eproto__INCLUDED
#define GRPC_google_2fstreetview_2fpublish_2fv1_2fstreetview_5fpublish_2eproto__INCLUDED

#include "google/streetview/publish/v1/streetview_publish.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace streetview {
namespace publish {
namespace v1 {

// Definition of the service that backs the Street View Publish API.
//
// Publishes and connects user-contributed photos on Street View.
class StreetViewPublishService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.streetview.publish.v1.StreetViewPublishService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Creates an upload session to start uploading photo data. The upload URL of
    // the returned `UploadRef` is used to upload the data for the photo.
    //
    // After the upload is complete, the `UploadRef` is used with
    // `StreetViewPublishService:CreatePhoto()` to create the `Photo` object
    // entry.
    virtual ::grpc::Status StartUpload(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::streetview::publish::v1::UploadRef* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::UploadRef>> AsyncStartUpload(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::UploadRef>>(AsyncStartUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::UploadRef>> PrepareAsyncStartUpload(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::UploadRef>>(PrepareAsyncStartUploadRaw(context, request, cq));
    }
    // After the client finishes uploading the photo with the returned
    // `UploadRef`, `photo.create` publishes the uploaded photo to Street View on
    // Google Maps.
    //
    // This method returns the following error codes:
    //
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the upload reference does not exist.
    virtual ::grpc::Status CreatePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest& request, ::google::streetview::publish::v1::Photo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>> AsyncCreatePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>>(AsyncCreatePhotoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>> PrepareAsyncCreatePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>>(PrepareAsyncCreatePhotoRaw(context, request, cq));
    }
    // Gets the metadata of the specified `Photo`.
    //
    // This method returns the following error codes:
    //
    // * `PERMISSION_DENIED` if the requesting user did not create the requested
    // photo.
    // * `NOT_FOUND` if the requested photo does not exist.
    virtual ::grpc::Status GetPhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::GetPhotoRequest& request, ::google::streetview::publish::v1::Photo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>> AsyncGetPhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::GetPhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>>(AsyncGetPhotoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>> PrepareAsyncGetPhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::GetPhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>>(PrepareAsyncGetPhotoRaw(context, request, cq));
    }
    // Gets the metadata of the specified `Photo` batch.
    //
    // Note that if `photos.batchGet` fails, either critical fields are
    // missing or there was an authentication error.
    // Even if `photos.batchGet` succeeds, there may have been failures
    // for single photos in the batch. These failures will be specified in
    // `BatchGetPhotosResponse.results.status`.
    // See `photo.get` for specific failures that will occur per photo.
    virtual ::grpc::Status BatchGetPhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest& request, ::google::streetview::publish::v1::BatchGetPhotosResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchGetPhotosResponse>> AsyncBatchGetPhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchGetPhotosResponse>>(AsyncBatchGetPhotosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchGetPhotosResponse>> PrepareAsyncBatchGetPhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchGetPhotosResponse>>(PrepareAsyncBatchGetPhotosRaw(context, request, cq));
    }
    // Lists all the photos that belong to the user.
    virtual ::grpc::Status ListPhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::ListPhotosRequest& request, ::google::streetview::publish::v1::ListPhotosResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::ListPhotosResponse>> AsyncListPhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::ListPhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::ListPhotosResponse>>(AsyncListPhotosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::ListPhotosResponse>> PrepareAsyncListPhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::ListPhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::ListPhotosResponse>>(PrepareAsyncListPhotosRaw(context, request, cq));
    }
    // Updates the metadata of a photo, such as pose, place association, etc.
    // Changing the pixels of a photo is not supported.
    //
    // This method returns the following error codes:
    //
    // * `PERMISSION_DENIED` if the requesting user did not create the requested
    // photo.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the photo ID does not exist.
    virtual ::grpc::Status UpdatePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest& request, ::google::streetview::publish::v1::Photo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>> AsyncUpdatePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>>(AsyncUpdatePhotoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>> PrepareAsyncUpdatePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>>(PrepareAsyncUpdatePhotoRaw(context, request, cq));
    }
    // Updates the metadata of photos, such as pose, place association, etc.
    // Changing the pixels of a photo is not supported.
    //
    // Note that if `photos.batchUpdate` fails, either critical fields
    // are missing or there was an authentication error.
    // Even if `photos.batchUpdate` succeeds, there may have been
    // failures for single photos in the batch. These failures will be specified
    // in `BatchUpdatePhotosResponse.results.status`.
    // See `UpdatePhoto` for specific failures that will occur per photo.
    virtual ::grpc::Status BatchUpdatePhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest& request, ::google::streetview::publish::v1::BatchUpdatePhotosResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchUpdatePhotosResponse>> AsyncBatchUpdatePhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchUpdatePhotosResponse>>(AsyncBatchUpdatePhotosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchUpdatePhotosResponse>> PrepareAsyncBatchUpdatePhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchUpdatePhotosResponse>>(PrepareAsyncBatchUpdatePhotosRaw(context, request, cq));
    }
    // Deletes a photo and its metadata.
    //
    // This method returns the following error codes:
    //
    // * `PERMISSION_DENIED` if the requesting user did not create the requested
    // photo.
    // * `NOT_FOUND` if the photo ID does not exist.
    virtual ::grpc::Status DeletePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeletePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeletePhotoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeletePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeletePhotoRaw(context, request, cq));
    }
    // Deletes a list of photos and their metadata.
    //
    // Note that if `photos.batchDelete` fails, either critical fields
    // are missing or there was an authentication error.
    // Even if `photos.batchDelete` succeeds, there may have been
    // failures for single photos in the batch. These failures will be specified
    // in `BatchDeletePhotosResponse.status`.
    // See `photo.update` for specific failures that will occur per photo.
    virtual ::grpc::Status BatchDeletePhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest& request, ::google::streetview::publish::v1::BatchDeletePhotosResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchDeletePhotosResponse>> AsyncBatchDeletePhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchDeletePhotosResponse>>(AsyncBatchDeletePhotosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchDeletePhotosResponse>> PrepareAsyncBatchDeletePhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchDeletePhotosResponse>>(PrepareAsyncBatchDeletePhotosRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::UploadRef>* AsyncStartUploadRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::UploadRef>* PrepareAsyncStartUploadRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>* AsyncCreatePhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>* PrepareAsyncCreatePhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>* AsyncGetPhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::GetPhotoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>* PrepareAsyncGetPhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::GetPhotoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchGetPhotosResponse>* AsyncBatchGetPhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchGetPhotosResponse>* PrepareAsyncBatchGetPhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::ListPhotosResponse>* AsyncListPhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::ListPhotosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::ListPhotosResponse>* PrepareAsyncListPhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::ListPhotosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>* AsyncUpdatePhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::Photo>* PrepareAsyncUpdatePhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchUpdatePhotosResponse>* AsyncBatchUpdatePhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchUpdatePhotosResponse>* PrepareAsyncBatchUpdatePhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeletePhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeletePhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchDeletePhotosResponse>* AsyncBatchDeletePhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::streetview::publish::v1::BatchDeletePhotosResponse>* PrepareAsyncBatchDeletePhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status StartUpload(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::google::streetview::publish::v1::UploadRef* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::UploadRef>> AsyncStartUpload(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::UploadRef>>(AsyncStartUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::UploadRef>> PrepareAsyncStartUpload(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::UploadRef>>(PrepareAsyncStartUploadRaw(context, request, cq));
    }
    ::grpc::Status CreatePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest& request, ::google::streetview::publish::v1::Photo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>> AsyncCreatePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>>(AsyncCreatePhotoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>> PrepareAsyncCreatePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>>(PrepareAsyncCreatePhotoRaw(context, request, cq));
    }
    ::grpc::Status GetPhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::GetPhotoRequest& request, ::google::streetview::publish::v1::Photo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>> AsyncGetPhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::GetPhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>>(AsyncGetPhotoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>> PrepareAsyncGetPhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::GetPhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>>(PrepareAsyncGetPhotoRaw(context, request, cq));
    }
    ::grpc::Status BatchGetPhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest& request, ::google::streetview::publish::v1::BatchGetPhotosResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchGetPhotosResponse>> AsyncBatchGetPhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchGetPhotosResponse>>(AsyncBatchGetPhotosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchGetPhotosResponse>> PrepareAsyncBatchGetPhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchGetPhotosResponse>>(PrepareAsyncBatchGetPhotosRaw(context, request, cq));
    }
    ::grpc::Status ListPhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::ListPhotosRequest& request, ::google::streetview::publish::v1::ListPhotosResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::ListPhotosResponse>> AsyncListPhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::ListPhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::ListPhotosResponse>>(AsyncListPhotosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::ListPhotosResponse>> PrepareAsyncListPhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::ListPhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::ListPhotosResponse>>(PrepareAsyncListPhotosRaw(context, request, cq));
    }
    ::grpc::Status UpdatePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest& request, ::google::streetview::publish::v1::Photo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>> AsyncUpdatePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>>(AsyncUpdatePhotoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>> PrepareAsyncUpdatePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>>(PrepareAsyncUpdatePhotoRaw(context, request, cq));
    }
    ::grpc::Status BatchUpdatePhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest& request, ::google::streetview::publish::v1::BatchUpdatePhotosResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchUpdatePhotosResponse>> AsyncBatchUpdatePhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchUpdatePhotosResponse>>(AsyncBatchUpdatePhotosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchUpdatePhotosResponse>> PrepareAsyncBatchUpdatePhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchUpdatePhotosResponse>>(PrepareAsyncBatchUpdatePhotosRaw(context, request, cq));
    }
    ::grpc::Status DeletePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeletePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeletePhotoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeletePhoto(::grpc::ClientContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeletePhotoRaw(context, request, cq));
    }
    ::grpc::Status BatchDeletePhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest& request, ::google::streetview::publish::v1::BatchDeletePhotosResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchDeletePhotosResponse>> AsyncBatchDeletePhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchDeletePhotosResponse>>(AsyncBatchDeletePhotosRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchDeletePhotosResponse>> PrepareAsyncBatchDeletePhotos(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchDeletePhotosResponse>>(PrepareAsyncBatchDeletePhotosRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::UploadRef>* AsyncStartUploadRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::UploadRef>* PrepareAsyncStartUploadRaw(::grpc::ClientContext* context, const ::google::protobuf::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>* AsyncCreatePhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>* PrepareAsyncCreatePhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>* AsyncGetPhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::GetPhotoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>* PrepareAsyncGetPhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::GetPhotoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchGetPhotosResponse>* AsyncBatchGetPhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchGetPhotosResponse>* PrepareAsyncBatchGetPhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::ListPhotosResponse>* AsyncListPhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::ListPhotosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::ListPhotosResponse>* PrepareAsyncListPhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::ListPhotosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>* AsyncUpdatePhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::Photo>* PrepareAsyncUpdatePhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchUpdatePhotosResponse>* AsyncBatchUpdatePhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchUpdatePhotosResponse>* PrepareAsyncBatchUpdatePhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeletePhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeletePhotoRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchDeletePhotosResponse>* AsyncBatchDeletePhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::streetview::publish::v1::BatchDeletePhotosResponse>* PrepareAsyncBatchDeletePhotosRaw(::grpc::ClientContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartUpload_;
    const ::grpc::internal::RpcMethod rpcmethod_CreatePhoto_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPhoto_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchGetPhotos_;
    const ::grpc::internal::RpcMethod rpcmethod_ListPhotos_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePhoto_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchUpdatePhotos_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePhoto_;
    const ::grpc::internal::RpcMethod rpcmethod_BatchDeletePhotos_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Creates an upload session to start uploading photo data. The upload URL of
    // the returned `UploadRef` is used to upload the data for the photo.
    //
    // After the upload is complete, the `UploadRef` is used with
    // `StreetViewPublishService:CreatePhoto()` to create the `Photo` object
    // entry.
    virtual ::grpc::Status StartUpload(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::streetview::publish::v1::UploadRef* response);
    // After the client finishes uploading the photo with the returned
    // `UploadRef`, `photo.create` publishes the uploaded photo to Street View on
    // Google Maps.
    //
    // This method returns the following error codes:
    //
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the upload reference does not exist.
    virtual ::grpc::Status CreatePhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest* request, ::google::streetview::publish::v1::Photo* response);
    // Gets the metadata of the specified `Photo`.
    //
    // This method returns the following error codes:
    //
    // * `PERMISSION_DENIED` if the requesting user did not create the requested
    // photo.
    // * `NOT_FOUND` if the requested photo does not exist.
    virtual ::grpc::Status GetPhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::GetPhotoRequest* request, ::google::streetview::publish::v1::Photo* response);
    // Gets the metadata of the specified `Photo` batch.
    //
    // Note that if `photos.batchGet` fails, either critical fields are
    // missing or there was an authentication error.
    // Even if `photos.batchGet` succeeds, there may have been failures
    // for single photos in the batch. These failures will be specified in
    // `BatchGetPhotosResponse.results.status`.
    // See `photo.get` for specific failures that will occur per photo.
    virtual ::grpc::Status BatchGetPhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest* request, ::google::streetview::publish::v1::BatchGetPhotosResponse* response);
    // Lists all the photos that belong to the user.
    virtual ::grpc::Status ListPhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::ListPhotosRequest* request, ::google::streetview::publish::v1::ListPhotosResponse* response);
    // Updates the metadata of a photo, such as pose, place association, etc.
    // Changing the pixels of a photo is not supported.
    //
    // This method returns the following error codes:
    //
    // * `PERMISSION_DENIED` if the requesting user did not create the requested
    // photo.
    // * `INVALID_ARGUMENT` if the request is malformed.
    // * `NOT_FOUND` if the photo ID does not exist.
    virtual ::grpc::Status UpdatePhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest* request, ::google::streetview::publish::v1::Photo* response);
    // Updates the metadata of photos, such as pose, place association, etc.
    // Changing the pixels of a photo is not supported.
    //
    // Note that if `photos.batchUpdate` fails, either critical fields
    // are missing or there was an authentication error.
    // Even if `photos.batchUpdate` succeeds, there may have been
    // failures for single photos in the batch. These failures will be specified
    // in `BatchUpdatePhotosResponse.results.status`.
    // See `UpdatePhoto` for specific failures that will occur per photo.
    virtual ::grpc::Status BatchUpdatePhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest* request, ::google::streetview::publish::v1::BatchUpdatePhotosResponse* response);
    // Deletes a photo and its metadata.
    //
    // This method returns the following error codes:
    //
    // * `PERMISSION_DENIED` if the requesting user did not create the requested
    // photo.
    // * `NOT_FOUND` if the photo ID does not exist.
    virtual ::grpc::Status DeletePhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest* request, ::google::protobuf::Empty* response);
    // Deletes a list of photos and their metadata.
    //
    // Note that if `photos.batchDelete` fails, either critical fields
    // are missing or there was an authentication error.
    // Even if `photos.batchDelete` succeeds, there may have been
    // failures for single photos in the batch. These failures will be specified
    // in `BatchDeletePhotosResponse.status`.
    // See `photo.update` for specific failures that will occur per photo.
    virtual ::grpc::Status BatchDeletePhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest* request, ::google::streetview::publish::v1::BatchDeletePhotosResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartUpload() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartUpload(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::streetview::publish::v1::UploadRef* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartUpload(::grpc::ServerContext* context, ::google::protobuf::Empty* request, ::grpc::ServerAsyncResponseWriter< ::google::streetview::publish::v1::UploadRef>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreatePhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreatePhoto() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_CreatePhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest* request, ::google::streetview::publish::v1::Photo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreatePhoto(::grpc::ServerContext* context, ::google::streetview::publish::v1::CreatePhotoRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::streetview::publish::v1::Photo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPhoto() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetPhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::GetPhotoRequest* request, ::google::streetview::publish::v1::Photo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPhoto(::grpc::ServerContext* context, ::google::streetview::publish::v1::GetPhotoRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::streetview::publish::v1::Photo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchGetPhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BatchGetPhotos() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_BatchGetPhotos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGetPhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest* request, ::google::streetview::publish::v1::BatchGetPhotosResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchGetPhotos(::grpc::ServerContext* context, ::google::streetview::publish::v1::BatchGetPhotosRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::streetview::publish::v1::BatchGetPhotosResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListPhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListPhotos() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListPhotos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::ListPhotosRequest* request, ::google::streetview::publish::v1::ListPhotosResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListPhotos(::grpc::ServerContext* context, ::google::streetview::publish::v1::ListPhotosRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::streetview::publish::v1::ListPhotosResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdatePhoto() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_UpdatePhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest* request, ::google::streetview::publish::v1::Photo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePhoto(::grpc::ServerContext* context, ::google::streetview::publish::v1::UpdatePhotoRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::streetview::publish::v1::Photo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchUpdatePhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BatchUpdatePhotos() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_BatchUpdatePhotos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchUpdatePhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest* request, ::google::streetview::publish::v1::BatchUpdatePhotosResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchUpdatePhotos(::grpc::ServerContext* context, ::google::streetview::publish::v1::BatchUpdatePhotosRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::streetview::publish::v1::BatchUpdatePhotosResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeletePhoto() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DeletePhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePhoto(::grpc::ServerContext* context, ::google::streetview::publish::v1::DeletePhotoRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_BatchDeletePhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_BatchDeletePhotos() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_BatchDeletePhotos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchDeletePhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest* request, ::google::streetview::publish::v1::BatchDeletePhotosResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestBatchDeletePhotos(::grpc::ServerContext* context, ::google::streetview::publish::v1::BatchDeletePhotosRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::streetview::publish::v1::BatchDeletePhotosResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartUpload<WithAsyncMethod_CreatePhoto<WithAsyncMethod_GetPhoto<WithAsyncMethod_BatchGetPhotos<WithAsyncMethod_ListPhotos<WithAsyncMethod_UpdatePhoto<WithAsyncMethod_BatchUpdatePhotos<WithAsyncMethod_DeletePhoto<WithAsyncMethod_BatchDeletePhotos<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_StartUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartUpload() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartUpload(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::streetview::publish::v1::UploadRef* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreatePhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreatePhoto() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_CreatePhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreatePhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest* request, ::google::streetview::publish::v1::Photo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPhoto() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetPhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::GetPhotoRequest* request, ::google::streetview::publish::v1::Photo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchGetPhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BatchGetPhotos() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_BatchGetPhotos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchGetPhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest* request, ::google::streetview::publish::v1::BatchGetPhotosResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListPhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListPhotos() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListPhotos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListPhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::ListPhotosRequest* request, ::google::streetview::publish::v1::ListPhotosResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdatePhoto() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_UpdatePhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest* request, ::google::streetview::publish::v1::Photo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchUpdatePhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BatchUpdatePhotos() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_BatchUpdatePhotos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchUpdatePhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest* request, ::google::streetview::publish::v1::BatchUpdatePhotosResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeletePhoto() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DeletePhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_BatchDeletePhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_BatchDeletePhotos() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_BatchDeletePhotos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status BatchDeletePhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest* request, ::google::streetview::publish::v1::BatchDeletePhotosResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StartUpload() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::protobuf::Empty, ::google::streetview::publish::v1::UploadRef>(std::bind(&WithStreamedUnaryMethod_StartUpload<BaseClass>::StreamedStartUpload, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartUpload(::grpc::ServerContext* context, const ::google::protobuf::Empty* request, ::google::streetview::publish::v1::UploadRef* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartUpload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::protobuf::Empty,::google::streetview::publish::v1::UploadRef>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreatePhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreatePhoto() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::streetview::publish::v1::CreatePhotoRequest, ::google::streetview::publish::v1::Photo>(std::bind(&WithStreamedUnaryMethod_CreatePhoto<BaseClass>::StreamedCreatePhoto, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreatePhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreatePhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::CreatePhotoRequest* request, ::google::streetview::publish::v1::Photo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreatePhoto(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::streetview::publish::v1::CreatePhotoRequest,::google::streetview::publish::v1::Photo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPhoto() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::streetview::publish::v1::GetPhotoRequest, ::google::streetview::publish::v1::Photo>(std::bind(&WithStreamedUnaryMethod_GetPhoto<BaseClass>::StreamedGetPhoto, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::GetPhotoRequest* request, ::google::streetview::publish::v1::Photo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPhoto(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::streetview::publish::v1::GetPhotoRequest,::google::streetview::publish::v1::Photo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchGetPhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BatchGetPhotos() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::streetview::publish::v1::BatchGetPhotosRequest, ::google::streetview::publish::v1::BatchGetPhotosResponse>(std::bind(&WithStreamedUnaryMethod_BatchGetPhotos<BaseClass>::StreamedBatchGetPhotos, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BatchGetPhotos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchGetPhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::BatchGetPhotosRequest* request, ::google::streetview::publish::v1::BatchGetPhotosResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchGetPhotos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::streetview::publish::v1::BatchGetPhotosRequest,::google::streetview::publish::v1::BatchGetPhotosResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListPhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListPhotos() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::streetview::publish::v1::ListPhotosRequest, ::google::streetview::publish::v1::ListPhotosResponse>(std::bind(&WithStreamedUnaryMethod_ListPhotos<BaseClass>::StreamedListPhotos, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListPhotos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListPhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::ListPhotosRequest* request, ::google::streetview::publish::v1::ListPhotosResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListPhotos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::streetview::publish::v1::ListPhotosRequest,::google::streetview::publish::v1::ListPhotosResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdatePhoto() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::streetview::publish::v1::UpdatePhotoRequest, ::google::streetview::publish::v1::Photo>(std::bind(&WithStreamedUnaryMethod_UpdatePhoto<BaseClass>::StreamedUpdatePhoto, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdatePhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::UpdatePhotoRequest* request, ::google::streetview::publish::v1::Photo* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePhoto(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::streetview::publish::v1::UpdatePhotoRequest,::google::streetview::publish::v1::Photo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchUpdatePhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BatchUpdatePhotos() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::streetview::publish::v1::BatchUpdatePhotosRequest, ::google::streetview::publish::v1::BatchUpdatePhotosResponse>(std::bind(&WithStreamedUnaryMethod_BatchUpdatePhotos<BaseClass>::StreamedBatchUpdatePhotos, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BatchUpdatePhotos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchUpdatePhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::BatchUpdatePhotosRequest* request, ::google::streetview::publish::v1::BatchUpdatePhotosResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchUpdatePhotos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::streetview::publish::v1::BatchUpdatePhotosRequest,::google::streetview::publish::v1::BatchUpdatePhotosResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePhoto : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeletePhoto() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::streetview::publish::v1::DeletePhotoRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeletePhoto<BaseClass>::StreamedDeletePhoto, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeletePhoto() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePhoto(::grpc::ServerContext* context, const ::google::streetview::publish::v1::DeletePhotoRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePhoto(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::streetview::publish::v1::DeletePhotoRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_BatchDeletePhotos : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_BatchDeletePhotos() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler< ::google::streetview::publish::v1::BatchDeletePhotosRequest, ::google::streetview::publish::v1::BatchDeletePhotosResponse>(std::bind(&WithStreamedUnaryMethod_BatchDeletePhotos<BaseClass>::StreamedBatchDeletePhotos, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_BatchDeletePhotos() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status BatchDeletePhotos(::grpc::ServerContext* context, const ::google::streetview::publish::v1::BatchDeletePhotosRequest* request, ::google::streetview::publish::v1::BatchDeletePhotosResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedBatchDeletePhotos(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::streetview::publish::v1::BatchDeletePhotosRequest,::google::streetview::publish::v1::BatchDeletePhotosResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartUpload<WithStreamedUnaryMethod_CreatePhoto<WithStreamedUnaryMethod_GetPhoto<WithStreamedUnaryMethod_BatchGetPhotos<WithStreamedUnaryMethod_ListPhotos<WithStreamedUnaryMethod_UpdatePhoto<WithStreamedUnaryMethod_BatchUpdatePhotos<WithStreamedUnaryMethod_DeletePhoto<WithStreamedUnaryMethod_BatchDeletePhotos<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartUpload<WithStreamedUnaryMethod_CreatePhoto<WithStreamedUnaryMethod_GetPhoto<WithStreamedUnaryMethod_BatchGetPhotos<WithStreamedUnaryMethod_ListPhotos<WithStreamedUnaryMethod_UpdatePhoto<WithStreamedUnaryMethod_BatchUpdatePhotos<WithStreamedUnaryMethod_DeletePhoto<WithStreamedUnaryMethod_BatchDeletePhotos<Service > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace publish
}  // namespace streetview
}  // namespace google


#endif  // GRPC_google_2fstreetview_2fpublish_2fv1_2fstreetview_5fpublish_2eproto__INCLUDED
