// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/spanner/admin/database/v1/spanner_database_admin.proto

#include "google/spanner/admin/database/v1/spanner_database_admin.pb.h"
#include "google/spanner/admin/database/v1/spanner_database_admin.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace spanner {
namespace admin {
namespace database {
namespace v1 {

static const char* DatabaseAdmin_method_names[] = {
  "/google.spanner.admin.database.v1.DatabaseAdmin/ListDatabases",
  "/google.spanner.admin.database.v1.DatabaseAdmin/CreateDatabase",
  "/google.spanner.admin.database.v1.DatabaseAdmin/GetDatabase",
  "/google.spanner.admin.database.v1.DatabaseAdmin/UpdateDatabaseDdl",
  "/google.spanner.admin.database.v1.DatabaseAdmin/DropDatabase",
  "/google.spanner.admin.database.v1.DatabaseAdmin/GetDatabaseDdl",
  "/google.spanner.admin.database.v1.DatabaseAdmin/SetIamPolicy",
  "/google.spanner.admin.database.v1.DatabaseAdmin/GetIamPolicy",
  "/google.spanner.admin.database.v1.DatabaseAdmin/TestIamPermissions",
};

std::unique_ptr< DatabaseAdmin::Stub> DatabaseAdmin::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DatabaseAdmin::Stub> stub(new DatabaseAdmin::Stub(channel));
  return stub;
}

DatabaseAdmin::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListDatabases_(DatabaseAdmin_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateDatabase_(DatabaseAdmin_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDatabase_(DatabaseAdmin_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateDatabaseDdl_(DatabaseAdmin_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DropDatabase_(DatabaseAdmin_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetDatabaseDdl_(DatabaseAdmin_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetIamPolicy_(DatabaseAdmin_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetIamPolicy_(DatabaseAdmin_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TestIamPermissions_(DatabaseAdmin_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DatabaseAdmin::Stub::ListDatabases(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::ListDatabasesRequest& request, ::google::spanner::admin::database::v1::ListDatabasesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListDatabases_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::database::v1::ListDatabasesResponse>* DatabaseAdmin::Stub::AsyncListDatabasesRaw(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::ListDatabasesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::database::v1::ListDatabasesResponse>::Create(channel_.get(), cq, rpcmethod_ListDatabases_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::database::v1::ListDatabasesResponse>* DatabaseAdmin::Stub::PrepareAsyncListDatabasesRaw(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::ListDatabasesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::database::v1::ListDatabasesResponse>::Create(channel_.get(), cq, rpcmethod_ListDatabases_, context, request, false);
}

::grpc::Status DatabaseAdmin::Stub::CreateDatabase(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::CreateDatabaseRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateDatabase_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* DatabaseAdmin::Stub::AsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_CreateDatabase_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* DatabaseAdmin::Stub::PrepareAsyncCreateDatabaseRaw(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::CreateDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_CreateDatabase_, context, request, false);
}

::grpc::Status DatabaseAdmin::Stub::GetDatabase(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::GetDatabaseRequest& request, ::google::spanner::admin::database::v1::Database* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDatabase_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::database::v1::Database>* DatabaseAdmin::Stub::AsyncGetDatabaseRaw(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::GetDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::database::v1::Database>::Create(channel_.get(), cq, rpcmethod_GetDatabase_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::database::v1::Database>* DatabaseAdmin::Stub::PrepareAsyncGetDatabaseRaw(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::GetDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::database::v1::Database>::Create(channel_.get(), cq, rpcmethod_GetDatabase_, context, request, false);
}

::grpc::Status DatabaseAdmin::Stub::UpdateDatabaseDdl(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::UpdateDatabaseDdlRequest& request, ::google::longrunning::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateDatabaseDdl_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* DatabaseAdmin::Stub::AsyncUpdateDatabaseDdlRaw(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::UpdateDatabaseDdlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateDatabaseDdl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* DatabaseAdmin::Stub::PrepareAsyncUpdateDatabaseDdlRaw(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::UpdateDatabaseDdlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::longrunning::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateDatabaseDdl_, context, request, false);
}

::grpc::Status DatabaseAdmin::Stub::DropDatabase(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::DropDatabaseRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DropDatabase_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DatabaseAdmin::Stub::AsyncDropDatabaseRaw(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DropDatabase_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* DatabaseAdmin::Stub::PrepareAsyncDropDatabaseRaw(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::DropDatabaseRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_DropDatabase_, context, request, false);
}

::grpc::Status DatabaseAdmin::Stub::GetDatabaseDdl(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::GetDatabaseDdlRequest& request, ::google::spanner::admin::database::v1::GetDatabaseDdlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetDatabaseDdl_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::database::v1::GetDatabaseDdlResponse>* DatabaseAdmin::Stub::AsyncGetDatabaseDdlRaw(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::GetDatabaseDdlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::database::v1::GetDatabaseDdlResponse>::Create(channel_.get(), cq, rpcmethod_GetDatabaseDdl_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::spanner::admin::database::v1::GetDatabaseDdlResponse>* DatabaseAdmin::Stub::PrepareAsyncGetDatabaseDdlRaw(::grpc::ClientContext* context, const ::google::spanner::admin::database::v1::GetDatabaseDdlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::spanner::admin::database::v1::GetDatabaseDdlResponse>::Create(channel_.get(), cq, rpcmethod_GetDatabaseDdl_, context, request, false);
}

::grpc::Status DatabaseAdmin::Stub::SetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* DatabaseAdmin::Stub::AsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_SetIamPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* DatabaseAdmin::Stub::PrepareAsyncSetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::SetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_SetIamPolicy_, context, request, false);
}

::grpc::Status DatabaseAdmin::Stub::GetIamPolicy(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::google::iam::v1::Policy* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetIamPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* DatabaseAdmin::Stub::AsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_GetIamPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::Policy>* DatabaseAdmin::Stub::PrepareAsyncGetIamPolicyRaw(::grpc::ClientContext* context, const ::google::iam::v1::GetIamPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::Policy>::Create(channel_.get(), cq, rpcmethod_GetIamPolicy_, context, request, false);
}

::grpc::Status DatabaseAdmin::Stub::TestIamPermissions(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_TestIamPermissions_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* DatabaseAdmin::Stub::AsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::TestIamPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_TestIamPermissions_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::iam::v1::TestIamPermissionsResponse>* DatabaseAdmin::Stub::PrepareAsyncTestIamPermissionsRaw(::grpc::ClientContext* context, const ::google::iam::v1::TestIamPermissionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::iam::v1::TestIamPermissionsResponse>::Create(channel_.get(), cq, rpcmethod_TestIamPermissions_, context, request, false);
}

DatabaseAdmin::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseAdmin_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseAdmin::Service, ::google::spanner::admin::database::v1::ListDatabasesRequest, ::google::spanner::admin::database::v1::ListDatabasesResponse>(
          std::mem_fn(&DatabaseAdmin::Service::ListDatabases), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseAdmin_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseAdmin::Service, ::google::spanner::admin::database::v1::CreateDatabaseRequest, ::google::longrunning::Operation>(
          std::mem_fn(&DatabaseAdmin::Service::CreateDatabase), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseAdmin_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseAdmin::Service, ::google::spanner::admin::database::v1::GetDatabaseRequest, ::google::spanner::admin::database::v1::Database>(
          std::mem_fn(&DatabaseAdmin::Service::GetDatabase), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseAdmin_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseAdmin::Service, ::google::spanner::admin::database::v1::UpdateDatabaseDdlRequest, ::google::longrunning::Operation>(
          std::mem_fn(&DatabaseAdmin::Service::UpdateDatabaseDdl), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseAdmin_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseAdmin::Service, ::google::spanner::admin::database::v1::DropDatabaseRequest, ::google::protobuf::Empty>(
          std::mem_fn(&DatabaseAdmin::Service::DropDatabase), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseAdmin_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseAdmin::Service, ::google::spanner::admin::database::v1::GetDatabaseDdlRequest, ::google::spanner::admin::database::v1::GetDatabaseDdlResponse>(
          std::mem_fn(&DatabaseAdmin::Service::GetDatabaseDdl), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseAdmin_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseAdmin::Service, ::google::iam::v1::SetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&DatabaseAdmin::Service::SetIamPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseAdmin_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseAdmin::Service, ::google::iam::v1::GetIamPolicyRequest, ::google::iam::v1::Policy>(
          std::mem_fn(&DatabaseAdmin::Service::GetIamPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseAdmin_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseAdmin::Service, ::google::iam::v1::TestIamPermissionsRequest, ::google::iam::v1::TestIamPermissionsResponse>(
          std::mem_fn(&DatabaseAdmin::Service::TestIamPermissions), this)));
}

DatabaseAdmin::Service::~Service() {
}

::grpc::Status DatabaseAdmin::Service::ListDatabases(::grpc::ServerContext* context, const ::google::spanner::admin::database::v1::ListDatabasesRequest* request, ::google::spanner::admin::database::v1::ListDatabasesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseAdmin::Service::CreateDatabase(::grpc::ServerContext* context, const ::google::spanner::admin::database::v1::CreateDatabaseRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseAdmin::Service::GetDatabase(::grpc::ServerContext* context, const ::google::spanner::admin::database::v1::GetDatabaseRequest* request, ::google::spanner::admin::database::v1::Database* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseAdmin::Service::UpdateDatabaseDdl(::grpc::ServerContext* context, const ::google::spanner::admin::database::v1::UpdateDatabaseDdlRequest* request, ::google::longrunning::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseAdmin::Service::DropDatabase(::grpc::ServerContext* context, const ::google::spanner::admin::database::v1::DropDatabaseRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseAdmin::Service::GetDatabaseDdl(::grpc::ServerContext* context, const ::google::spanner::admin::database::v1::GetDatabaseDdlRequest* request, ::google::spanner::admin::database::v1::GetDatabaseDdlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseAdmin::Service::SetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::SetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseAdmin::Service::GetIamPolicy(::grpc::ServerContext* context, const ::google::iam::v1::GetIamPolicyRequest* request, ::google::iam::v1::Policy* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseAdmin::Service::TestIamPermissions(::grpc::ServerContext* context, const ::google::iam::v1::TestIamPermissionsRequest* request, ::google::iam::v1::TestIamPermissionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace spanner
}  // namespace admin
}  // namespace database
}  // namespace v1

