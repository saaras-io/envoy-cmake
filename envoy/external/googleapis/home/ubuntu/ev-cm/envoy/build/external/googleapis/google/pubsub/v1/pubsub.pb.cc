// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto

#include "google/pubsub/v1/pubsub.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace pubsub {
namespace v1 {
class Topic_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Topic_LabelsEntry_DoNotUse>
      _instance;
} _Topic_LabelsEntry_DoNotUse_default_instance_;
class TopicDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Topic>
      _instance;
} _Topic_default_instance_;
class PubsubMessage_AttributesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PubsubMessage_AttributesEntry_DoNotUse>
      _instance;
} _PubsubMessage_AttributesEntry_DoNotUse_default_instance_;
class PubsubMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PubsubMessage>
      _instance;
} _PubsubMessage_default_instance_;
class GetTopicRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTopicRequest>
      _instance;
} _GetTopicRequest_default_instance_;
class UpdateTopicRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateTopicRequest>
      _instance;
} _UpdateTopicRequest_default_instance_;
class PublishRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishRequest>
      _instance;
} _PublishRequest_default_instance_;
class PublishResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishResponse>
      _instance;
} _PublishResponse_default_instance_;
class ListTopicsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListTopicsRequest>
      _instance;
} _ListTopicsRequest_default_instance_;
class ListTopicsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListTopicsResponse>
      _instance;
} _ListTopicsResponse_default_instance_;
class ListTopicSubscriptionsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListTopicSubscriptionsRequest>
      _instance;
} _ListTopicSubscriptionsRequest_default_instance_;
class ListTopicSubscriptionsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListTopicSubscriptionsResponse>
      _instance;
} _ListTopicSubscriptionsResponse_default_instance_;
class DeleteTopicRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteTopicRequest>
      _instance;
} _DeleteTopicRequest_default_instance_;
class Subscription_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Subscription_LabelsEntry_DoNotUse>
      _instance;
} _Subscription_LabelsEntry_DoNotUse_default_instance_;
class SubscriptionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Subscription>
      _instance;
} _Subscription_default_instance_;
class PushConfig_AttributesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PushConfig_AttributesEntry_DoNotUse>
      _instance;
} _PushConfig_AttributesEntry_DoNotUse_default_instance_;
class PushConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PushConfig>
      _instance;
} _PushConfig_default_instance_;
class ReceivedMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReceivedMessage>
      _instance;
} _ReceivedMessage_default_instance_;
class GetSubscriptionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSubscriptionRequest>
      _instance;
} _GetSubscriptionRequest_default_instance_;
class UpdateSubscriptionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateSubscriptionRequest>
      _instance;
} _UpdateSubscriptionRequest_default_instance_;
class ListSubscriptionsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListSubscriptionsRequest>
      _instance;
} _ListSubscriptionsRequest_default_instance_;
class ListSubscriptionsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListSubscriptionsResponse>
      _instance;
} _ListSubscriptionsResponse_default_instance_;
class DeleteSubscriptionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteSubscriptionRequest>
      _instance;
} _DeleteSubscriptionRequest_default_instance_;
class ModifyPushConfigRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModifyPushConfigRequest>
      _instance;
} _ModifyPushConfigRequest_default_instance_;
class PullRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PullRequest>
      _instance;
} _PullRequest_default_instance_;
class PullResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PullResponse>
      _instance;
} _PullResponse_default_instance_;
class ModifyAckDeadlineRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ModifyAckDeadlineRequest>
      _instance;
} _ModifyAckDeadlineRequest_default_instance_;
class AcknowledgeRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AcknowledgeRequest>
      _instance;
} _AcknowledgeRequest_default_instance_;
class StreamingPullRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamingPullRequest>
      _instance;
} _StreamingPullRequest_default_instance_;
class StreamingPullResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StreamingPullResponse>
      _instance;
} _StreamingPullResponse_default_instance_;
class CreateSnapshotRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateSnapshotRequest>
      _instance;
} _CreateSnapshotRequest_default_instance_;
class UpdateSnapshotRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateSnapshotRequest>
      _instance;
} _UpdateSnapshotRequest_default_instance_;
class Snapshot_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Snapshot_LabelsEntry_DoNotUse>
      _instance;
} _Snapshot_LabelsEntry_DoNotUse_default_instance_;
class SnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Snapshot>
      _instance;
} _Snapshot_default_instance_;
class ListSnapshotsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListSnapshotsRequest>
      _instance;
} _ListSnapshotsRequest_default_instance_;
class ListSnapshotsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListSnapshotsResponse>
      _instance;
} _ListSnapshotsResponse_default_instance_;
class DeleteSnapshotRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteSnapshotRequest>
      _instance;
} _DeleteSnapshotRequest_default_instance_;
class SeekRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SeekRequest>
      _instance;
  const ::google::protobuf::Timestamp* time_;
  ::google::protobuf::internal::ArenaStringPtr snapshot_;
} _SeekRequest_default_instance_;
class SeekResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SeekResponse>
      _instance;
} _SeekResponse_default_instance_;
}  // namespace v1
}  // namespace pubsub
}  // namespace google
namespace protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto {
void InitDefaultsTopic_LabelsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_Topic_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse();
  }
  ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsTopic_LabelsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTopic_LabelsEntry_DoNotUseImpl);
}

void InitDefaultsTopicImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsTopic_LabelsEntry_DoNotUse();
  {
    void* ptr = &::google::pubsub::v1::_Topic_default_instance_;
    new (ptr) ::google::pubsub::v1::Topic();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::Topic::InitAsDefaultInstance();
}

void InitDefaultsTopic() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTopicImpl);
}

void InitDefaultsPubsubMessage_AttributesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_PubsubMessage_AttributesEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse();
  }
  ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsPubsubMessage_AttributesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPubsubMessage_AttributesEntry_DoNotUseImpl);
}

void InitDefaultsPubsubMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPubsubMessage_AttributesEntry_DoNotUse();
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::google::pubsub::v1::_PubsubMessage_default_instance_;
    new (ptr) ::google::pubsub::v1::PubsubMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PubsubMessage::InitAsDefaultInstance();
}

void InitDefaultsPubsubMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPubsubMessageImpl);
}

void InitDefaultsGetTopicRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_GetTopicRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::GetTopicRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::GetTopicRequest::InitAsDefaultInstance();
}

void InitDefaultsGetTopicRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetTopicRequestImpl);
}

void InitDefaultsUpdateTopicRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsTopic();
  protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::InitDefaultsFieldMask();
  {
    void* ptr = &::google::pubsub::v1::_UpdateTopicRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::UpdateTopicRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::UpdateTopicRequest::InitAsDefaultInstance();
}

void InitDefaultsUpdateTopicRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateTopicRequestImpl);
}

void InitDefaultsPublishRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPubsubMessage();
  {
    void* ptr = &::google::pubsub::v1::_PublishRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::PublishRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PublishRequest::InitAsDefaultInstance();
}

void InitDefaultsPublishRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishRequestImpl);
}

void InitDefaultsPublishResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_PublishResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::PublishResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PublishResponse::InitAsDefaultInstance();
}

void InitDefaultsPublishResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishResponseImpl);
}

void InitDefaultsListTopicsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_ListTopicsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicsRequest::InitAsDefaultInstance();
}

void InitDefaultsListTopicsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListTopicsRequestImpl);
}

void InitDefaultsListTopicsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsTopic();
  {
    void* ptr = &::google::pubsub::v1::_ListTopicsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicsResponse::InitAsDefaultInstance();
}

void InitDefaultsListTopicsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListTopicsResponseImpl);
}

void InitDefaultsListTopicSubscriptionsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_ListTopicSubscriptionsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicSubscriptionsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicSubscriptionsRequest::InitAsDefaultInstance();
}

void InitDefaultsListTopicSubscriptionsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListTopicSubscriptionsRequestImpl);
}

void InitDefaultsListTopicSubscriptionsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_ListTopicSubscriptionsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicSubscriptionsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicSubscriptionsResponse::InitAsDefaultInstance();
}

void InitDefaultsListTopicSubscriptionsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListTopicSubscriptionsResponseImpl);
}

void InitDefaultsDeleteTopicRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_DeleteTopicRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::DeleteTopicRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::DeleteTopicRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteTopicRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteTopicRequestImpl);
}

void InitDefaultsSubscription_LabelsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_Subscription_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse();
  }
  ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSubscription_LabelsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSubscription_LabelsEntry_DoNotUseImpl);
}

void InitDefaultsSubscriptionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPushConfig();
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSubscription_LabelsEntry_DoNotUse();
  {
    void* ptr = &::google::pubsub::v1::_Subscription_default_instance_;
    new (ptr) ::google::pubsub::v1::Subscription();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::Subscription::InitAsDefaultInstance();
}

void InitDefaultsSubscription() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSubscriptionImpl);
}

void InitDefaultsPushConfig_AttributesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_PushConfig_AttributesEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse();
  }
  ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsPushConfig_AttributesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPushConfig_AttributesEntry_DoNotUseImpl);
}

void InitDefaultsPushConfigImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPushConfig_AttributesEntry_DoNotUse();
  {
    void* ptr = &::google::pubsub::v1::_PushConfig_default_instance_;
    new (ptr) ::google::pubsub::v1::PushConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PushConfig::InitAsDefaultInstance();
}

void InitDefaultsPushConfig() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPushConfigImpl);
}

void InitDefaultsReceivedMessageImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPubsubMessage();
  {
    void* ptr = &::google::pubsub::v1::_ReceivedMessage_default_instance_;
    new (ptr) ::google::pubsub::v1::ReceivedMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ReceivedMessage::InitAsDefaultInstance();
}

void InitDefaultsReceivedMessage() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReceivedMessageImpl);
}

void InitDefaultsGetSubscriptionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_GetSubscriptionRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::GetSubscriptionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::GetSubscriptionRequest::InitAsDefaultInstance();
}

void InitDefaultsGetSubscriptionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetSubscriptionRequestImpl);
}

void InitDefaultsUpdateSubscriptionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSubscription();
  protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::InitDefaultsFieldMask();
  {
    void* ptr = &::google::pubsub::v1::_UpdateSubscriptionRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::UpdateSubscriptionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::UpdateSubscriptionRequest::InitAsDefaultInstance();
}

void InitDefaultsUpdateSubscriptionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateSubscriptionRequestImpl);
}

void InitDefaultsListSubscriptionsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_ListSubscriptionsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListSubscriptionsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListSubscriptionsRequest::InitAsDefaultInstance();
}

void InitDefaultsListSubscriptionsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListSubscriptionsRequestImpl);
}

void InitDefaultsListSubscriptionsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSubscription();
  {
    void* ptr = &::google::pubsub::v1::_ListSubscriptionsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListSubscriptionsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListSubscriptionsResponse::InitAsDefaultInstance();
}

void InitDefaultsListSubscriptionsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListSubscriptionsResponseImpl);
}

void InitDefaultsDeleteSubscriptionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_DeleteSubscriptionRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::DeleteSubscriptionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::DeleteSubscriptionRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteSubscriptionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteSubscriptionRequestImpl);
}

void InitDefaultsModifyPushConfigRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPushConfig();
  {
    void* ptr = &::google::pubsub::v1::_ModifyPushConfigRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ModifyPushConfigRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ModifyPushConfigRequest::InitAsDefaultInstance();
}

void InitDefaultsModifyPushConfigRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsModifyPushConfigRequestImpl);
}

void InitDefaultsPullRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_PullRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::PullRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PullRequest::InitAsDefaultInstance();
}

void InitDefaultsPullRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPullRequestImpl);
}

void InitDefaultsPullResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsReceivedMessage();
  {
    void* ptr = &::google::pubsub::v1::_PullResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::PullResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PullResponse::InitAsDefaultInstance();
}

void InitDefaultsPullResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPullResponseImpl);
}

void InitDefaultsModifyAckDeadlineRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_ModifyAckDeadlineRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ModifyAckDeadlineRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ModifyAckDeadlineRequest::InitAsDefaultInstance();
}

void InitDefaultsModifyAckDeadlineRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsModifyAckDeadlineRequestImpl);
}

void InitDefaultsAcknowledgeRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_AcknowledgeRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::AcknowledgeRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::AcknowledgeRequest::InitAsDefaultInstance();
}

void InitDefaultsAcknowledgeRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsAcknowledgeRequestImpl);
}

void InitDefaultsStreamingPullRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_StreamingPullRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::StreamingPullRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::StreamingPullRequest::InitAsDefaultInstance();
}

void InitDefaultsStreamingPullRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamingPullRequestImpl);
}

void InitDefaultsStreamingPullResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsReceivedMessage();
  {
    void* ptr = &::google::pubsub::v1::_StreamingPullResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::StreamingPullResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::StreamingPullResponse::InitAsDefaultInstance();
}

void InitDefaultsStreamingPullResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStreamingPullResponseImpl);
}

void InitDefaultsCreateSnapshotRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_CreateSnapshotRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::CreateSnapshotRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::CreateSnapshotRequest::InitAsDefaultInstance();
}

void InitDefaultsCreateSnapshotRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateSnapshotRequestImpl);
}

void InitDefaultsUpdateSnapshotRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSnapshot();
  protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::InitDefaultsFieldMask();
  {
    void* ptr = &::google::pubsub::v1::_UpdateSnapshotRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::UpdateSnapshotRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::UpdateSnapshotRequest::InitAsDefaultInstance();
}

void InitDefaultsUpdateSnapshotRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateSnapshotRequestImpl);
}

void InitDefaultsSnapshot_LabelsEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_Snapshot_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse();
  }
  ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsSnapshot_LabelsEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSnapshot_LabelsEntry_DoNotUseImpl);
}

void InitDefaultsSnapshotImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSnapshot_LabelsEntry_DoNotUse();
  {
    void* ptr = &::google::pubsub::v1::_Snapshot_default_instance_;
    new (ptr) ::google::pubsub::v1::Snapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::Snapshot::InitAsDefaultInstance();
}

void InitDefaultsSnapshot() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSnapshotImpl);
}

void InitDefaultsListSnapshotsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_ListSnapshotsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListSnapshotsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListSnapshotsRequest::InitAsDefaultInstance();
}

void InitDefaultsListSnapshotsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListSnapshotsRequestImpl);
}

void InitDefaultsListSnapshotsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSnapshot();
  {
    void* ptr = &::google::pubsub::v1::_ListSnapshotsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListSnapshotsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListSnapshotsResponse::InitAsDefaultInstance();
}

void InitDefaultsListSnapshotsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListSnapshotsResponseImpl);
}

void InitDefaultsDeleteSnapshotRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_DeleteSnapshotRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::DeleteSnapshotRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::DeleteSnapshotRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteSnapshotRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteSnapshotRequestImpl);
}

void InitDefaultsSeekRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::google::pubsub::v1::_SeekRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::SeekRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::SeekRequest::InitAsDefaultInstance();
}

void InitDefaultsSeekRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSeekRequestImpl);
}

void InitDefaultsSeekResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::pubsub::v1::_SeekResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::SeekResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::SeekResponse::InitAsDefaultInstance();
}

void InitDefaultsSeekResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSeekResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[39];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Topic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Topic, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Topic, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, attributes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, message_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, publish_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::GetTopicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::GetTopicRequest, topic_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::UpdateTopicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::UpdateTopicRequest, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::UpdateTopicRequest, update_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PublishRequest, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PublishRequest, messages_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PublishResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PublishResponse, message_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicsRequest, project_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicsRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicsRequest, page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicsResponse, topics_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsRequest, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsRequest, page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsResponse, subscriptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::DeleteTopicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::DeleteTopicRequest, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Subscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Subscription, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Subscription, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Subscription, push_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Subscription, ack_deadline_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Subscription, retain_acked_messages_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Subscription, message_retention_duration_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Subscription, labels_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PushConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PushConfig, push_endpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PushConfig, attributes_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ReceivedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ReceivedMessage, ack_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ReceivedMessage, message_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::GetSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::GetSubscriptionRequest, subscription_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::UpdateSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::UpdateSubscriptionRequest, subscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::UpdateSubscriptionRequest, update_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsRequest, project_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsRequest, page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsResponse, subscriptions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::DeleteSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::DeleteSubscriptionRequest, subscription_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ModifyPushConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ModifyPushConfigRequest, subscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ModifyPushConfigRequest, push_config_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PullRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PullRequest, subscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PullRequest, return_immediately_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PullRequest, max_messages_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PullResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::PullResponse, received_messages_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ModifyAckDeadlineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ModifyAckDeadlineRequest, subscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ModifyAckDeadlineRequest, ack_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ModifyAckDeadlineRequest, ack_deadline_seconds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::AcknowledgeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::AcknowledgeRequest, subscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::AcknowledgeRequest, ack_ids_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, subscription_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, ack_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, modify_deadline_seconds_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, modify_deadline_ack_ids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, stream_ack_deadline_seconds_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::StreamingPullResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::StreamingPullResponse, received_messages_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest, subscription_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::UpdateSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::UpdateSnapshotRequest, snapshot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::UpdateSnapshotRequest, update_mask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Snapshot, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Snapshot, topic_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Snapshot, expire_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::Snapshot, labels_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsRequest, project_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsRequest, page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsResponse, snapshots_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::DeleteSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::DeleteSnapshotRequest, snapshot_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::SeekRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::SeekRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::SeekRequest, subscription_),
  offsetof(::google::pubsub::v1::SeekRequestDefaultTypeInternal, time_),
  offsetof(::google::pubsub::v1::SeekRequestDefaultTypeInternal, snapshot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::SeekRequest, target_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::pubsub::v1::SeekResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse)},
  { 9, -1, sizeof(::google::pubsub::v1::Topic)},
  { 16, 23, sizeof(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse)},
  { 25, -1, sizeof(::google::pubsub::v1::PubsubMessage)},
  { 34, -1, sizeof(::google::pubsub::v1::GetTopicRequest)},
  { 40, -1, sizeof(::google::pubsub::v1::UpdateTopicRequest)},
  { 47, -1, sizeof(::google::pubsub::v1::PublishRequest)},
  { 54, -1, sizeof(::google::pubsub::v1::PublishResponse)},
  { 60, -1, sizeof(::google::pubsub::v1::ListTopicsRequest)},
  { 68, -1, sizeof(::google::pubsub::v1::ListTopicsResponse)},
  { 75, -1, sizeof(::google::pubsub::v1::ListTopicSubscriptionsRequest)},
  { 83, -1, sizeof(::google::pubsub::v1::ListTopicSubscriptionsResponse)},
  { 90, -1, sizeof(::google::pubsub::v1::DeleteTopicRequest)},
  { 96, 103, sizeof(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse)},
  { 105, -1, sizeof(::google::pubsub::v1::Subscription)},
  { 117, 124, sizeof(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse)},
  { 126, -1, sizeof(::google::pubsub::v1::PushConfig)},
  { 133, -1, sizeof(::google::pubsub::v1::ReceivedMessage)},
  { 140, -1, sizeof(::google::pubsub::v1::GetSubscriptionRequest)},
  { 146, -1, sizeof(::google::pubsub::v1::UpdateSubscriptionRequest)},
  { 153, -1, sizeof(::google::pubsub::v1::ListSubscriptionsRequest)},
  { 161, -1, sizeof(::google::pubsub::v1::ListSubscriptionsResponse)},
  { 168, -1, sizeof(::google::pubsub::v1::DeleteSubscriptionRequest)},
  { 174, -1, sizeof(::google::pubsub::v1::ModifyPushConfigRequest)},
  { 181, -1, sizeof(::google::pubsub::v1::PullRequest)},
  { 189, -1, sizeof(::google::pubsub::v1::PullResponse)},
  { 195, -1, sizeof(::google::pubsub::v1::ModifyAckDeadlineRequest)},
  { 203, -1, sizeof(::google::pubsub::v1::AcknowledgeRequest)},
  { 210, -1, sizeof(::google::pubsub::v1::StreamingPullRequest)},
  { 220, -1, sizeof(::google::pubsub::v1::StreamingPullResponse)},
  { 226, -1, sizeof(::google::pubsub::v1::CreateSnapshotRequest)},
  { 233, -1, sizeof(::google::pubsub::v1::UpdateSnapshotRequest)},
  { 240, 247, sizeof(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse)},
  { 249, -1, sizeof(::google::pubsub::v1::Snapshot)},
  { 258, -1, sizeof(::google::pubsub::v1::ListSnapshotsRequest)},
  { 266, -1, sizeof(::google::pubsub::v1::ListSnapshotsResponse)},
  { 273, -1, sizeof(::google::pubsub::v1::DeleteSnapshotRequest)},
  { 279, -1, sizeof(::google::pubsub::v1::SeekRequest)},
  { 288, -1, sizeof(::google::pubsub::v1::SeekResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_Topic_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_Topic_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PubsubMessage_AttributesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PubsubMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_GetTopicRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_UpdateTopicRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PublishRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PublishResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListTopicsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListTopicsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListTopicSubscriptionsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListTopicSubscriptionsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_DeleteTopicRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_Subscription_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_Subscription_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PushConfig_AttributesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PushConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ReceivedMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_GetSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_UpdateSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListSubscriptionsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListSubscriptionsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_DeleteSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ModifyPushConfigRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PullRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_PullResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ModifyAckDeadlineRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_AcknowledgeRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_StreamingPullRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_StreamingPullResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_CreateSnapshotRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_UpdateSnapshotRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_Snapshot_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_Snapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListSnapshotsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_ListSnapshotsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_DeleteSnapshotRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_SeekRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::pubsub::v1::_SeekResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/pubsub/v1/pubsub.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 39);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035google/pubsub/v1/pubsub.proto\022\020google."
      "pubsub.v1\032\034google/api/annotations.proto\032"
      "\036google/protobuf/duration.proto\032\033google/"
      "protobuf/empty.proto\032 google/protobuf/fi"
      "eld_mask.proto\032\037google/protobuf/timestam"
      "p.proto\"y\n\005Topic\022\014\n\004name\030\001 \001(\t\0223\n\006labels"
      "\030\002 \003(\0132#.google.pubsub.v1.Topic.LabelsEn"
      "try\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
      "\030\002 \001(\t:\0028\001\"\333\001\n\rPubsubMessage\022\014\n\004data\030\001 \001"
      "(\014\022C\n\nattributes\030\002 \003(\0132/.google.pubsub.v"
      "1.PubsubMessage.AttributesEntry\022\022\n\nmessa"
      "ge_id\030\003 \001(\t\0220\n\014publish_time\030\004 \001(\0132\032.goog"
      "le.protobuf.Timestamp\0321\n\017AttributesEntry"
      "\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\" \n\017GetT"
      "opicRequest\022\r\n\005topic\030\001 \001(\t\"m\n\022UpdateTopi"
      "cRequest\022&\n\005topic\030\001 \001(\0132\027.google.pubsub."
      "v1.Topic\022/\n\013update_mask\030\002 \001(\0132\032.google.p"
      "rotobuf.FieldMask\"R\n\016PublishRequest\022\r\n\005t"
      "opic\030\001 \001(\t\0221\n\010messages\030\002 \003(\0132\037.google.pu"
      "bsub.v1.PubsubMessage\"&\n\017PublishResponse"
      "\022\023\n\013message_ids\030\001 \003(\t\"K\n\021ListTopicsReque"
      "st\022\017\n\007project\030\001 \001(\t\022\021\n\tpage_size\030\002 \001(\005\022\022"
      "\n\npage_token\030\003 \001(\t\"V\n\022ListTopicsResponse"
      "\022\'\n\006topics\030\001 \003(\0132\027.google.pubsub.v1.Topi"
      "c\022\027\n\017next_page_token\030\002 \001(\t\"U\n\035ListTopicS"
      "ubscriptionsRequest\022\r\n\005topic\030\001 \001(\t\022\021\n\tpa"
      "ge_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"P\n\036Lis"
      "tTopicSubscriptionsResponse\022\025\n\rsubscript"
      "ions\030\001 \003(\t\022\027\n\017next_page_token\030\002 \001(\t\"#\n\022D"
      "eleteTopicRequest\022\r\n\005topic\030\001 \001(\t\"\305\002\n\014Sub"
      "scription\022\014\n\004name\030\001 \001(\t\022\r\n\005topic\030\002 \001(\t\0221"
      "\n\013push_config\030\004 \001(\0132\034.google.pubsub.v1.P"
      "ushConfig\022\034\n\024ack_deadline_seconds\030\005 \001(\005\022"
      "\035\n\025retain_acked_messages\030\007 \001(\010\022=\n\032messag"
      "e_retention_duration\030\010 \001(\0132\031.google.prot"
      "obuf.Duration\022:\n\006labels\030\t \003(\0132*.google.p"
      "ubsub.v1.Subscription.LabelsEntry\032-\n\013Lab"
      "elsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
      "\"\230\001\n\nPushConfig\022\025\n\rpush_endpoint\030\001 \001(\t\022@"
      "\n\nattributes\030\002 \003(\0132,.google.pubsub.v1.Pu"
      "shConfig.AttributesEntry\0321\n\017AttributesEn"
      "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"S\n\017R"
      "eceivedMessage\022\016\n\006ack_id\030\001 \001(\t\0220\n\007messag"
      "e\030\002 \001(\0132\037.google.pubsub.v1.PubsubMessage"
      "\".\n\026GetSubscriptionRequest\022\024\n\014subscripti"
      "on\030\001 \001(\t\"\202\001\n\031UpdateSubscriptionRequest\0224"
      "\n\014subscription\030\001 \001(\0132\036.google.pubsub.v1."
      "Subscription\022/\n\013update_mask\030\002 \001(\0132\032.goog"
      "le.protobuf.FieldMask\"R\n\030ListSubscriptio"
      "nsRequest\022\017\n\007project\030\001 \001(\t\022\021\n\tpage_size\030"
      "\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"k\n\031ListSubscri"
      "ptionsResponse\0225\n\rsubscriptions\030\001 \003(\0132\036."
      "google.pubsub.v1.Subscription\022\027\n\017next_pa"
      "ge_token\030\002 \001(\t\"1\n\031DeleteSubscriptionRequ"
      "est\022\024\n\014subscription\030\001 \001(\t\"b\n\027ModifyPushC"
      "onfigRequest\022\024\n\014subscription\030\001 \001(\t\0221\n\013pu"
      "sh_config\030\002 \001(\0132\034.google.pubsub.v1.PushC"
      "onfig\"U\n\013PullRequest\022\024\n\014subscription\030\001 \001"
      "(\t\022\032\n\022return_immediately\030\002 \001(\010\022\024\n\014max_me"
      "ssages\030\003 \001(\005\"L\n\014PullResponse\022<\n\021received"
      "_messages\030\001 \003(\0132!.google.pubsub.v1.Recei"
      "vedMessage\"_\n\030ModifyAckDeadlineRequest\022\024"
      "\n\014subscription\030\001 \001(\t\022\017\n\007ack_ids\030\004 \003(\t\022\034\n"
      "\024ack_deadline_seconds\030\003 \001(\005\";\n\022Acknowled"
      "geRequest\022\024\n\014subscription\030\001 \001(\t\022\017\n\007ack_i"
      "ds\030\002 \003(\t\"\244\001\n\024StreamingPullRequest\022\024\n\014sub"
      "scription\030\001 \001(\t\022\017\n\007ack_ids\030\002 \003(\t\022\037\n\027modi"
      "fy_deadline_seconds\030\003 \003(\005\022\037\n\027modify_dead"
      "line_ack_ids\030\004 \003(\t\022#\n\033stream_ack_deadlin"
      "e_seconds\030\005 \001(\005\"U\n\025StreamingPullResponse"
      "\022<\n\021received_messages\030\001 \003(\0132!.google.pub"
      "sub.v1.ReceivedMessage\";\n\025CreateSnapshot"
      "Request\022\014\n\004name\030\001 \001(\t\022\024\n\014subscription\030\002 "
      "\001(\t\"v\n\025UpdateSnapshotRequest\022,\n\010snapshot"
      "\030\001 \001(\0132\032.google.pubsub.v1.Snapshot\022/\n\013up"
      "date_mask\030\002 \001(\0132\032.google.protobuf.FieldM"
      "ask\"\277\001\n\010Snapshot\022\014\n\004name\030\001 \001(\t\022\r\n\005topic\030"
      "\002 \001(\t\022/\n\013expire_time\030\003 \001(\0132\032.google.prot"
      "obuf.Timestamp\0226\n\006labels\030\004 \003(\0132&.google."
      "pubsub.v1.Snapshot.LabelsEntry\032-\n\013Labels"
      "Entry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"N\n"
      "\024ListSnapshotsRequest\022\017\n\007project\030\001 \001(\t\022\021"
      "\n\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"_\n"
      "\025ListSnapshotsResponse\022-\n\tsnapshots\030\001 \003("
      "\0132\032.google.pubsub.v1.Snapshot\022\027\n\017next_pa"
      "ge_token\030\002 \001(\t\")\n\025DeleteSnapshotRequest\022"
      "\020\n\010snapshot\030\001 \001(\t\"m\n\013SeekRequest\022\024\n\014subs"
      "cription\030\001 \001(\t\022*\n\004time\030\002 \001(\0132\032.google.pr"
      "otobuf.TimestampH\000\022\022\n\010snapshot\030\003 \001(\tH\000B\010"
      "\n\006target\"\016\n\014SeekResponse2\367\020\n\nSubscriber\022"
      "\206\001\n\022CreateSubscription\022\036.google.pubsub.v"
      "1.Subscription\032\036.google.pubsub.v1.Subscr"
      "iption\"0\202\323\344\223\002*\032%/v1/{name=projects/*/sub"
      "scriptions/*}:\001*\022\222\001\n\017GetSubscription\022(.g"
      "oogle.pubsub.v1.GetSubscriptionRequest\032\036"
      ".google.pubsub.v1.Subscription\"5\202\323\344\223\002/\022-"
      "/v1/{subscription=projects/*/subscriptio"
      "ns/*}\022\240\001\n\022UpdateSubscription\022+.google.pu"
      "bsub.v1.UpdateSubscriptionRequest\032\036.goog"
      "le.pubsub.v1.Subscription\"=\202\323\344\223\002722/v1/{"
      "subscription.name=projects/*/subscriptio"
      "ns/*}:\001*\022\234\001\n\021ListSubscriptions\022*.google."
      "pubsub.v1.ListSubscriptionsRequest\032+.goo"
      "gle.pubsub.v1.ListSubscriptionsResponse\""
      ".\202\323\344\223\002(\022&/v1/{project=projects/*}/subscr"
      "iptions\022\220\001\n\022DeleteSubscription\022+.google."
      "pubsub.v1.DeleteSubscriptionRequest\032\026.go"
      "ogle.protobuf.Empty\"5\202\323\344\223\002/*-/v1/{subscr"
      "iption=projects/*/subscriptions/*}\022\243\001\n\021M"
      "odifyAckDeadline\022*.google.pubsub.v1.Modi"
      "fyAckDeadlineRequest\032\026.google.protobuf.E"
      "mpty\"J\202\323\344\223\002D\"\?/v1/{subscription=projects"
      "/*/subscriptions/*}:modifyAckDeadline:\001*"
      "\022\221\001\n\013Acknowledge\022$.google.pubsub.v1.Ackn"
      "owledgeRequest\032\026.google.protobuf.Empty\"D"
      "\202\323\344\223\002>\"9/v1/{subscription=projects/*/sub"
      "scriptions/*}:acknowledge:\001*\022\204\001\n\004Pull\022\035."
      "google.pubsub.v1.PullRequest\032\036.google.pu"
      "bsub.v1.PullResponse\"=\202\323\344\223\0027\"2/v1/{subsc"
      "ription=projects/*/subscriptions/*}:pull"
      ":\001*\022d\n\rStreamingPull\022&.google.pubsub.v1."
      "StreamingPullRequest\032\'.google.pubsub.v1."
      "StreamingPullResponse(\0010\001\022\240\001\n\020ModifyPush"
      "Config\022).google.pubsub.v1.ModifyPushConf"
      "igRequest\032\026.google.protobuf.Empty\"I\202\323\344\223\002"
      "C\">/v1/{subscription=projects/*/subscrip"
      "tions/*}:modifyPushConfig:\001*\022\214\001\n\rListSna"
      "pshots\022&.google.pubsub.v1.ListSnapshotsR"
      "equest\032\'.google.pubsub.v1.ListSnapshotsR"
      "esponse\"*\202\323\344\223\002$\022\"/v1/{project=projects/*"
      "}/snapshots\022\203\001\n\016CreateSnapshot\022\'.google."
      "pubsub.v1.CreateSnapshotRequest\032\032.google"
      ".pubsub.v1.Snapshot\",\202\323\344\223\002&\032!/v1/{name=p"
      "rojects/*/snapshots/*}:\001*\022\214\001\n\016UpdateSnap"
      "shot\022\'.google.pubsub.v1.UpdateSnapshotRe"
      "quest\032\032.google.pubsub.v1.Snapshot\"5\202\323\344\223\002"
      "/2*/v1/{snapshot.name=projects/*/snapsho"
      "ts/*}:\001*\022\200\001\n\016DeleteSnapshot\022\'.google.pub"
      "sub.v1.DeleteSnapshotRequest\032\026.google.pr"
      "otobuf.Empty\"-\202\323\344\223\002\'*%/v1/{snapshot=proj"
      "ects/*/snapshots/*}\022\204\001\n\004Seek\022\035.google.pu"
      "bsub.v1.SeekRequest\032\036.google.pubsub.v1.S"
      "eekResponse\"=\202\323\344\223\0027\"2/v1/{subscription=p"
      "rojects/*/subscriptions/*}:seek:\001*2\232\007\n\tP"
      "ublisher\022j\n\013CreateTopic\022\027.google.pubsub."
      "v1.Topic\032\027.google.pubsub.v1.Topic\")\202\323\344\223\002"
      "#\032\036/v1/{name=projects/*/topics/*}:\001*\022}\n\013"
      "UpdateTopic\022$.google.pubsub.v1.UpdateTop"
      "icRequest\032\027.google.pubsub.v1.Topic\"/\202\323\344\223"
      "\002)2$/v1/{topic.name=projects/*/topics/*}"
      ":\001*\022\202\001\n\007Publish\022 .google.pubsub.v1.Publi"
      "shRequest\032!.google.pubsub.v1.PublishResp"
      "onse\"2\202\323\344\223\002,\"\'/v1/{topic=projects/*/topi"
      "cs/*}:publish:\001*\022o\n\010GetTopic\022!.google.pu"
      "bsub.v1.GetTopicRequest\032\027.google.pubsub."
      "v1.Topic\"\'\202\323\344\223\002!\022\037/v1/{topic=projects/*/"
      "topics/*}\022\200\001\n\nListTopics\022#.google.pubsub"
      ".v1.ListTopicsRequest\032$.google.pubsub.v1"
      ".ListTopicsResponse\"\'\202\323\344\223\002!\022\037/v1/{projec"
      "t=projects/*}/topics\022\262\001\n\026ListTopicSubscr"
      "iptions\022/.google.pubsub.v1.ListTopicSubs"
      "criptionsRequest\0320.google.pubsub.v1.List"
      "TopicSubscriptionsResponse\"5\202\323\344\223\002/\022-/v1/"
      "{topic=projects/*/topics/*}/subscription"
      "s\022t\n\013DeleteTopic\022$.google.pubsub.v1.Dele"
      "teTopicRequest\032\026.google.protobuf.Empty\"\'"
      "\202\323\344\223\002!*\037/v1/{topic=projects/*/topics/*}B"
      "y\n\024com.google.pubsub.v1B\013PubsubProtoP\001Z6"
      "google.golang.org/genproto/googleapis/pu"
      "bsub/v1;pubsub\370\001\001\252\002\026Google.Cloud.PubSub."
      "V1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 6810);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/pubsub/v1/pubsub.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto
namespace google {
namespace pubsub {
namespace v1 {

// ===================================================================

Topic_LabelsEntry_DoNotUse::Topic_LabelsEntry_DoNotUse() {}
Topic_LabelsEntry_DoNotUse::Topic_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Topic_LabelsEntry_DoNotUse::MergeFrom(const Topic_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Topic_LabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[0];
}
void Topic_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Topic::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Topic::kNameFieldNumber;
const int Topic::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Topic::Topic()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsTopic();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.Topic)
}
Topic::Topic(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsTopic();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.Topic)
}
Topic::Topic(const Topic& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.Topic)
}

void Topic::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Topic::~Topic() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.Topic)
  SharedDtor();
}

void Topic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Topic::ArenaDtor(void* object) {
  Topic* _this = reinterpret_cast< Topic* >(object);
  (void)_this;
}
void Topic::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Topic::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Topic::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Topic& Topic::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsTopic();
  return *internal_default_instance();
}

Topic* Topic::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Topic>(arena);
}

void Topic::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.Topic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool Topic::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.Topic)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Topic.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          Topic_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Topic_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Topic.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Topic.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.Topic)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.Topic)
  return false;
#undef DO_
}

void Topic::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.Topic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Topic.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Topic.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Topic.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Topic_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Topic_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.Topic)
}

::google::protobuf::uint8* Topic::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.Topic)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Topic.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // map<string, string> labels = 2;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Topic.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Topic.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Topic_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Topic_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.Topic)
  return target;
}

size_t Topic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.Topic)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> labels = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<Topic_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Topic::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.Topic)
  GOOGLE_DCHECK_NE(&from, this);
  const Topic* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Topic>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.Topic)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.Topic)
    MergeFrom(*source);
  }
}

void Topic::MergeFrom(const Topic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.Topic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void Topic::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topic::CopyFrom(const Topic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topic::IsInitialized() const {
  return true;
}

void Topic::Swap(Topic* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Topic* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Topic::UnsafeArenaSwap(Topic* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Topic::InternalSwap(Topic* other) {
  using std::swap;
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Topic::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

PubsubMessage_AttributesEntry_DoNotUse::PubsubMessage_AttributesEntry_DoNotUse() {}
PubsubMessage_AttributesEntry_DoNotUse::PubsubMessage_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PubsubMessage_AttributesEntry_DoNotUse::MergeFrom(const PubsubMessage_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PubsubMessage_AttributesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[2];
}
void PubsubMessage_AttributesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void PubsubMessage::InitAsDefaultInstance() {
  ::google::pubsub::v1::_PubsubMessage_default_instance_._instance.get_mutable()->publish_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void PubsubMessage::_slow_mutable_publish_time() {
  publish_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
}
void PubsubMessage::unsafe_arena_set_allocated_publish_time(
    ::google::protobuf::Timestamp* publish_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete publish_time_;
  }
  publish_time_ = publish_time;
  if (publish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PubsubMessage.publish_time)
}
void PubsubMessage::clear_publish_time() {
  if (GetArenaNoVirtual() == NULL && publish_time_ != NULL) {
    delete publish_time_;
  }
  publish_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PubsubMessage::kDataFieldNumber;
const int PubsubMessage::kAttributesFieldNumber;
const int PubsubMessage::kMessageIdFieldNumber;
const int PubsubMessage::kPublishTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PubsubMessage::PubsubMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPubsubMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PubsubMessage)
}
PubsubMessage::PubsubMessage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  attributes_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPubsubMessage();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PubsubMessage)
}
PubsubMessage::PubsubMessage(const PubsubMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_.MergeFrom(from.attributes_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data(),
      GetArenaNoVirtual());
  }
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.message_id().size() > 0) {
    message_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.message_id(),
      GetArenaNoVirtual());
  }
  if (from.has_publish_time()) {
    publish_time_ = new ::google::protobuf::Timestamp(*from.publish_time_);
  } else {
    publish_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PubsubMessage)
}

void PubsubMessage::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  publish_time_ = NULL;
  _cached_size_ = 0;
}

PubsubMessage::~PubsubMessage() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PubsubMessage)
  SharedDtor();
}

void PubsubMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete publish_time_;
}

void PubsubMessage::ArenaDtor(void* object) {
  PubsubMessage* _this = reinterpret_cast< PubsubMessage* >(object);
  (void)_this;
}
void PubsubMessage::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PubsubMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PubsubMessage::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PubsubMessage& PubsubMessage::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPubsubMessage();
  return *internal_default_instance();
}

PubsubMessage* PubsubMessage::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PubsubMessage>(arena);
}

void PubsubMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PubsubMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  message_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && publish_time_ != NULL) {
    delete publish_time_;
  }
  publish_time_ = NULL;
  _internal_metadata_.Clear();
}

bool PubsubMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PubsubMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes data = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> attributes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          PubsubMessage_AttributesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PubsubMessage_AttributesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&attributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PubsubMessage.AttributesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PubsubMessage.AttributesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_message_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_id().data(), static_cast<int>(this->message_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PubsubMessage.message_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp publish_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_publish_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PubsubMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PubsubMessage)
  return false;
#undef DO_
}

void PubsubMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PubsubMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->data(), output);
  }

  // map<string, string> attributes = 2;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PubsubMessage_AttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PubsubMessage_AttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // string message_id = 3;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PubsubMessage.message_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->message_id(), output);
  }

  // .google.protobuf.Timestamp publish_time = 4;
  if (this->has_publish_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->publish_time_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PubsubMessage)
}

::google::protobuf::uint8* PubsubMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PubsubMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->data(), target);
  }

  // map<string, string> attributes = 2;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.value");
      }
    };

    if (deterministic &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PubsubMessage_AttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PubsubMessage_AttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  // string message_id = 3;
  if (this->message_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_id().data(), static_cast<int>(this->message_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PubsubMessage.message_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->message_id(), target);
  }

  // .google.protobuf.Timestamp publish_time = 4;
  if (this->has_publish_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->publish_time_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PubsubMessage)
  return target;
}

size_t PubsubMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PubsubMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> attributes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attributes_size());
  {
    ::google::protobuf::scoped_ptr<PubsubMessage_AttributesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->attributes().begin();
        it != this->attributes().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // string message_id = 3;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->message_id());
  }

  // .google.protobuf.Timestamp publish_time = 4;
  if (this->has_publish_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->publish_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PubsubMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PubsubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PubsubMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PubsubMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PubsubMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PubsubMessage)
    MergeFrom(*source);
  }
}

void PubsubMessage::MergeFrom(const PubsubMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PubsubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.data().size() > 0) {
    set_data(from.data());
  }
  if (from.message_id().size() > 0) {
    set_message_id(from.message_id());
  }
  if (from.has_publish_time()) {
    mutable_publish_time()->::google::protobuf::Timestamp::MergeFrom(from.publish_time());
  }
}

void PubsubMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PubsubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubsubMessage::CopyFrom(const PubsubMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PubsubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubsubMessage::IsInitialized() const {
  return true;
}

void PubsubMessage::Swap(PubsubMessage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PubsubMessage* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PubsubMessage::UnsafeArenaSwap(PubsubMessage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PubsubMessage::InternalSwap(PubsubMessage* other) {
  using std::swap;
  attributes_.Swap(&other->attributes_);
  data_.Swap(&other->data_);
  message_id_.Swap(&other->message_id_);
  swap(publish_time_, other->publish_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PubsubMessage::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTopicRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTopicRequest::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTopicRequest::GetTopicRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsGetTopicRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.GetTopicRequest)
}
GetTopicRequest::GetTopicRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsGetTopicRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.GetTopicRequest)
}
GetTopicRequest::GetTopicRequest(const GetTopicRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.GetTopicRequest)
}

void GetTopicRequest::SharedCtor() {
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetTopicRequest::~GetTopicRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.GetTopicRequest)
  SharedDtor();
}

void GetTopicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetTopicRequest::ArenaDtor(void* object) {
  GetTopicRequest* _this = reinterpret_cast< GetTopicRequest* >(object);
  (void)_this;
}
void GetTopicRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetTopicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTopicRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTopicRequest& GetTopicRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsGetTopicRequest();
  return *internal_default_instance();
}

GetTopicRequest* GetTopicRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetTopicRequest>(arena);
}

void GetTopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.GetTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool GetTopicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.GetTopicRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.GetTopicRequest.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.GetTopicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.GetTopicRequest)
  return false;
#undef DO_
}

void GetTopicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.GetTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetTopicRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.GetTopicRequest)
}

::google::protobuf::uint8* GetTopicRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.GetTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetTopicRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.GetTopicRequest)
  return target;
}

size_t GetTopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.GetTopicRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTopicRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.GetTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTopicRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTopicRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.GetTopicRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.GetTopicRequest)
    MergeFrom(*source);
  }
}

void GetTopicRequest::MergeFrom(const GetTopicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.GetTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
}

void GetTopicRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.GetTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTopicRequest::CopyFrom(const GetTopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.GetTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopicRequest::IsInitialized() const {
  return true;
}

void GetTopicRequest::Swap(GetTopicRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetTopicRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetTopicRequest::UnsafeArenaSwap(GetTopicRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetTopicRequest::InternalSwap(GetTopicRequest* other) {
  using std::swap;
  topic_.Swap(&other->topic_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetTopicRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateTopicRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_UpdateTopicRequest_default_instance_._instance.get_mutable()->topic_ = const_cast< ::google::pubsub::v1::Topic*>(
      ::google::pubsub::v1::Topic::internal_default_instance());
  ::google::pubsub::v1::_UpdateTopicRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
void UpdateTopicRequest::_slow_mutable_topic() {
  topic_ = ::google::protobuf::Arena::CreateMessage< ::google::pubsub::v1::Topic >(
      GetArenaNoVirtual());
}
void UpdateTopicRequest::unsafe_arena_set_allocated_topic(
    ::google::pubsub::v1::Topic* topic) {
  if (GetArenaNoVirtual() == NULL) {
    delete topic_;
  }
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateTopicRequest.topic)
}
void UpdateTopicRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
void UpdateTopicRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateTopicRequest.update_mask)
}
void UpdateTopicRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateTopicRequest::kTopicFieldNumber;
const int UpdateTopicRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateTopicRequest::UpdateTopicRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsUpdateTopicRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.UpdateTopicRequest)
}
UpdateTopicRequest::UpdateTopicRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsUpdateTopicRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.UpdateTopicRequest)
}
UpdateTopicRequest::UpdateTopicRequest(const UpdateTopicRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_topic()) {
    topic_ = new ::google::pubsub::v1::Topic(*from.topic_);
  } else {
    topic_ = NULL;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.UpdateTopicRequest)
}

void UpdateTopicRequest::SharedCtor() {
  ::memset(&topic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&topic_)) + sizeof(update_mask_));
  _cached_size_ = 0;
}

UpdateTopicRequest::~UpdateTopicRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.UpdateTopicRequest)
  SharedDtor();
}

void UpdateTopicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete topic_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateTopicRequest::ArenaDtor(void* object) {
  UpdateTopicRequest* _this = reinterpret_cast< UpdateTopicRequest* >(object);
  (void)_this;
}
void UpdateTopicRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateTopicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateTopicRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateTopicRequest& UpdateTopicRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsUpdateTopicRequest();
  return *internal_default_instance();
}

UpdateTopicRequest* UpdateTopicRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateTopicRequest>(arena);
}

void UpdateTopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.UpdateTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && topic_ != NULL) {
    delete topic_;
  }
  topic_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
  _internal_metadata_.Clear();
}

bool UpdateTopicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.UpdateTopicRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.pubsub.v1.Topic topic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topic()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.UpdateTopicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.UpdateTopicRequest)
  return false;
#undef DO_
}

void UpdateTopicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.UpdateTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Topic topic = 1;
  if (this->has_topic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->topic_, output);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->update_mask_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.UpdateTopicRequest)
}

::google::protobuf::uint8* UpdateTopicRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.UpdateTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Topic topic = 1;
  if (this->has_topic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->topic_, deterministic, target);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->update_mask_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.UpdateTopicRequest)
  return target;
}

size_t UpdateTopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.UpdateTopicRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.pubsub.v1.Topic topic = 1;
  if (this->has_topic()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->topic_);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateTopicRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.UpdateTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTopicRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateTopicRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.UpdateTopicRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.UpdateTopicRequest)
    MergeFrom(*source);
  }
}

void UpdateTopicRequest::MergeFrom(const UpdateTopicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.UpdateTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_topic()) {
    mutable_topic()->::google::pubsub::v1::Topic::MergeFrom(from.topic());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateTopicRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.UpdateTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTopicRequest::CopyFrom(const UpdateTopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.UpdateTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTopicRequest::IsInitialized() const {
  return true;
}

void UpdateTopicRequest::Swap(UpdateTopicRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateTopicRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UpdateTopicRequest::UnsafeArenaSwap(UpdateTopicRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateTopicRequest::InternalSwap(UpdateTopicRequest* other) {
  using std::swap;
  swap(topic_, other->topic_);
  swap(update_mask_, other->update_mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateTopicRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishRequest::kTopicFieldNumber;
const int PublishRequest::kMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishRequest::PublishRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPublishRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PublishRequest)
}
PublishRequest::PublishRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  messages_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPublishRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PublishRequest)
}
PublishRequest::PublishRequest(const PublishRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      messages_(from.messages_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PublishRequest)
}

void PublishRequest::SharedCtor() {
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PublishRequest::~PublishRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PublishRequest)
  SharedDtor();
}

void PublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PublishRequest::ArenaDtor(void* object) {
  PublishRequest* _this = reinterpret_cast< PublishRequest* >(object);
  (void)_this;
}
void PublishRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PublishRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishRequest& PublishRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPublishRequest();
  return *internal_default_instance();
}

PublishRequest* PublishRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PublishRequest>(arena);
}

void PublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PublishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool PublishRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PublishRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PublishRequest.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.pubsub.v1.PubsubMessage messages = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PublishRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PublishRequest)
  return false;
#undef DO_
}

void PublishRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PublishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // repeated .google.pubsub.v1.PubsubMessage messages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->messages(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PublishRequest)
}

::google::protobuf::uint8* PublishRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PublishRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // repeated .google.pubsub.v1.PubsubMessage messages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->messages(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PublishRequest)
  return target;
}

size_t PublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PublishRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.pubsub.v1.PubsubMessage messages = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->messages(static_cast<int>(i)));
    }
  }

  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PublishRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PublishRequest)
    MergeFrom(*source);
  }
}

void PublishRequest::MergeFrom(const PublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
}

void PublishRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishRequest::CopyFrom(const PublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishRequest::IsInitialized() const {
  return true;
}

void PublishRequest::Swap(PublishRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PublishRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PublishRequest::UnsafeArenaSwap(PublishRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PublishRequest::InternalSwap(PublishRequest* other) {
  using std::swap;
  messages_.InternalSwap(&other->messages_);
  topic_.Swap(&other->topic_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishResponse::kMessageIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishResponse::PublishResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPublishResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PublishResponse)
}
PublishResponse::PublishResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  message_ids_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPublishResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PublishResponse)
}
PublishResponse::PublishResponse(const PublishResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      message_ids_(from.message_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PublishResponse)
}

void PublishResponse::SharedCtor() {
  _cached_size_ = 0;
}

PublishResponse::~PublishResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PublishResponse)
  SharedDtor();
}

void PublishResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PublishResponse::ArenaDtor(void* object) {
  PublishResponse* _this = reinterpret_cast< PublishResponse* >(object);
  (void)_this;
}
void PublishResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PublishResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishResponse::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishResponse& PublishResponse::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPublishResponse();
  return *internal_default_instance();
}

PublishResponse* PublishResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PublishResponse>(arena);
}

void PublishResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PublishResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_ids_.Clear();
  _internal_metadata_.Clear();
}

bool PublishResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PublishResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string message_ids = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_message_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->message_ids(this->message_ids_size() - 1).data(),
            static_cast<int>(this->message_ids(this->message_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PublishResponse.message_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PublishResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PublishResponse)
  return false;
#undef DO_
}

void PublishResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PublishResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string message_ids = 1;
  for (int i = 0, n = this->message_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_ids(i).data(), static_cast<int>(this->message_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishResponse.message_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->message_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PublishResponse)
}

::google::protobuf::uint8* PublishResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PublishResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string message_ids = 1;
  for (int i = 0, n = this->message_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->message_ids(i).data(), static_cast<int>(this->message_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishResponse.message_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->message_ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PublishResponse)
  return target;
}

size_t PublishResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PublishResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string message_ids = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->message_ids_size());
  for (int i = 0, n = this->message_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->message_ids(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PublishResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PublishResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PublishResponse)
    MergeFrom(*source);
  }
}

void PublishResponse::MergeFrom(const PublishResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PublishResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_ids_.MergeFrom(from.message_ids_);
}

void PublishResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PublishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishResponse::CopyFrom(const PublishResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PublishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishResponse::IsInitialized() const {
  return true;
}

void PublishResponse::Swap(PublishResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PublishResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PublishResponse::UnsafeArenaSwap(PublishResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PublishResponse::InternalSwap(PublishResponse* other) {
  using std::swap;
  message_ids_.InternalSwap(&other->message_ids_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishResponse::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListTopicsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicsRequest::kProjectFieldNumber;
const int ListTopicsRequest::kPageSizeFieldNumber;
const int ListTopicsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicsRequest::ListTopicsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicsRequest)
}
ListTopicsRequest::ListTopicsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicsRequest)
}
ListTopicsRequest::ListTopicsRequest(const ListTopicsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicsRequest)
}

void ListTopicsRequest::SharedCtor() {
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListTopicsRequest::~ListTopicsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicsRequest)
  SharedDtor();
}

void ListTopicsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListTopicsRequest::ArenaDtor(void* object) {
  ListTopicsRequest* _this = reinterpret_cast< ListTopicsRequest* >(object);
  (void)_this;
}
void ListTopicsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListTopicsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTopicsRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListTopicsRequest& ListTopicsRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicsRequest();
  return *internal_default_instance();
}

ListTopicsRequest* ListTopicsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListTopicsRequest>(arena);
}

void ListTopicsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

bool ListTopicsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicsRequest.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicsRequest)
  return false;
#undef DO_
}

void ListTopicsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicsRequest)
}

::google::protobuf::uint8* ListTopicsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicsRequest)
  return target;
}

size_t ListTopicsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTopicsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTopicsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicsRequest)
    MergeFrom(*source);
  }
}

void ListTopicsRequest::MergeFrom(const ListTopicsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {
    set_project(from.project());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListTopicsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicsRequest::CopyFrom(const ListTopicsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicsRequest::IsInitialized() const {
  return true;
}

void ListTopicsRequest::Swap(ListTopicsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListTopicsRequest::UnsafeArenaSwap(ListTopicsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicsRequest::InternalSwap(ListTopicsRequest* other) {
  using std::swap;
  project_.Swap(&other->project_);
  page_token_.Swap(&other->page_token_);
  swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTopicsRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListTopicsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicsResponse::kTopicsFieldNumber;
const int ListTopicsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicsResponse::ListTopicsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicsResponse)
}
ListTopicsResponse::ListTopicsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  topics_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicsResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicsResponse)
}
ListTopicsResponse::ListTopicsResponse(const ListTopicsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      topics_(from.topics_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicsResponse)
}

void ListTopicsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListTopicsResponse::~ListTopicsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicsResponse)
  SharedDtor();
}

void ListTopicsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListTopicsResponse::ArenaDtor(void* object) {
  ListTopicsResponse* _this = reinterpret_cast< ListTopicsResponse* >(object);
  (void)_this;
}
void ListTopicsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListTopicsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTopicsResponse::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListTopicsResponse& ListTopicsResponse::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicsResponse();
  return *internal_default_instance();
}

ListTopicsResponse* ListTopicsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListTopicsResponse>(arena);
}

void ListTopicsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool ListTopicsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.Topic topics = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_topics()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicsResponse)
  return false;
#undef DO_
}

void ListTopicsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Topic topics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topics_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->topics(static_cast<int>(i)), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicsResponse)
}

::google::protobuf::uint8* ListTopicsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Topic topics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->topics_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->topics(static_cast<int>(i)), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicsResponse)
  return target;
}

size_t ListTopicsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.pubsub.v1.Topic topics = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->topics_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->topics(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTopicsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTopicsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicsResponse)
    MergeFrom(*source);
  }
}

void ListTopicsResponse::MergeFrom(const ListTopicsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListTopicsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicsResponse::CopyFrom(const ListTopicsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicsResponse::IsInitialized() const {
  return true;
}

void ListTopicsResponse::Swap(ListTopicsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListTopicsResponse::UnsafeArenaSwap(ListTopicsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicsResponse::InternalSwap(ListTopicsResponse* other) {
  using std::swap;
  topics_.InternalSwap(&other->topics_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTopicsResponse::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListTopicSubscriptionsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicSubscriptionsRequest::kTopicFieldNumber;
const int ListTopicSubscriptionsRequest::kPageSizeFieldNumber;
const int ListTopicSubscriptionsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicSubscriptionsRequest::ListTopicSubscriptionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicSubscriptionsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
}
ListTopicSubscriptionsRequest::ListTopicSubscriptionsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicSubscriptionsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
}
ListTopicSubscriptionsRequest::ListTopicSubscriptionsRequest(const ListTopicSubscriptionsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
}

void ListTopicSubscriptionsRequest::SharedCtor() {
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListTopicSubscriptionsRequest::~ListTopicSubscriptionsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
  SharedDtor();
}

void ListTopicSubscriptionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListTopicSubscriptionsRequest::ArenaDtor(void* object) {
  ListTopicSubscriptionsRequest* _this = reinterpret_cast< ListTopicSubscriptionsRequest* >(object);
  (void)_this;
}
void ListTopicSubscriptionsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListTopicSubscriptionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTopicSubscriptionsRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListTopicSubscriptionsRequest& ListTopicSubscriptionsRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicSubscriptionsRequest();
  return *internal_default_instance();
}

ListTopicSubscriptionsRequest* ListTopicSubscriptionsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListTopicSubscriptionsRequest>(arena);
}

void ListTopicSubscriptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

bool ListTopicSubscriptionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSubscriptionsRequest.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSubscriptionsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicSubscriptionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicSubscriptionsRequest)
  return false;
#undef DO_
}

void ListTopicSubscriptionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicSubscriptionsRequest)
}

::google::protobuf::uint8* ListTopicSubscriptionsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicSubscriptionsRequest)
  return target;
}

size_t ListTopicSubscriptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTopicSubscriptionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicSubscriptionsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTopicSubscriptionsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicSubscriptionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicSubscriptionsRequest)
    MergeFrom(*source);
  }
}

void ListTopicSubscriptionsRequest::MergeFrom(const ListTopicSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListTopicSubscriptionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicSubscriptionsRequest::CopyFrom(const ListTopicSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicSubscriptionsRequest::IsInitialized() const {
  return true;
}

void ListTopicSubscriptionsRequest::Swap(ListTopicSubscriptionsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicSubscriptionsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListTopicSubscriptionsRequest::UnsafeArenaSwap(ListTopicSubscriptionsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicSubscriptionsRequest::InternalSwap(ListTopicSubscriptionsRequest* other) {
  using std::swap;
  topic_.Swap(&other->topic_);
  page_token_.Swap(&other->page_token_);
  swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTopicSubscriptionsRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListTopicSubscriptionsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListTopicSubscriptionsResponse::kSubscriptionsFieldNumber;
const int ListTopicSubscriptionsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListTopicSubscriptionsResponse::ListTopicSubscriptionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicSubscriptionsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
}
ListTopicSubscriptionsResponse::ListTopicSubscriptionsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  subscriptions_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicSubscriptionsResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
}
ListTopicSubscriptionsResponse::ListTopicSubscriptionsResponse(const ListTopicSubscriptionsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      subscriptions_(from.subscriptions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
}

void ListTopicSubscriptionsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListTopicSubscriptionsResponse::~ListTopicSubscriptionsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
  SharedDtor();
}

void ListTopicSubscriptionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListTopicSubscriptionsResponse::ArenaDtor(void* object) {
  ListTopicSubscriptionsResponse* _this = reinterpret_cast< ListTopicSubscriptionsResponse* >(object);
  (void)_this;
}
void ListTopicSubscriptionsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListTopicSubscriptionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListTopicSubscriptionsResponse::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListTopicSubscriptionsResponse& ListTopicSubscriptionsResponse::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicSubscriptionsResponse();
  return *internal_default_instance();
}

ListTopicSubscriptionsResponse* ListTopicSubscriptionsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListTopicSubscriptionsResponse>(arena);
}

void ListTopicSubscriptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool ListTopicSubscriptionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string subscriptions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subscriptions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscriptions(this->subscriptions_size() - 1).data(),
            static_cast<int>(this->subscriptions(this->subscriptions_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListTopicSubscriptionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListTopicSubscriptionsResponse)
  return false;
#undef DO_
}

void ListTopicSubscriptionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string subscriptions = 1;
  for (int i = 0, n = this->subscriptions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscriptions(i).data(), static_cast<int>(this->subscriptions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->subscriptions(i), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListTopicSubscriptionsResponse)
}

::google::protobuf::uint8* ListTopicSubscriptionsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string subscriptions = 1;
  for (int i = 0, n = this->subscriptions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscriptions(i).data(), static_cast<int>(this->subscriptions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->subscriptions(i), target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicSubscriptionsResponse)
  return target;
}

size_t ListTopicSubscriptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string subscriptions = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->subscriptions_size());
  for (int i = 0, n = this->subscriptions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subscriptions(i));
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListTopicSubscriptionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicSubscriptionsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListTopicSubscriptionsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicSubscriptionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicSubscriptionsResponse)
    MergeFrom(*source);
  }
}

void ListTopicSubscriptionsResponse::MergeFrom(const ListTopicSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListTopicSubscriptionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicSubscriptionsResponse::CopyFrom(const ListTopicSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicSubscriptionsResponse::IsInitialized() const {
  return true;
}

void ListTopicSubscriptionsResponse::Swap(ListTopicSubscriptionsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListTopicSubscriptionsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListTopicSubscriptionsResponse::UnsafeArenaSwap(ListTopicSubscriptionsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListTopicSubscriptionsResponse::InternalSwap(ListTopicSubscriptionsResponse* other) {
  using std::swap;
  subscriptions_.InternalSwap(&other->subscriptions_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListTopicSubscriptionsResponse::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteTopicRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteTopicRequest::kTopicFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteTopicRequest::DeleteTopicRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsDeleteTopicRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DeleteTopicRequest)
}
DeleteTopicRequest::DeleteTopicRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsDeleteTopicRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DeleteTopicRequest)
}
DeleteTopicRequest::DeleteTopicRequest(const DeleteTopicRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DeleteTopicRequest)
}

void DeleteTopicRequest::SharedCtor() {
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteTopicRequest::~DeleteTopicRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DeleteTopicRequest)
  SharedDtor();
}

void DeleteTopicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteTopicRequest::ArenaDtor(void* object) {
  DeleteTopicRequest* _this = reinterpret_cast< DeleteTopicRequest* >(object);
  (void)_this;
}
void DeleteTopicRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteTopicRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteTopicRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteTopicRequest& DeleteTopicRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsDeleteTopicRequest();
  return *internal_default_instance();
}

DeleteTopicRequest* DeleteTopicRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteTopicRequest>(arena);
}

void DeleteTopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DeleteTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool DeleteTopicRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.DeleteTopicRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string topic = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.DeleteTopicRequest.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.DeleteTopicRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.DeleteTopicRequest)
  return false;
#undef DO_
}

void DeleteTopicRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.DeleteTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteTopicRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.DeleteTopicRequest)
}

::google::protobuf::uint8* DeleteTopicRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DeleteTopicRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteTopicRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DeleteTopicRequest)
  return target;
}

size_t DeleteTopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DeleteTopicRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteTopicRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DeleteTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTopicRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteTopicRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DeleteTopicRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DeleteTopicRequest)
    MergeFrom(*source);
  }
}

void DeleteTopicRequest::MergeFrom(const DeleteTopicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DeleteTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
}

void DeleteTopicRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DeleteTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTopicRequest::CopyFrom(const DeleteTopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DeleteTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTopicRequest::IsInitialized() const {
  return true;
}

void DeleteTopicRequest::Swap(DeleteTopicRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteTopicRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteTopicRequest::UnsafeArenaSwap(DeleteTopicRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteTopicRequest::InternalSwap(DeleteTopicRequest* other) {
  using std::swap;
  topic_.Swap(&other->topic_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteTopicRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Subscription_LabelsEntry_DoNotUse::Subscription_LabelsEntry_DoNotUse() {}
Subscription_LabelsEntry_DoNotUse::Subscription_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Subscription_LabelsEntry_DoNotUse::MergeFrom(const Subscription_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Subscription_LabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[13];
}
void Subscription_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Subscription::InitAsDefaultInstance() {
  ::google::pubsub::v1::_Subscription_default_instance_._instance.get_mutable()->push_config_ = const_cast< ::google::pubsub::v1::PushConfig*>(
      ::google::pubsub::v1::PushConfig::internal_default_instance());
  ::google::pubsub::v1::_Subscription_default_instance_._instance.get_mutable()->message_retention_duration_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void Subscription::_slow_mutable_push_config() {
  push_config_ = ::google::protobuf::Arena::CreateMessage< ::google::pubsub::v1::PushConfig >(
      GetArenaNoVirtual());
}
void Subscription::unsafe_arena_set_allocated_push_config(
    ::google::pubsub::v1::PushConfig* push_config) {
  if (GetArenaNoVirtual() == NULL) {
    delete push_config_;
  }
  push_config_ = push_config;
  if (push_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.push_config)
}
void Subscription::_slow_mutable_message_retention_duration() {
  message_retention_duration_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Duration >(
      GetArenaNoVirtual());
}
void Subscription::unsafe_arena_set_allocated_message_retention_duration(
    ::google::protobuf::Duration* message_retention_duration) {
  if (GetArenaNoVirtual() == NULL) {
    delete message_retention_duration_;
  }
  message_retention_duration_ = message_retention_duration;
  if (message_retention_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.message_retention_duration)
}
void Subscription::clear_message_retention_duration() {
  if (GetArenaNoVirtual() == NULL && message_retention_duration_ != NULL) {
    delete message_retention_duration_;
  }
  message_retention_duration_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Subscription::kNameFieldNumber;
const int Subscription::kTopicFieldNumber;
const int Subscription::kPushConfigFieldNumber;
const int Subscription::kAckDeadlineSecondsFieldNumber;
const int Subscription::kRetainAckedMessagesFieldNumber;
const int Subscription::kMessageRetentionDurationFieldNumber;
const int Subscription::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Subscription::Subscription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSubscription();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.Subscription)
}
Subscription::Subscription(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSubscription();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.Subscription)
}
Subscription::Subscription(const Subscription& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic(),
      GetArenaNoVirtual());
  }
  if (from.has_push_config()) {
    push_config_ = new ::google::pubsub::v1::PushConfig(*from.push_config_);
  } else {
    push_config_ = NULL;
  }
  if (from.has_message_retention_duration()) {
    message_retention_duration_ = new ::google::protobuf::Duration(*from.message_retention_duration_);
  } else {
    message_retention_duration_ = NULL;
  }
  ::memcpy(&ack_deadline_seconds_, &from.ack_deadline_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&retain_acked_messages_) -
    reinterpret_cast<char*>(&ack_deadline_seconds_)) + sizeof(retain_acked_messages_));
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.Subscription)
}

void Subscription::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&push_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retain_acked_messages_) -
      reinterpret_cast<char*>(&push_config_)) + sizeof(retain_acked_messages_));
  _cached_size_ = 0;
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.Subscription)
  SharedDtor();
}

void Subscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete push_config_;
  if (this != internal_default_instance()) delete message_retention_duration_;
}

void Subscription::ArenaDtor(void* object) {
  Subscription* _this = reinterpret_cast< Subscription* >(object);
  (void)_this;
}
void Subscription::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Subscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Subscription::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Subscription& Subscription::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSubscription();
  return *internal_default_instance();
}

Subscription* Subscription::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Subscription>(arena);
}

void Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.Subscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && push_config_ != NULL) {
    delete push_config_;
  }
  push_config_ = NULL;
  if (GetArenaNoVirtual() == NULL && message_retention_duration_ != NULL) {
    delete message_retention_duration_;
  }
  message_retention_duration_ = NULL;
  ::memset(&ack_deadline_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&retain_acked_messages_) -
      reinterpret_cast<char*>(&ack_deadline_seconds_)) + sizeof(retain_acked_messages_));
  _internal_metadata_.Clear();
}

bool Subscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.Subscription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Subscription.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Subscription.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.pubsub.v1.PushConfig push_config = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_push_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ack_deadline_seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ack_deadline_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool retain_acked_messages = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &retain_acked_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration message_retention_duration = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message_retention_duration()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          Subscription_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Subscription_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Subscription.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Subscription.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.Subscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.Subscription)
  return false;
#undef DO_
}

void Subscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.Subscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // .google.pubsub.v1.PushConfig push_config = 4;
  if (this->has_push_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->push_config_, output);
  }

  // int32 ack_deadline_seconds = 5;
  if (this->ack_deadline_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ack_deadline_seconds(), output);
  }

  // bool retain_acked_messages = 7;
  if (this->retain_acked_messages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->retain_acked_messages(), output);
  }

  // .google.protobuf.Duration message_retention_duration = 8;
  if (this->has_message_retention_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->message_retention_duration_, output);
  }

  // map<string, string> labels = 9;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Subscription.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Subscription.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Subscription_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Subscription_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            9, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.Subscription)
}

::google::protobuf::uint8* Subscription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.Subscription)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // .google.pubsub.v1.PushConfig push_config = 4;
  if (this->has_push_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->push_config_, deterministic, target);
  }

  // int32 ack_deadline_seconds = 5;
  if (this->ack_deadline_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ack_deadline_seconds(), target);
  }

  // bool retain_acked_messages = 7;
  if (this->retain_acked_messages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->retain_acked_messages(), target);
  }

  // .google.protobuf.Duration message_retention_duration = 8;
  if (this->has_message_retention_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, *this->message_retention_duration_, deterministic, target);
  }

  // map<string, string> labels = 9;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Subscription.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Subscription.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Subscription_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Subscription_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       9, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.Subscription)
  return target;
}

size_t Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.Subscription)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> labels = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<Subscription_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .google.pubsub.v1.PushConfig push_config = 4;
  if (this->has_push_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->push_config_);
  }

  // .google.protobuf.Duration message_retention_duration = 8;
  if (this->has_message_retention_duration()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->message_retention_duration_);
  }

  // int32 ack_deadline_seconds = 5;
  if (this->ack_deadline_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ack_deadline_seconds());
  }

  // bool retain_acked_messages = 7;
  if (this->retain_acked_messages() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Subscription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  const Subscription* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Subscription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.Subscription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.Subscription)
    MergeFrom(*source);
  }
}

void Subscription::MergeFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
  if (from.has_push_config()) {
    mutable_push_config()->::google::pubsub::v1::PushConfig::MergeFrom(from.push_config());
  }
  if (from.has_message_retention_duration()) {
    mutable_message_retention_duration()->::google::protobuf::Duration::MergeFrom(from.message_retention_duration());
  }
  if (from.ack_deadline_seconds() != 0) {
    set_ack_deadline_seconds(from.ack_deadline_seconds());
  }
  if (from.retain_acked_messages() != 0) {
    set_retain_acked_messages(from.retain_acked_messages());
  }
}

void Subscription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscription::CopyFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscription::IsInitialized() const {
  return true;
}

void Subscription::Swap(Subscription* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Subscription* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Subscription::UnsafeArenaSwap(Subscription* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Subscription::InternalSwap(Subscription* other) {
  using std::swap;
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_);
  topic_.Swap(&other->topic_);
  swap(push_config_, other->push_config_);
  swap(message_retention_duration_, other->message_retention_duration_);
  swap(ack_deadline_seconds_, other->ack_deadline_seconds_);
  swap(retain_acked_messages_, other->retain_acked_messages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Subscription::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

PushConfig_AttributesEntry_DoNotUse::PushConfig_AttributesEntry_DoNotUse() {}
PushConfig_AttributesEntry_DoNotUse::PushConfig_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void PushConfig_AttributesEntry_DoNotUse::MergeFrom(const PushConfig_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata PushConfig_AttributesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[15];
}
void PushConfig_AttributesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void PushConfig::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PushConfig::kPushEndpointFieldNumber;
const int PushConfig::kAttributesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PushConfig::PushConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPushConfig();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PushConfig)
}
PushConfig::PushConfig(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  attributes_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPushConfig();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PushConfig)
}
PushConfig::PushConfig(const PushConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_.MergeFrom(from.attributes_);
  push_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.push_endpoint().size() > 0) {
    push_endpoint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.push_endpoint(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PushConfig)
}

void PushConfig::SharedCtor() {
  push_endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

PushConfig::~PushConfig() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PushConfig)
  SharedDtor();
}

void PushConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  push_endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PushConfig::ArenaDtor(void* object) {
  PushConfig* _this = reinterpret_cast< PushConfig* >(object);
  (void)_this;
}
void PushConfig::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PushConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PushConfig::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PushConfig& PushConfig::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPushConfig();
  return *internal_default_instance();
}

PushConfig* PushConfig::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PushConfig>(arena);
}

void PushConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PushConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  push_endpoint_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool PushConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PushConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string push_endpoint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_push_endpoint()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->push_endpoint().data(), static_cast<int>(this->push_endpoint().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PushConfig.push_endpoint"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> attributes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          PushConfig_AttributesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              PushConfig_AttributesEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&attributes_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PushConfig.AttributesEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PushConfig.AttributesEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PushConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PushConfig)
  return false;
#undef DO_
}

void PushConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PushConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string push_endpoint = 1;
  if (this->push_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->push_endpoint().data(), static_cast<int>(this->push_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PushConfig.push_endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->push_endpoint(), output);
  }

  // map<string, string> attributes = 2;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PushConfig_AttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PushConfig_AttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            2, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PushConfig)
}

::google::protobuf::uint8* PushConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PushConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string push_endpoint = 1;
  if (this->push_endpoint().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->push_endpoint().data(), static_cast<int>(this->push_endpoint().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PushConfig.push_endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->push_endpoint(), target);
  }

  // map<string, string> attributes = 2;
  if (!this->attributes().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.value");
      }
    };

    if (deterministic &&
        this->attributes().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->attributes().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PushConfig_AttributesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(attributes_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PushConfig_AttributesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->attributes().begin();
          it != this->attributes().end(); ++it) {
        entry.reset(attributes_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       2, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PushConfig)
  return target;
}

size_t PushConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PushConfig)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> attributes = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->attributes_size());
  {
    ::google::protobuf::scoped_ptr<PushConfig_AttributesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->attributes().begin();
        it != this->attributes().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(attributes_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string push_endpoint = 1;
  if (this->push_endpoint().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->push_endpoint());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PushConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PushConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PushConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PushConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PushConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PushConfig)
    MergeFrom(*source);
  }
}

void PushConfig::MergeFrom(const PushConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PushConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.push_endpoint().size() > 0) {
    set_push_endpoint(from.push_endpoint());
  }
}

void PushConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PushConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushConfig::CopyFrom(const PushConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PushConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushConfig::IsInitialized() const {
  return true;
}

void PushConfig::Swap(PushConfig* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PushConfig* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PushConfig::UnsafeArenaSwap(PushConfig* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PushConfig::InternalSwap(PushConfig* other) {
  using std::swap;
  attributes_.Swap(&other->attributes_);
  push_endpoint_.Swap(&other->push_endpoint_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PushConfig::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReceivedMessage::InitAsDefaultInstance() {
  ::google::pubsub::v1::_ReceivedMessage_default_instance_._instance.get_mutable()->message_ = const_cast< ::google::pubsub::v1::PubsubMessage*>(
      ::google::pubsub::v1::PubsubMessage::internal_default_instance());
}
void ReceivedMessage::_slow_mutable_message() {
  message_ = ::google::protobuf::Arena::CreateMessage< ::google::pubsub::v1::PubsubMessage >(
      GetArenaNoVirtual());
}
void ReceivedMessage::unsafe_arena_set_allocated_message(
    ::google::pubsub::v1::PubsubMessage* message) {
  if (GetArenaNoVirtual() == NULL) {
    delete message_;
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ReceivedMessage.message)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReceivedMessage::kAckIdFieldNumber;
const int ReceivedMessage::kMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReceivedMessage::ReceivedMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsReceivedMessage();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ReceivedMessage)
}
ReceivedMessage::ReceivedMessage(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsReceivedMessage();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ReceivedMessage)
}
ReceivedMessage::ReceivedMessage(const ReceivedMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ack_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ack_id().size() > 0) {
    ack_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ack_id(),
      GetArenaNoVirtual());
  }
  if (from.has_message()) {
    message_ = new ::google::pubsub::v1::PubsubMessage(*from.message_);
  } else {
    message_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ReceivedMessage)
}

void ReceivedMessage::SharedCtor() {
  ack_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  message_ = NULL;
  _cached_size_ = 0;
}

ReceivedMessage::~ReceivedMessage() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ReceivedMessage)
  SharedDtor();
}

void ReceivedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  ack_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void ReceivedMessage::ArenaDtor(void* object) {
  ReceivedMessage* _this = reinterpret_cast< ReceivedMessage* >(object);
  (void)_this;
}
void ReceivedMessage::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ReceivedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceivedMessage::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReceivedMessage& ReceivedMessage::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsReceivedMessage();
  return *internal_default_instance();
}

ReceivedMessage* ReceivedMessage::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ReceivedMessage>(arena);
}

void ReceivedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ReceivedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
  _internal_metadata_.Clear();
}

bool ReceivedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ReceivedMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ack_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ack_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_id().data(), static_cast<int>(this->ack_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ReceivedMessage.ack_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.pubsub.v1.PubsubMessage message = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ReceivedMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ReceivedMessage)
  return false;
#undef DO_
}

void ReceivedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ReceivedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ack_id = 1;
  if (this->ack_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_id().data(), static_cast<int>(this->ack_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ReceivedMessage.ack_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ack_id(), output);
  }

  // .google.pubsub.v1.PubsubMessage message = 2;
  if (this->has_message()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->message_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ReceivedMessage)
}

::google::protobuf::uint8* ReceivedMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ReceivedMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ack_id = 1;
  if (this->ack_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_id().data(), static_cast<int>(this->ack_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ReceivedMessage.ack_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ack_id(), target);
  }

  // .google.pubsub.v1.PubsubMessage message = 2;
  if (this->has_message()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->message_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ReceivedMessage)
  return target;
}

size_t ReceivedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ReceivedMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string ack_id = 1;
  if (this->ack_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ack_id());
  }

  // .google.pubsub.v1.PubsubMessage message = 2;
  if (this->has_message()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->message_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceivedMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ReceivedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceivedMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReceivedMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ReceivedMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ReceivedMessage)
    MergeFrom(*source);
  }
}

void ReceivedMessage::MergeFrom(const ReceivedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ReceivedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ack_id().size() > 0) {
    set_ack_id(from.ack_id());
  }
  if (from.has_message()) {
    mutable_message()->::google::pubsub::v1::PubsubMessage::MergeFrom(from.message());
  }
}

void ReceivedMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ReceivedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceivedMessage::CopyFrom(const ReceivedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ReceivedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceivedMessage::IsInitialized() const {
  return true;
}

void ReceivedMessage::Swap(ReceivedMessage* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ReceivedMessage* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ReceivedMessage::UnsafeArenaSwap(ReceivedMessage* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ReceivedMessage::InternalSwap(ReceivedMessage* other) {
  using std::swap;
  ack_id_.Swap(&other->ack_id_);
  swap(message_, other->message_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReceivedMessage::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSubscriptionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSubscriptionRequest::kSubscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSubscriptionRequest::GetSubscriptionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsGetSubscriptionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.GetSubscriptionRequest)
}
GetSubscriptionRequest::GetSubscriptionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsGetSubscriptionRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.GetSubscriptionRequest)
}
GetSubscriptionRequest::GetSubscriptionRequest(const GetSubscriptionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.GetSubscriptionRequest)
}

void GetSubscriptionRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetSubscriptionRequest::~GetSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.GetSubscriptionRequest)
  SharedDtor();
}

void GetSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetSubscriptionRequest::ArenaDtor(void* object) {
  GetSubscriptionRequest* _this = reinterpret_cast< GetSubscriptionRequest* >(object);
  (void)_this;
}
void GetSubscriptionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetSubscriptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSubscriptionRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSubscriptionRequest& GetSubscriptionRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsGetSubscriptionRequest();
  return *internal_default_instance();
}

GetSubscriptionRequest* GetSubscriptionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetSubscriptionRequest>(arena);
}

void GetSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.GetSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool GetSubscriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.GetSubscriptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.GetSubscriptionRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.GetSubscriptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.GetSubscriptionRequest)
  return false;
#undef DO_
}

void GetSubscriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.GetSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetSubscriptionRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.GetSubscriptionRequest)
}

::google::protobuf::uint8* GetSubscriptionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.GetSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetSubscriptionRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.GetSubscriptionRequest)
  return target;
}

size_t GetSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.GetSubscriptionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSubscriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.GetSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSubscriptionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSubscriptionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.GetSubscriptionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.GetSubscriptionRequest)
    MergeFrom(*source);
  }
}

void GetSubscriptionRequest::MergeFrom(const GetSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.GetSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
}

void GetSubscriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.GetSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscriptionRequest::CopyFrom(const GetSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.GetSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriptionRequest::IsInitialized() const {
  return true;
}

void GetSubscriptionRequest::Swap(GetSubscriptionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetSubscriptionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetSubscriptionRequest::UnsafeArenaSwap(GetSubscriptionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetSubscriptionRequest::InternalSwap(GetSubscriptionRequest* other) {
  using std::swap;
  subscription_.Swap(&other->subscription_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSubscriptionRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateSubscriptionRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_UpdateSubscriptionRequest_default_instance_._instance.get_mutable()->subscription_ = const_cast< ::google::pubsub::v1::Subscription*>(
      ::google::pubsub::v1::Subscription::internal_default_instance());
  ::google::pubsub::v1::_UpdateSubscriptionRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
void UpdateSubscriptionRequest::_slow_mutable_subscription() {
  subscription_ = ::google::protobuf::Arena::CreateMessage< ::google::pubsub::v1::Subscription >(
      GetArenaNoVirtual());
}
void UpdateSubscriptionRequest::unsafe_arena_set_allocated_subscription(
    ::google::pubsub::v1::Subscription* subscription) {
  if (GetArenaNoVirtual() == NULL) {
    delete subscription_;
  }
  subscription_ = subscription;
  if (subscription) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
}
void UpdateSubscriptionRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
void UpdateSubscriptionRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
}
void UpdateSubscriptionRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSubscriptionRequest::kSubscriptionFieldNumber;
const int UpdateSubscriptionRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSubscriptionRequest::UpdateSubscriptionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsUpdateSubscriptionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.UpdateSubscriptionRequest)
}
UpdateSubscriptionRequest::UpdateSubscriptionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsUpdateSubscriptionRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.UpdateSubscriptionRequest)
}
UpdateSubscriptionRequest::UpdateSubscriptionRequest(const UpdateSubscriptionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_subscription()) {
    subscription_ = new ::google::pubsub::v1::Subscription(*from.subscription_);
  } else {
    subscription_ = NULL;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.UpdateSubscriptionRequest)
}

void UpdateSubscriptionRequest::SharedCtor() {
  ::memset(&subscription_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&subscription_)) + sizeof(update_mask_));
  _cached_size_ = 0;
}

UpdateSubscriptionRequest::~UpdateSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.UpdateSubscriptionRequest)
  SharedDtor();
}

void UpdateSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete subscription_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateSubscriptionRequest::ArenaDtor(void* object) {
  UpdateSubscriptionRequest* _this = reinterpret_cast< UpdateSubscriptionRequest* >(object);
  (void)_this;
}
void UpdateSubscriptionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateSubscriptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSubscriptionRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateSubscriptionRequest& UpdateSubscriptionRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsUpdateSubscriptionRequest();
  return *internal_default_instance();
}

UpdateSubscriptionRequest* UpdateSubscriptionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateSubscriptionRequest>(arena);
}

void UpdateSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.UpdateSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && subscription_ != NULL) {
    delete subscription_;
  }
  subscription_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
  _internal_metadata_.Clear();
}

bool UpdateSubscriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.UpdateSubscriptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.pubsub.v1.Subscription subscription = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_subscription()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.UpdateSubscriptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.UpdateSubscriptionRequest)
  return false;
#undef DO_
}

void UpdateSubscriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.UpdateSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Subscription subscription = 1;
  if (this->has_subscription()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->subscription_, output);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->update_mask_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.UpdateSubscriptionRequest)
}

::google::protobuf::uint8* UpdateSubscriptionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.UpdateSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Subscription subscription = 1;
  if (this->has_subscription()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->subscription_, deterministic, target);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->update_mask_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.UpdateSubscriptionRequest)
  return target;
}

size_t UpdateSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.UpdateSubscriptionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.pubsub.v1.Subscription subscription = 1;
  if (this->has_subscription()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->subscription_);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSubscriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.UpdateSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSubscriptionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateSubscriptionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.UpdateSubscriptionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.UpdateSubscriptionRequest)
    MergeFrom(*source);
  }
}

void UpdateSubscriptionRequest::MergeFrom(const UpdateSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.UpdateSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subscription()) {
    mutable_subscription()->::google::pubsub::v1::Subscription::MergeFrom(from.subscription());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateSubscriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.UpdateSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSubscriptionRequest::CopyFrom(const UpdateSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.UpdateSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSubscriptionRequest::IsInitialized() const {
  return true;
}

void UpdateSubscriptionRequest::Swap(UpdateSubscriptionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateSubscriptionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UpdateSubscriptionRequest::UnsafeArenaSwap(UpdateSubscriptionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateSubscriptionRequest::InternalSwap(UpdateSubscriptionRequest* other) {
  using std::swap;
  swap(subscription_, other->subscription_);
  swap(update_mask_, other->update_mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateSubscriptionRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListSubscriptionsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSubscriptionsRequest::kProjectFieldNumber;
const int ListSubscriptionsRequest::kPageSizeFieldNumber;
const int ListSubscriptionsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSubscriptionsRequest::ListSubscriptionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSubscriptionsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSubscriptionsRequest)
}
ListSubscriptionsRequest::ListSubscriptionsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSubscriptionsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSubscriptionsRequest)
}
ListSubscriptionsRequest::ListSubscriptionsRequest(const ListSubscriptionsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSubscriptionsRequest)
}

void ListSubscriptionsRequest::SharedCtor() {
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListSubscriptionsRequest::~ListSubscriptionsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSubscriptionsRequest)
  SharedDtor();
}

void ListSubscriptionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListSubscriptionsRequest::ArenaDtor(void* object) {
  ListSubscriptionsRequest* _this = reinterpret_cast< ListSubscriptionsRequest* >(object);
  (void)_this;
}
void ListSubscriptionsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListSubscriptionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSubscriptionsRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListSubscriptionsRequest& ListSubscriptionsRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSubscriptionsRequest();
  return *internal_default_instance();
}

ListSubscriptionsRequest* ListSubscriptionsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListSubscriptionsRequest>(arena);
}

void ListSubscriptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSubscriptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

bool ListSubscriptionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListSubscriptionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSubscriptionsRequest.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSubscriptionsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListSubscriptionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListSubscriptionsRequest)
  return false;
#undef DO_
}

void ListSubscriptionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListSubscriptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListSubscriptionsRequest)
}

::google::protobuf::uint8* ListSubscriptionsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSubscriptionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSubscriptionsRequest)
  return target;
}

size_t ListSubscriptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSubscriptionsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSubscriptionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSubscriptionsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListSubscriptionsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSubscriptionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSubscriptionsRequest)
    MergeFrom(*source);
  }
}

void ListSubscriptionsRequest::MergeFrom(const ListSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {
    set_project(from.project());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListSubscriptionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSubscriptionsRequest::CopyFrom(const ListSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSubscriptionsRequest::IsInitialized() const {
  return true;
}

void ListSubscriptionsRequest::Swap(ListSubscriptionsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListSubscriptionsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListSubscriptionsRequest::UnsafeArenaSwap(ListSubscriptionsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListSubscriptionsRequest::InternalSwap(ListSubscriptionsRequest* other) {
  using std::swap;
  project_.Swap(&other->project_);
  page_token_.Swap(&other->page_token_);
  swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListSubscriptionsRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListSubscriptionsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSubscriptionsResponse::kSubscriptionsFieldNumber;
const int ListSubscriptionsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSubscriptionsResponse::ListSubscriptionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSubscriptionsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSubscriptionsResponse)
}
ListSubscriptionsResponse::ListSubscriptionsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  subscriptions_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSubscriptionsResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSubscriptionsResponse)
}
ListSubscriptionsResponse::ListSubscriptionsResponse(const ListSubscriptionsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      subscriptions_(from.subscriptions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSubscriptionsResponse)
}

void ListSubscriptionsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListSubscriptionsResponse::~ListSubscriptionsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSubscriptionsResponse)
  SharedDtor();
}

void ListSubscriptionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListSubscriptionsResponse::ArenaDtor(void* object) {
  ListSubscriptionsResponse* _this = reinterpret_cast< ListSubscriptionsResponse* >(object);
  (void)_this;
}
void ListSubscriptionsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListSubscriptionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSubscriptionsResponse::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListSubscriptionsResponse& ListSubscriptionsResponse::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSubscriptionsResponse();
  return *internal_default_instance();
}

ListSubscriptionsResponse* ListSubscriptionsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListSubscriptionsResponse>(arena);
}

void ListSubscriptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSubscriptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool ListSubscriptionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListSubscriptionsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.Subscription subscriptions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_subscriptions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSubscriptionsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListSubscriptionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListSubscriptionsResponse)
  return false;
#undef DO_
}

void ListSubscriptionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListSubscriptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscriptions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->subscriptions(static_cast<int>(i)), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListSubscriptionsResponse)
}

::google::protobuf::uint8* ListSubscriptionsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSubscriptionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->subscriptions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->subscriptions(static_cast<int>(i)), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSubscriptionsResponse)
  return target;
}

size_t ListSubscriptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSubscriptionsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->subscriptions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->subscriptions(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSubscriptionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSubscriptionsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListSubscriptionsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSubscriptionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSubscriptionsResponse)
    MergeFrom(*source);
  }
}

void ListSubscriptionsResponse::MergeFrom(const ListSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListSubscriptionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSubscriptionsResponse::CopyFrom(const ListSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSubscriptionsResponse::IsInitialized() const {
  return true;
}

void ListSubscriptionsResponse::Swap(ListSubscriptionsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListSubscriptionsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListSubscriptionsResponse::UnsafeArenaSwap(ListSubscriptionsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListSubscriptionsResponse::InternalSwap(ListSubscriptionsResponse* other) {
  using std::swap;
  subscriptions_.InternalSwap(&other->subscriptions_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListSubscriptionsResponse::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteSubscriptionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteSubscriptionRequest::kSubscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteSubscriptionRequest::DeleteSubscriptionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsDeleteSubscriptionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DeleteSubscriptionRequest)
}
DeleteSubscriptionRequest::DeleteSubscriptionRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsDeleteSubscriptionRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DeleteSubscriptionRequest)
}
DeleteSubscriptionRequest::DeleteSubscriptionRequest(const DeleteSubscriptionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DeleteSubscriptionRequest)
}

void DeleteSubscriptionRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteSubscriptionRequest::~DeleteSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DeleteSubscriptionRequest)
  SharedDtor();
}

void DeleteSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteSubscriptionRequest::ArenaDtor(void* object) {
  DeleteSubscriptionRequest* _this = reinterpret_cast< DeleteSubscriptionRequest* >(object);
  (void)_this;
}
void DeleteSubscriptionRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteSubscriptionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSubscriptionRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteSubscriptionRequest& DeleteSubscriptionRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsDeleteSubscriptionRequest();
  return *internal_default_instance();
}

DeleteSubscriptionRequest* DeleteSubscriptionRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteSubscriptionRequest>(arena);
}

void DeleteSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DeleteSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool DeleteSubscriptionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.DeleteSubscriptionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.DeleteSubscriptionRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.DeleteSubscriptionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.DeleteSubscriptionRequest)
  return false;
#undef DO_
}

void DeleteSubscriptionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.DeleteSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteSubscriptionRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.DeleteSubscriptionRequest)
}

::google::protobuf::uint8* DeleteSubscriptionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DeleteSubscriptionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteSubscriptionRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DeleteSubscriptionRequest)
  return target;
}

size_t DeleteSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DeleteSubscriptionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSubscriptionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSubscriptionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteSubscriptionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DeleteSubscriptionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DeleteSubscriptionRequest)
    MergeFrom(*source);
  }
}

void DeleteSubscriptionRequest::MergeFrom(const DeleteSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
}

void DeleteSubscriptionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSubscriptionRequest::CopyFrom(const DeleteSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSubscriptionRequest::IsInitialized() const {
  return true;
}

void DeleteSubscriptionRequest::Swap(DeleteSubscriptionRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteSubscriptionRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteSubscriptionRequest::UnsafeArenaSwap(DeleteSubscriptionRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteSubscriptionRequest::InternalSwap(DeleteSubscriptionRequest* other) {
  using std::swap;
  subscription_.Swap(&other->subscription_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteSubscriptionRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ModifyPushConfigRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_ModifyPushConfigRequest_default_instance_._instance.get_mutable()->push_config_ = const_cast< ::google::pubsub::v1::PushConfig*>(
      ::google::pubsub::v1::PushConfig::internal_default_instance());
}
void ModifyPushConfigRequest::_slow_mutable_push_config() {
  push_config_ = ::google::protobuf::Arena::CreateMessage< ::google::pubsub::v1::PushConfig >(
      GetArenaNoVirtual());
}
void ModifyPushConfigRequest::unsafe_arena_set_allocated_push_config(
    ::google::pubsub::v1::PushConfig* push_config) {
  if (GetArenaNoVirtual() == NULL) {
    delete push_config_;
  }
  push_config_ = push_config;
  if (push_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.push_config)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyPushConfigRequest::kSubscriptionFieldNumber;
const int ModifyPushConfigRequest::kPushConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyPushConfigRequest::ModifyPushConfigRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsModifyPushConfigRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ModifyPushConfigRequest)
}
ModifyPushConfigRequest::ModifyPushConfigRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsModifyPushConfigRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ModifyPushConfigRequest)
}
ModifyPushConfigRequest::ModifyPushConfigRequest(const ModifyPushConfigRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  if (from.has_push_config()) {
    push_config_ = new ::google::pubsub::v1::PushConfig(*from.push_config_);
  } else {
    push_config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ModifyPushConfigRequest)
}

void ModifyPushConfigRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  push_config_ = NULL;
  _cached_size_ = 0;
}

ModifyPushConfigRequest::~ModifyPushConfigRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ModifyPushConfigRequest)
  SharedDtor();
}

void ModifyPushConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete push_config_;
}

void ModifyPushConfigRequest::ArenaDtor(void* object) {
  ModifyPushConfigRequest* _this = reinterpret_cast< ModifyPushConfigRequest* >(object);
  (void)_this;
}
void ModifyPushConfigRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ModifyPushConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyPushConfigRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModifyPushConfigRequest& ModifyPushConfigRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsModifyPushConfigRequest();
  return *internal_default_instance();
}

ModifyPushConfigRequest* ModifyPushConfigRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ModifyPushConfigRequest>(arena);
}

void ModifyPushConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ModifyPushConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && push_config_ != NULL) {
    delete push_config_;
  }
  push_config_ = NULL;
  _internal_metadata_.Clear();
}

bool ModifyPushConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ModifyPushConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ModifyPushConfigRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.pubsub.v1.PushConfig push_config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_push_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ModifyPushConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ModifyPushConfigRequest)
  return false;
#undef DO_
}

void ModifyPushConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ModifyPushConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyPushConfigRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // .google.pubsub.v1.PushConfig push_config = 2;
  if (this->has_push_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->push_config_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ModifyPushConfigRequest)
}

::google::protobuf::uint8* ModifyPushConfigRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ModifyPushConfigRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyPushConfigRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // .google.pubsub.v1.PushConfig push_config = 2;
  if (this->has_push_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->push_config_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ModifyPushConfigRequest)
  return target;
}

size_t ModifyPushConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ModifyPushConfigRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  // .google.pubsub.v1.PushConfig push_config = 2;
  if (this->has_push_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->push_config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyPushConfigRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyPushConfigRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyPushConfigRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ModifyPushConfigRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ModifyPushConfigRequest)
    MergeFrom(*source);
  }
}

void ModifyPushConfigRequest::MergeFrom(const ModifyPushConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  if (from.has_push_config()) {
    mutable_push_config()->::google::pubsub::v1::PushConfig::MergeFrom(from.push_config());
  }
}

void ModifyPushConfigRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPushConfigRequest::CopyFrom(const ModifyPushConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPushConfigRequest::IsInitialized() const {
  return true;
}

void ModifyPushConfigRequest::Swap(ModifyPushConfigRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ModifyPushConfigRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ModifyPushConfigRequest::UnsafeArenaSwap(ModifyPushConfigRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ModifyPushConfigRequest::InternalSwap(ModifyPushConfigRequest* other) {
  using std::swap;
  subscription_.Swap(&other->subscription_);
  swap(push_config_, other->push_config_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifyPushConfigRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PullRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullRequest::kSubscriptionFieldNumber;
const int PullRequest::kReturnImmediatelyFieldNumber;
const int PullRequest::kMaxMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullRequest::PullRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPullRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PullRequest)
}
PullRequest::PullRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPullRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PullRequest)
}
PullRequest::PullRequest(const PullRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  ::memcpy(&return_immediately_, &from.return_immediately_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_messages_) -
    reinterpret_cast<char*>(&return_immediately_)) + sizeof(max_messages_));
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PullRequest)
}

void PullRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_immediately_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_messages_) -
      reinterpret_cast<char*>(&return_immediately_)) + sizeof(max_messages_));
  _cached_size_ = 0;
}

PullRequest::~PullRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PullRequest)
  SharedDtor();
}

void PullRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PullRequest::ArenaDtor(void* object) {
  PullRequest* _this = reinterpret_cast< PullRequest* >(object);
  (void)_this;
}
void PullRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PullRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PullRequest& PullRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPullRequest();
  return *internal_default_instance();
}

PullRequest* PullRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PullRequest>(arena);
}

void PullRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PullRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&return_immediately_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_messages_) -
      reinterpret_cast<char*>(&return_immediately_)) + sizeof(max_messages_));
  _internal_metadata_.Clear();
}

bool PullRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PullRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.PullRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool return_immediately = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &return_immediately_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 max_messages = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_messages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PullRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PullRequest)
  return false;
#undef DO_
}

void PullRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PullRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PullRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // bool return_immediately = 2;
  if (this->return_immediately() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->return_immediately(), output);
  }

  // int32 max_messages = 3;
  if (this->max_messages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->max_messages(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PullRequest)
}

::google::protobuf::uint8* PullRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PullRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PullRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // bool return_immediately = 2;
  if (this->return_immediately() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->return_immediately(), target);
  }

  // int32 max_messages = 3;
  if (this->max_messages() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->max_messages(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PullRequest)
  return target;
}

size_t PullRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PullRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  // bool return_immediately = 2;
  if (this->return_immediately() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_messages = 3;
  if (this->max_messages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->max_messages());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PullRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PullRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PullRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PullRequest)
    MergeFrom(*source);
  }
}

void PullRequest::MergeFrom(const PullRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  if (from.return_immediately() != 0) {
    set_return_immediately(from.return_immediately());
  }
  if (from.max_messages() != 0) {
    set_max_messages(from.max_messages());
  }
}

void PullRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullRequest::CopyFrom(const PullRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullRequest::IsInitialized() const {
  return true;
}

void PullRequest::Swap(PullRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PullRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PullRequest::UnsafeArenaSwap(PullRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PullRequest::InternalSwap(PullRequest* other) {
  using std::swap;
  subscription_.Swap(&other->subscription_);
  swap(return_immediately_, other->return_immediately_);
  swap(max_messages_, other->max_messages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PullRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PullResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PullResponse::kReceivedMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PullResponse::PullResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPullResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PullResponse)
}
PullResponse::PullResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  received_messages_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPullResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PullResponse)
}
PullResponse::PullResponse(const PullResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      received_messages_(from.received_messages_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PullResponse)
}

void PullResponse::SharedCtor() {
  _cached_size_ = 0;
}

PullResponse::~PullResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PullResponse)
  SharedDtor();
}

void PullResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void PullResponse::ArenaDtor(void* object) {
  PullResponse* _this = reinterpret_cast< PullResponse* >(object);
  (void)_this;
}
void PullResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void PullResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PullResponse::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PullResponse& PullResponse::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPullResponse();
  return *internal_default_instance();
}

PullResponse* PullResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<PullResponse>(arena);
}

void PullResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PullResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  received_messages_.Clear();
  _internal_metadata_.Clear();
}

bool PullResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.PullResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_received_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.PullResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.PullResponse)
  return false;
#undef DO_
}

void PullResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.PullResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->received_messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->received_messages(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.PullResponse)
}

::google::protobuf::uint8* PullResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PullResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->received_messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->received_messages(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PullResponse)
  return target;
}

size_t PullResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PullResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->received_messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->received_messages(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PullResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PullResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PullResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PullResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PullResponse)
    MergeFrom(*source);
  }
}

void PullResponse::MergeFrom(const PullResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  received_messages_.MergeFrom(from.received_messages_);
}

void PullResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullResponse::CopyFrom(const PullResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullResponse::IsInitialized() const {
  return true;
}

void PullResponse::Swap(PullResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    PullResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void PullResponse::UnsafeArenaSwap(PullResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void PullResponse::InternalSwap(PullResponse* other) {
  using std::swap;
  received_messages_.InternalSwap(&other->received_messages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PullResponse::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ModifyAckDeadlineRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModifyAckDeadlineRequest::kSubscriptionFieldNumber;
const int ModifyAckDeadlineRequest::kAckIdsFieldNumber;
const int ModifyAckDeadlineRequest::kAckDeadlineSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModifyAckDeadlineRequest::ModifyAckDeadlineRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsModifyAckDeadlineRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ModifyAckDeadlineRequest)
}
ModifyAckDeadlineRequest::ModifyAckDeadlineRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  ack_ids_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsModifyAckDeadlineRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ModifyAckDeadlineRequest)
}
ModifyAckDeadlineRequest::ModifyAckDeadlineRequest(const ModifyAckDeadlineRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ack_ids_(from.ack_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  ack_deadline_seconds_ = from.ack_deadline_seconds_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ModifyAckDeadlineRequest)
}

void ModifyAckDeadlineRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ack_deadline_seconds_ = 0;
  _cached_size_ = 0;
}

ModifyAckDeadlineRequest::~ModifyAckDeadlineRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ModifyAckDeadlineRequest)
  SharedDtor();
}

void ModifyAckDeadlineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ModifyAckDeadlineRequest::ArenaDtor(void* object) {
  ModifyAckDeadlineRequest* _this = reinterpret_cast< ModifyAckDeadlineRequest* >(object);
  (void)_this;
}
void ModifyAckDeadlineRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ModifyAckDeadlineRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModifyAckDeadlineRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ModifyAckDeadlineRequest& ModifyAckDeadlineRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsModifyAckDeadlineRequest();
  return *internal_default_instance();
}

ModifyAckDeadlineRequest* ModifyAckDeadlineRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ModifyAckDeadlineRequest>(arena);
}

void ModifyAckDeadlineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_ids_.Clear();
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ack_deadline_seconds_ = 0;
  _internal_metadata_.Clear();
}

bool ModifyAckDeadlineRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ModifyAckDeadlineRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 ack_deadline_seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ack_deadline_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ack_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ack_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_ids(this->ack_ids_size() - 1).data(),
            static_cast<int>(this->ack_ids(this->ack_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ModifyAckDeadlineRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ModifyAckDeadlineRequest)
  return false;
#undef DO_
}

void ModifyAckDeadlineRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // int32 ack_deadline_seconds = 3;
  if (this->ack_deadline_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ack_deadline_seconds(), output);
  }

  // repeated string ack_ids = 4;
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), static_cast<int>(this->ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ack_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ModifyAckDeadlineRequest)
}

::google::protobuf::uint8* ModifyAckDeadlineRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // int32 ack_deadline_seconds = 3;
  if (this->ack_deadline_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ack_deadline_seconds(), target);
  }

  // repeated string ack_ids = 4;
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), static_cast<int>(this->ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->ack_ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ModifyAckDeadlineRequest)
  return target;
}

size_t ModifyAckDeadlineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ack_ids = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ack_ids_size());
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ack_ids(i));
  }

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  // int32 ack_deadline_seconds = 3;
  if (this->ack_deadline_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ack_deadline_seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModifyAckDeadlineRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyAckDeadlineRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ModifyAckDeadlineRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ModifyAckDeadlineRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ModifyAckDeadlineRequest)
    MergeFrom(*source);
  }
}

void ModifyAckDeadlineRequest::MergeFrom(const ModifyAckDeadlineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_ids_.MergeFrom(from.ack_ids_);
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  if (from.ack_deadline_seconds() != 0) {
    set_ack_deadline_seconds(from.ack_deadline_seconds());
  }
}

void ModifyAckDeadlineRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyAckDeadlineRequest::CopyFrom(const ModifyAckDeadlineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyAckDeadlineRequest::IsInitialized() const {
  return true;
}

void ModifyAckDeadlineRequest::Swap(ModifyAckDeadlineRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ModifyAckDeadlineRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ModifyAckDeadlineRequest::UnsafeArenaSwap(ModifyAckDeadlineRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ModifyAckDeadlineRequest::InternalSwap(ModifyAckDeadlineRequest* other) {
  using std::swap;
  ack_ids_.InternalSwap(&other->ack_ids_);
  subscription_.Swap(&other->subscription_);
  swap(ack_deadline_seconds_, other->ack_deadline_seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ModifyAckDeadlineRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AcknowledgeRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AcknowledgeRequest::kSubscriptionFieldNumber;
const int AcknowledgeRequest::kAckIdsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AcknowledgeRequest::AcknowledgeRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsAcknowledgeRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.AcknowledgeRequest)
}
AcknowledgeRequest::AcknowledgeRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  ack_ids_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsAcknowledgeRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.AcknowledgeRequest)
}
AcknowledgeRequest::AcknowledgeRequest(const AcknowledgeRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ack_ids_(from.ack_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.AcknowledgeRequest)
}

void AcknowledgeRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

AcknowledgeRequest::~AcknowledgeRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.AcknowledgeRequest)
  SharedDtor();
}

void AcknowledgeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AcknowledgeRequest::ArenaDtor(void* object) {
  AcknowledgeRequest* _this = reinterpret_cast< AcknowledgeRequest* >(object);
  (void)_this;
}
void AcknowledgeRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void AcknowledgeRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcknowledgeRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AcknowledgeRequest& AcknowledgeRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsAcknowledgeRequest();
  return *internal_default_instance();
}

AcknowledgeRequest* AcknowledgeRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<AcknowledgeRequest>(arena);
}

void AcknowledgeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.AcknowledgeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_ids_.Clear();
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool AcknowledgeRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.AcknowledgeRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.AcknowledgeRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ack_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ack_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_ids(this->ack_ids_size() - 1).data(),
            static_cast<int>(this->ack_ids(this->ack_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.AcknowledgeRequest.ack_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.AcknowledgeRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.AcknowledgeRequest)
  return false;
#undef DO_
}

void AcknowledgeRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.AcknowledgeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // repeated string ack_ids = 2;
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), static_cast<int>(this->ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.ack_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ack_ids(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.AcknowledgeRequest)
}

::google::protobuf::uint8* AcknowledgeRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.AcknowledgeRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // repeated string ack_ids = 2;
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), static_cast<int>(this->ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.ack_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ack_ids(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.AcknowledgeRequest)
  return target;
}

size_t AcknowledgeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.AcknowledgeRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ack_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ack_ids_size());
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ack_ids(i));
  }

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcknowledgeRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.AcknowledgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcknowledgeRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AcknowledgeRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.AcknowledgeRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.AcknowledgeRequest)
    MergeFrom(*source);
  }
}

void AcknowledgeRequest::MergeFrom(const AcknowledgeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.AcknowledgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_ids_.MergeFrom(from.ack_ids_);
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
}

void AcknowledgeRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.AcknowledgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcknowledgeRequest::CopyFrom(const AcknowledgeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.AcknowledgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcknowledgeRequest::IsInitialized() const {
  return true;
}

void AcknowledgeRequest::Swap(AcknowledgeRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    AcknowledgeRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void AcknowledgeRequest::UnsafeArenaSwap(AcknowledgeRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void AcknowledgeRequest::InternalSwap(AcknowledgeRequest* other) {
  using std::swap;
  ack_ids_.InternalSwap(&other->ack_ids_);
  subscription_.Swap(&other->subscription_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AcknowledgeRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamingPullRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingPullRequest::kSubscriptionFieldNumber;
const int StreamingPullRequest::kAckIdsFieldNumber;
const int StreamingPullRequest::kModifyDeadlineSecondsFieldNumber;
const int StreamingPullRequest::kModifyDeadlineAckIdsFieldNumber;
const int StreamingPullRequest::kStreamAckDeadlineSecondsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingPullRequest::StreamingPullRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsStreamingPullRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.StreamingPullRequest)
}
StreamingPullRequest::StreamingPullRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  ack_ids_(arena),
  modify_deadline_seconds_(arena),
  modify_deadline_ack_ids_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsStreamingPullRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.StreamingPullRequest)
}
StreamingPullRequest::StreamingPullRequest(const StreamingPullRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      ack_ids_(from.ack_ids_),
      modify_deadline_seconds_(from.modify_deadline_seconds_),
      modify_deadline_ack_ids_(from.modify_deadline_ack_ids_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  stream_ack_deadline_seconds_ = from.stream_ack_deadline_seconds_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.StreamingPullRequest)
}

void StreamingPullRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  stream_ack_deadline_seconds_ = 0;
  _cached_size_ = 0;
}

StreamingPullRequest::~StreamingPullRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.StreamingPullRequest)
  SharedDtor();
}

void StreamingPullRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void StreamingPullRequest::ArenaDtor(void* object) {
  StreamingPullRequest* _this = reinterpret_cast< StreamingPullRequest* >(object);
  (void)_this;
}
void StreamingPullRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamingPullRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingPullRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingPullRequest& StreamingPullRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsStreamingPullRequest();
  return *internal_default_instance();
}

StreamingPullRequest* StreamingPullRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamingPullRequest>(arena);
}

void StreamingPullRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.StreamingPullRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_ids_.Clear();
  modify_deadline_seconds_.Clear();
  modify_deadline_ack_ids_.Clear();
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_ack_deadline_seconds_ = 0;
  _internal_metadata_.Clear();
}

bool StreamingPullRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.StreamingPullRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.StreamingPullRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string ack_ids = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_ack_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ack_ids(this->ack_ids_size() - 1).data(),
            static_cast<int>(this->ack_ids(this->ack_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.StreamingPullRequest.ack_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 modify_deadline_seconds = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_modify_deadline_seconds())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26u, input, this->mutable_modify_deadline_seconds())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string modify_deadline_ack_ids = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_modify_deadline_ack_ids()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->modify_deadline_ack_ids(this->modify_deadline_ack_ids_size() - 1).data(),
            static_cast<int>(this->modify_deadline_ack_ids(this->modify_deadline_ack_ids_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stream_ack_deadline_seconds = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stream_ack_deadline_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.StreamingPullRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.StreamingPullRequest)
  return false;
#undef DO_
}

void StreamingPullRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.StreamingPullRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // repeated string ack_ids = 2;
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), static_cast<int>(this->ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.ack_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->ack_ids(i), output);
  }

  // repeated int32 modify_deadline_seconds = 3;
  if (this->modify_deadline_seconds_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _modify_deadline_seconds_cached_byte_size_));
  }
  for (int i = 0, n = this->modify_deadline_seconds_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->modify_deadline_seconds(i), output);
  }

  // repeated string modify_deadline_ack_ids = 4;
  for (int i = 0, n = this->modify_deadline_ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modify_deadline_ack_ids(i).data(), static_cast<int>(this->modify_deadline_ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->modify_deadline_ack_ids(i), output);
  }

  // int32 stream_ack_deadline_seconds = 5;
  if (this->stream_ack_deadline_seconds() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->stream_ack_deadline_seconds(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.StreamingPullRequest)
}

::google::protobuf::uint8* StreamingPullRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.StreamingPullRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // repeated string ack_ids = 2;
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ack_ids(i).data(), static_cast<int>(this->ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.ack_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->ack_ids(i), target);
  }

  // repeated int32 modify_deadline_seconds = 3;
  if (this->modify_deadline_seconds_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _modify_deadline_seconds_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->modify_deadline_seconds_, target);
  }

  // repeated string modify_deadline_ack_ids = 4;
  for (int i = 0, n = this->modify_deadline_ack_ids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->modify_deadline_ack_ids(i).data(), static_cast<int>(this->modify_deadline_ack_ids(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->modify_deadline_ack_ids(i), target);
  }

  // int32 stream_ack_deadline_seconds = 5;
  if (this->stream_ack_deadline_seconds() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->stream_ack_deadline_seconds(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.StreamingPullRequest)
  return target;
}

size_t StreamingPullRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.StreamingPullRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string ack_ids = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->ack_ids_size());
  for (int i = 0, n = this->ack_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->ack_ids(i));
  }

  // repeated int32 modify_deadline_seconds = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->modify_deadline_seconds_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _modify_deadline_seconds_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string modify_deadline_ack_ids = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->modify_deadline_ack_ids_size());
  for (int i = 0, n = this->modify_deadline_ack_ids_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->modify_deadline_ack_ids(i));
  }

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  // int32 stream_ack_deadline_seconds = 5;
  if (this->stream_ack_deadline_seconds() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stream_ack_deadline_seconds());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingPullRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.StreamingPullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingPullRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingPullRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.StreamingPullRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.StreamingPullRequest)
    MergeFrom(*source);
  }
}

void StreamingPullRequest::MergeFrom(const StreamingPullRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.StreamingPullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_ids_.MergeFrom(from.ack_ids_);
  modify_deadline_seconds_.MergeFrom(from.modify_deadline_seconds_);
  modify_deadline_ack_ids_.MergeFrom(from.modify_deadline_ack_ids_);
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  if (from.stream_ack_deadline_seconds() != 0) {
    set_stream_ack_deadline_seconds(from.stream_ack_deadline_seconds());
  }
}

void StreamingPullRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.StreamingPullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingPullRequest::CopyFrom(const StreamingPullRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.StreamingPullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingPullRequest::IsInitialized() const {
  return true;
}

void StreamingPullRequest::Swap(StreamingPullRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingPullRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingPullRequest::UnsafeArenaSwap(StreamingPullRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingPullRequest::InternalSwap(StreamingPullRequest* other) {
  using std::swap;
  ack_ids_.InternalSwap(&other->ack_ids_);
  modify_deadline_seconds_.InternalSwap(&other->modify_deadline_seconds_);
  modify_deadline_ack_ids_.InternalSwap(&other->modify_deadline_ack_ids_);
  subscription_.Swap(&other->subscription_);
  swap(stream_ack_deadline_seconds_, other->stream_ack_deadline_seconds_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingPullRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StreamingPullResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StreamingPullResponse::kReceivedMessagesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StreamingPullResponse::StreamingPullResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsStreamingPullResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.StreamingPullResponse)
}
StreamingPullResponse::StreamingPullResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  received_messages_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsStreamingPullResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.StreamingPullResponse)
}
StreamingPullResponse::StreamingPullResponse(const StreamingPullResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      received_messages_(from.received_messages_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.StreamingPullResponse)
}

void StreamingPullResponse::SharedCtor() {
  _cached_size_ = 0;
}

StreamingPullResponse::~StreamingPullResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.StreamingPullResponse)
  SharedDtor();
}

void StreamingPullResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void StreamingPullResponse::ArenaDtor(void* object) {
  StreamingPullResponse* _this = reinterpret_cast< StreamingPullResponse* >(object);
  (void)_this;
}
void StreamingPullResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void StreamingPullResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamingPullResponse::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StreamingPullResponse& StreamingPullResponse::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsStreamingPullResponse();
  return *internal_default_instance();
}

StreamingPullResponse* StreamingPullResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<StreamingPullResponse>(arena);
}

void StreamingPullResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.StreamingPullResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  received_messages_.Clear();
  _internal_metadata_.Clear();
}

bool StreamingPullResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.StreamingPullResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_received_messages()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.StreamingPullResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.StreamingPullResponse)
  return false;
#undef DO_
}

void StreamingPullResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.StreamingPullResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->received_messages_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->received_messages(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.StreamingPullResponse)
}

::google::protobuf::uint8* StreamingPullResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.StreamingPullResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->received_messages_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->received_messages(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.StreamingPullResponse)
  return target;
}

size_t StreamingPullResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.StreamingPullResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->received_messages_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->received_messages(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamingPullResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.StreamingPullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingPullResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StreamingPullResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.StreamingPullResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.StreamingPullResponse)
    MergeFrom(*source);
  }
}

void StreamingPullResponse::MergeFrom(const StreamingPullResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.StreamingPullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  received_messages_.MergeFrom(from.received_messages_);
}

void StreamingPullResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.StreamingPullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingPullResponse::CopyFrom(const StreamingPullResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.StreamingPullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingPullResponse::IsInitialized() const {
  return true;
}

void StreamingPullResponse::Swap(StreamingPullResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    StreamingPullResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void StreamingPullResponse::UnsafeArenaSwap(StreamingPullResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void StreamingPullResponse::InternalSwap(StreamingPullResponse* other) {
  using std::swap;
  received_messages_.InternalSwap(&other->received_messages_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StreamingPullResponse::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateSnapshotRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSnapshotRequest::kNameFieldNumber;
const int CreateSnapshotRequest::kSubscriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSnapshotRequest::CreateSnapshotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsCreateSnapshotRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.CreateSnapshotRequest)
}
CreateSnapshotRequest::CreateSnapshotRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsCreateSnapshotRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.CreateSnapshotRequest)
}
CreateSnapshotRequest::CreateSnapshotRequest(const CreateSnapshotRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.CreateSnapshotRequest)
}

void CreateSnapshotRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CreateSnapshotRequest::~CreateSnapshotRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.CreateSnapshotRequest)
  SharedDtor();
}

void CreateSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateSnapshotRequest::ArenaDtor(void* object) {
  CreateSnapshotRequest* _this = reinterpret_cast< CreateSnapshotRequest* >(object);
  (void)_this;
}
void CreateSnapshotRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateSnapshotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSnapshotRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateSnapshotRequest& CreateSnapshotRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsCreateSnapshotRequest();
  return *internal_default_instance();
}

CreateSnapshotRequest* CreateSnapshotRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateSnapshotRequest>(arena);
}

void CreateSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.CreateSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool CreateSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.CreateSnapshotRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.CreateSnapshotRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string subscription = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.CreateSnapshotRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.CreateSnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.CreateSnapshotRequest)
  return false;
#undef DO_
}

void CreateSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.CreateSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.CreateSnapshotRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string subscription = 2;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.CreateSnapshotRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->subscription(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.CreateSnapshotRequest)
}

::google::protobuf::uint8* CreateSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.CreateSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.CreateSnapshotRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string subscription = 2;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.CreateSnapshotRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->subscription(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.CreateSnapshotRequest)
  return target;
}

size_t CreateSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.CreateSnapshotRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string subscription = 2;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.CreateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSnapshotRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSnapshotRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.CreateSnapshotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.CreateSnapshotRequest)
    MergeFrom(*source);
  }
}

void CreateSnapshotRequest::MergeFrom(const CreateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.CreateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
}

void CreateSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.CreateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSnapshotRequest::CopyFrom(const CreateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.CreateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSnapshotRequest::IsInitialized() const {
  return true;
}

void CreateSnapshotRequest::Swap(CreateSnapshotRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateSnapshotRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateSnapshotRequest::UnsafeArenaSwap(CreateSnapshotRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateSnapshotRequest::InternalSwap(CreateSnapshotRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  subscription_.Swap(&other->subscription_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSnapshotRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateSnapshotRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_UpdateSnapshotRequest_default_instance_._instance.get_mutable()->snapshot_ = const_cast< ::google::pubsub::v1::Snapshot*>(
      ::google::pubsub::v1::Snapshot::internal_default_instance());
  ::google::pubsub::v1::_UpdateSnapshotRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
void UpdateSnapshotRequest::_slow_mutable_snapshot() {
  snapshot_ = ::google::protobuf::Arena::CreateMessage< ::google::pubsub::v1::Snapshot >(
      GetArenaNoVirtual());
}
void UpdateSnapshotRequest::unsafe_arena_set_allocated_snapshot(
    ::google::pubsub::v1::Snapshot* snapshot) {
  if (GetArenaNoVirtual() == NULL) {
    delete snapshot_;
  }
  snapshot_ = snapshot;
  if (snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
}
void UpdateSnapshotRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
void UpdateSnapshotRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
}
void UpdateSnapshotRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateSnapshotRequest::kSnapshotFieldNumber;
const int UpdateSnapshotRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateSnapshotRequest::UpdateSnapshotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsUpdateSnapshotRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.UpdateSnapshotRequest)
}
UpdateSnapshotRequest::UpdateSnapshotRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsUpdateSnapshotRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.UpdateSnapshotRequest)
}
UpdateSnapshotRequest::UpdateSnapshotRequest(const UpdateSnapshotRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_snapshot()) {
    snapshot_ = new ::google::pubsub::v1::Snapshot(*from.snapshot_);
  } else {
    snapshot_ = NULL;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.UpdateSnapshotRequest)
}

void UpdateSnapshotRequest::SharedCtor() {
  ::memset(&snapshot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&snapshot_)) + sizeof(update_mask_));
  _cached_size_ = 0;
}

UpdateSnapshotRequest::~UpdateSnapshotRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.UpdateSnapshotRequest)
  SharedDtor();
}

void UpdateSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  if (this != internal_default_instance()) delete snapshot_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateSnapshotRequest::ArenaDtor(void* object) {
  UpdateSnapshotRequest* _this = reinterpret_cast< UpdateSnapshotRequest* >(object);
  (void)_this;
}
void UpdateSnapshotRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateSnapshotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateSnapshotRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateSnapshotRequest& UpdateSnapshotRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsUpdateSnapshotRequest();
  return *internal_default_instance();
}

UpdateSnapshotRequest* UpdateSnapshotRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateSnapshotRequest>(arena);
}

void UpdateSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.UpdateSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && snapshot_ != NULL) {
    delete snapshot_;
  }
  snapshot_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
  _internal_metadata_.Clear();
}

bool UpdateSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.UpdateSnapshotRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.pubsub.v1.Snapshot snapshot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.UpdateSnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.UpdateSnapshotRequest)
  return false;
#undef DO_
}

void UpdateSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.UpdateSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Snapshot snapshot = 1;
  if (this->has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->snapshot_, output);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->update_mask_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.UpdateSnapshotRequest)
}

::google::protobuf::uint8* UpdateSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.UpdateSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Snapshot snapshot = 1;
  if (this->has_snapshot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->snapshot_, deterministic, target);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->update_mask_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.UpdateSnapshotRequest)
  return target;
}

size_t UpdateSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.UpdateSnapshotRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.pubsub.v1.Snapshot snapshot = 1;
  if (this->has_snapshot()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->snapshot_);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.UpdateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSnapshotRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateSnapshotRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.UpdateSnapshotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.UpdateSnapshotRequest)
    MergeFrom(*source);
  }
}

void UpdateSnapshotRequest::MergeFrom(const UpdateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.UpdateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_snapshot()) {
    mutable_snapshot()->::google::pubsub::v1::Snapshot::MergeFrom(from.snapshot());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.UpdateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSnapshotRequest::CopyFrom(const UpdateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.UpdateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSnapshotRequest::IsInitialized() const {
  return true;
}

void UpdateSnapshotRequest::Swap(UpdateSnapshotRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateSnapshotRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UpdateSnapshotRequest::UnsafeArenaSwap(UpdateSnapshotRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateSnapshotRequest::InternalSwap(UpdateSnapshotRequest* other) {
  using std::swap;
  swap(snapshot_, other->snapshot_);
  swap(update_mask_, other->update_mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateSnapshotRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

Snapshot_LabelsEntry_DoNotUse::Snapshot_LabelsEntry_DoNotUse() {}
Snapshot_LabelsEntry_DoNotUse::Snapshot_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void Snapshot_LabelsEntry_DoNotUse::MergeFrom(const Snapshot_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata Snapshot_LabelsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[32];
}
void Snapshot_LabelsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void Snapshot::InitAsDefaultInstance() {
  ::google::pubsub::v1::_Snapshot_default_instance_._instance.get_mutable()->expire_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void Snapshot::_slow_mutable_expire_time() {
  expire_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
}
void Snapshot::unsafe_arena_set_allocated_expire_time(
    ::google::protobuf::Timestamp* expire_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete expire_time_;
  }
  expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Snapshot.expire_time)
}
void Snapshot::clear_expire_time() {
  if (GetArenaNoVirtual() == NULL && expire_time_ != NULL) {
    delete expire_time_;
  }
  expire_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snapshot::kNameFieldNumber;
const int Snapshot::kTopicFieldNumber;
const int Snapshot::kExpireTimeFieldNumber;
const int Snapshot::kLabelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snapshot::Snapshot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSnapshot();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.Snapshot)
}
Snapshot::Snapshot(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSnapshot();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.topic().size() > 0) {
    topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic(),
      GetArenaNoVirtual());
  }
  if (from.has_expire_time()) {
    expire_time_ = new ::google::protobuf::Timestamp(*from.expire_time_);
  } else {
    expire_time_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.Snapshot)
}

void Snapshot::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expire_time_ = NULL;
  _cached_size_ = 0;
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.Snapshot)
  SharedDtor();
}

void Snapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expire_time_;
}

void Snapshot::ArenaDtor(void* object) {
  Snapshot* _this = reinterpret_cast< Snapshot* >(object);
  (void)_this;
}
void Snapshot::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Snapshot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Snapshot::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Snapshot& Snapshot::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSnapshot();
  return *internal_default_instance();
}

Snapshot* Snapshot::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Snapshot>(arena);
}

void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && expire_time_ != NULL) {
    delete expire_time_;
  }
  expire_time_ = NULL;
  _internal_metadata_.Clear();
}

bool Snapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.Snapshot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Snapshot.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string topic = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), static_cast<int>(this->topic().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Snapshot.topic"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp expire_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_expire_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, string> labels = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          Snapshot_LabelsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              Snapshot_LabelsEntry_DoNotUse,
              ::std::string, ::std::string,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              0 >,
            ::google::protobuf::Map< ::std::string, ::std::string > > parser(&labels_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Snapshot.LabelsEntry.key"));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.value().data(), static_cast<int>(parser.value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.Snapshot.LabelsEntry.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.Snapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.Snapshot)
  return false;
#undef DO_
}

void Snapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Snapshot.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Snapshot.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // .google.protobuf.Timestamp expire_time = 3;
  if (this->has_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->expire_time_, output);
  }

  // map<string, string> labels = 4;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Snapshot.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Snapshot.LabelsEntry.value");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Snapshot_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Snapshot_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.Snapshot)
}

::google::protobuf::uint8* Snapshot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Snapshot.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), static_cast<int>(this->topic().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Snapshot.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // .google.protobuf.Timestamp expire_time = 3;
  if (this->has_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->expire_time_, deterministic, target);
  }

  // map<string, string> labels = 4;
  if (!this->labels().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Snapshot.LabelsEntry.key");
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Snapshot.LabelsEntry.value");
      }
    };

    if (deterministic &&
        this->labels().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->labels().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::std::string >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<Snapshot_LabelsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(labels_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<Snapshot_LabelsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
          it = this->labels().begin();
          it != this->labels().end(); ++it) {
        entry.reset(labels_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        if (entry->GetArena() != NULL) {
          entry.release();
        }
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.Snapshot)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, string> labels = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->labels_size());
  {
    ::google::protobuf::scoped_ptr<Snapshot_LabelsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::std::string >::const_iterator
        it = this->labels().begin();
        it != this->labels().end(); ++it) {
      if (entry.get() != NULL && entry->GetArena() != NULL) {
        entry.release();
      }
      entry.reset(labels_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
    if (entry.get() != NULL && entry->GetArena() != NULL) {
      entry.release();
    }
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // .google.protobuf.Timestamp expire_time = 3;
  if (this->has_expire_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->expire_time_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Snapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Snapshot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Snapshot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.Snapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.Snapshot)
    MergeFrom(*source);
  }
}

void Snapshot::MergeFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.topic().size() > 0) {
    set_topic(from.topic());
  }
  if (from.has_expire_time()) {
    mutable_expire_time()->::google::protobuf::Timestamp::MergeFrom(from.expire_time());
  }
}

void Snapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::Swap(Snapshot* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Snapshot* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Snapshot::UnsafeArenaSwap(Snapshot* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_);
  topic_.Swap(&other->topic_);
  swap(expire_time_, other->expire_time_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Snapshot::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListSnapshotsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSnapshotsRequest::kProjectFieldNumber;
const int ListSnapshotsRequest::kPageSizeFieldNumber;
const int ListSnapshotsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSnapshotsRequest::ListSnapshotsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSnapshotsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSnapshotsRequest)
}
ListSnapshotsRequest::ListSnapshotsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSnapshotsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSnapshotsRequest)
}
ListSnapshotsRequest::ListSnapshotsRequest(const ListSnapshotsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project().size() > 0) {
    project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSnapshotsRequest)
}

void ListSnapshotsRequest::SharedCtor() {
  project_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListSnapshotsRequest::~ListSnapshotsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSnapshotsRequest)
  SharedDtor();
}

void ListSnapshotsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  project_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListSnapshotsRequest::ArenaDtor(void* object) {
  ListSnapshotsRequest* _this = reinterpret_cast< ListSnapshotsRequest* >(object);
  (void)_this;
}
void ListSnapshotsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListSnapshotsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSnapshotsRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListSnapshotsRequest& ListSnapshotsRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSnapshotsRequest();
  return *internal_default_instance();
}

ListSnapshotsRequest* ListSnapshotsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListSnapshotsRequest>(arena);
}

void ListSnapshotsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSnapshotsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

bool ListSnapshotsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListSnapshotsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string project = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project().data(), static_cast<int>(this->project().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSnapshotsRequest.project"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSnapshotsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListSnapshotsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListSnapshotsRequest)
  return false;
#undef DO_
}

void ListSnapshotsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListSnapshotsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsRequest.project");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->project(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListSnapshotsRequest)
}

::google::protobuf::uint8* ListSnapshotsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSnapshotsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project().data(), static_cast<int>(this->project().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsRequest.project");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSnapshotsRequest)
  return target;
}

size_t ListSnapshotsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSnapshotsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSnapshotsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSnapshotsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListSnapshotsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSnapshotsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSnapshotsRequest)
    MergeFrom(*source);
  }
}

void ListSnapshotsRequest::MergeFrom(const ListSnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {
    set_project(from.project());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListSnapshotsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSnapshotsRequest::CopyFrom(const ListSnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSnapshotsRequest::IsInitialized() const {
  return true;
}

void ListSnapshotsRequest::Swap(ListSnapshotsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListSnapshotsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListSnapshotsRequest::UnsafeArenaSwap(ListSnapshotsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListSnapshotsRequest::InternalSwap(ListSnapshotsRequest* other) {
  using std::swap;
  project_.Swap(&other->project_);
  page_token_.Swap(&other->page_token_);
  swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListSnapshotsRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListSnapshotsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListSnapshotsResponse::kSnapshotsFieldNumber;
const int ListSnapshotsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListSnapshotsResponse::ListSnapshotsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSnapshotsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSnapshotsResponse)
}
ListSnapshotsResponse::ListSnapshotsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  snapshots_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSnapshotsResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSnapshotsResponse)
}
ListSnapshotsResponse::ListSnapshotsResponse(const ListSnapshotsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      snapshots_(from.snapshots_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSnapshotsResponse)
}

void ListSnapshotsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListSnapshotsResponse::~ListSnapshotsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSnapshotsResponse)
  SharedDtor();
}

void ListSnapshotsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListSnapshotsResponse::ArenaDtor(void* object) {
  ListSnapshotsResponse* _this = reinterpret_cast< ListSnapshotsResponse* >(object);
  (void)_this;
}
void ListSnapshotsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListSnapshotsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListSnapshotsResponse::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListSnapshotsResponse& ListSnapshotsResponse::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSnapshotsResponse();
  return *internal_default_instance();
}

ListSnapshotsResponse* ListSnapshotsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListSnapshotsResponse>(arena);
}

void ListSnapshotsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSnapshotsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshots_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool ListSnapshotsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.ListSnapshotsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.pubsub.v1.Snapshot snapshots = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_snapshots()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.ListSnapshotsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.ListSnapshotsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.ListSnapshotsResponse)
  return false;
#undef DO_
}

void ListSnapshotsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.ListSnapshotsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Snapshot snapshots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snapshots_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->snapshots(static_cast<int>(i)), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.ListSnapshotsResponse)
}

::google::protobuf::uint8* ListSnapshotsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSnapshotsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Snapshot snapshots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snapshots_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->snapshots(static_cast<int>(i)), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSnapshotsResponse)
  return target;
}

size_t ListSnapshotsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSnapshotsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.pubsub.v1.Snapshot snapshots = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->snapshots_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->snapshots(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListSnapshotsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSnapshotsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSnapshotsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListSnapshotsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSnapshotsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSnapshotsResponse)
    MergeFrom(*source);
  }
}

void ListSnapshotsResponse::MergeFrom(const ListSnapshotsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSnapshotsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snapshots_.MergeFrom(from.snapshots_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListSnapshotsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSnapshotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSnapshotsResponse::CopyFrom(const ListSnapshotsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSnapshotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSnapshotsResponse::IsInitialized() const {
  return true;
}

void ListSnapshotsResponse::Swap(ListSnapshotsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListSnapshotsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListSnapshotsResponse::UnsafeArenaSwap(ListSnapshotsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListSnapshotsResponse::InternalSwap(ListSnapshotsResponse* other) {
  using std::swap;
  snapshots_.InternalSwap(&other->snapshots_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListSnapshotsResponse::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteSnapshotRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteSnapshotRequest::kSnapshotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteSnapshotRequest::DeleteSnapshotRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsDeleteSnapshotRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DeleteSnapshotRequest)
}
DeleteSnapshotRequest::DeleteSnapshotRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsDeleteSnapshotRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DeleteSnapshotRequest)
}
DeleteSnapshotRequest::DeleteSnapshotRequest(const DeleteSnapshotRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.snapshot().size() > 0) {
    snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.snapshot(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DeleteSnapshotRequest)
}

void DeleteSnapshotRequest::SharedCtor() {
  snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteSnapshotRequest::~DeleteSnapshotRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DeleteSnapshotRequest)
  SharedDtor();
}

void DeleteSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  snapshot_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteSnapshotRequest::ArenaDtor(void* object) {
  DeleteSnapshotRequest* _this = reinterpret_cast< DeleteSnapshotRequest* >(object);
  (void)_this;
}
void DeleteSnapshotRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteSnapshotRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSnapshotRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteSnapshotRequest& DeleteSnapshotRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsDeleteSnapshotRequest();
  return *internal_default_instance();
}

DeleteSnapshotRequest* DeleteSnapshotRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteSnapshotRequest>(arena);
}

void DeleteSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DeleteSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool DeleteSnapshotRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.DeleteSnapshotRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string snapshot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot().data(), static_cast<int>(this->snapshot().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.DeleteSnapshotRequest.snapshot"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.DeleteSnapshotRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.DeleteSnapshotRequest)
  return false;
#undef DO_
}

void DeleteSnapshotRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.DeleteSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot = 1;
  if (this->snapshot().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot().data(), static_cast<int>(this->snapshot().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteSnapshotRequest.snapshot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->snapshot(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.DeleteSnapshotRequest)
}

::google::protobuf::uint8* DeleteSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DeleteSnapshotRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot = 1;
  if (this->snapshot().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot().data(), static_cast<int>(this->snapshot().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteSnapshotRequest.snapshot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->snapshot(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DeleteSnapshotRequest)
  return target;
}

size_t DeleteSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DeleteSnapshotRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string snapshot = 1;
  if (this->snapshot().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->snapshot());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSnapshotRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DeleteSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSnapshotRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteSnapshotRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DeleteSnapshotRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DeleteSnapshotRequest)
    MergeFrom(*source);
  }
}

void DeleteSnapshotRequest::MergeFrom(const DeleteSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DeleteSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot().size() > 0) {
    set_snapshot(from.snapshot());
  }
}

void DeleteSnapshotRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DeleteSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSnapshotRequest::CopyFrom(const DeleteSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DeleteSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSnapshotRequest::IsInitialized() const {
  return true;
}

void DeleteSnapshotRequest::Swap(DeleteSnapshotRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteSnapshotRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteSnapshotRequest::UnsafeArenaSwap(DeleteSnapshotRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteSnapshotRequest::InternalSwap(DeleteSnapshotRequest* other) {
  using std::swap;
  snapshot_.Swap(&other->snapshot_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteSnapshotRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SeekRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_SeekRequest_default_instance_.time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::pubsub::v1::_SeekRequest_default_instance_.snapshot_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SeekRequest::set_allocated_time(::google::protobuf::Timestamp* time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    set_has_time();
    target_.time_ = time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.SeekRequest.time)
}
void SeekRequest::clear_time() {
  if (has_time()) {
    if (GetArenaNoVirtual() == NULL) {
      delete target_.time_;
    }
    clear_has_target();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SeekRequest::kSubscriptionFieldNumber;
const int SeekRequest::kTimeFieldNumber;
const int SeekRequest::kSnapshotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeekRequest::SeekRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSeekRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.SeekRequest)
}
SeekRequest::SeekRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSeekRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.SeekRequest)
}
SeekRequest::SeekRequest(const SeekRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.subscription().size() > 0) {
    subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.subscription(),
      GetArenaNoVirtual());
  }
  clear_has_target();
  switch (from.target_case()) {
    case kTime: {
      mutable_time()->::google::protobuf::Timestamp::MergeFrom(from.time());
      break;
    }
    case kSnapshot: {
      set_snapshot(from.snapshot());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.SeekRequest)
}

void SeekRequest::SharedCtor() {
  subscription_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_target();
  _cached_size_ = 0;
}

SeekRequest::~SeekRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.SeekRequest)
  SharedDtor();
}

void SeekRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  subscription_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_target()) {
    clear_target();
  }
}

void SeekRequest::ArenaDtor(void* object) {
  SeekRequest* _this = reinterpret_cast< SeekRequest* >(object);
  (void)_this;
}
void SeekRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SeekRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeekRequest::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeekRequest& SeekRequest::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSeekRequest();
  return *internal_default_instance();
}

SeekRequest* SeekRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SeekRequest>(arena);
}

void SeekRequest::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:google.pubsub.v1.SeekRequest)
  switch (target_case()) {
    case kTime: {
      if (GetArenaNoVirtual() == NULL) {
        delete target_.time_;
      }
      break;
    }
    case kSnapshot: {
      target_.snapshot_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void SeekRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.SeekRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_target();
  _internal_metadata_.Clear();
}

bool SeekRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.SeekRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string subscription = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_subscription()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscription().data(), static_cast<int>(this->subscription().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.SeekRequest.subscription"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp time = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string snapshot = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_snapshot()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->snapshot().data(), static_cast<int>(this->snapshot().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.pubsub.v1.SeekRequest.snapshot"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.SeekRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.SeekRequest)
  return false;
#undef DO_
}

void SeekRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.SeekRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.SeekRequest.subscription");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->subscription(), output);
  }

  // .google.protobuf.Timestamp time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *target_.time_, output);
  }

  // string snapshot = 3;
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot().data(), static_cast<int>(this->snapshot().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.SeekRequest.snapshot");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->snapshot(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.SeekRequest)
}

::google::protobuf::uint8* SeekRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.SeekRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscription().data(), static_cast<int>(this->subscription().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.SeekRequest.subscription");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->subscription(), target);
  }

  // .google.protobuf.Timestamp time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *target_.time_, deterministic, target);
  }

  // string snapshot = 3;
  if (has_snapshot()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->snapshot().data(), static_cast<int>(this->snapshot().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.SeekRequest.snapshot");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->snapshot(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.SeekRequest)
  return target;
}

size_t SeekRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.SeekRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->subscription());
  }

  switch (target_case()) {
    // .google.protobuf.Timestamp time = 2;
    case kTime: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *target_.time_);
      break;
    }
    // string snapshot = 3;
    case kSnapshot: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->snapshot());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeekRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.SeekRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SeekRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeekRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.SeekRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.SeekRequest)
    MergeFrom(*source);
  }
}

void SeekRequest::MergeFrom(const SeekRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.SeekRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    set_subscription(from.subscription());
  }
  switch (from.target_case()) {
    case kTime: {
      mutable_time()->::google::protobuf::Timestamp::MergeFrom(from.time());
      break;
    }
    case kSnapshot: {
      set_snapshot(from.snapshot());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void SeekRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.SeekRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeekRequest::CopyFrom(const SeekRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.SeekRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekRequest::IsInitialized() const {
  return true;
}

void SeekRequest::Swap(SeekRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SeekRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SeekRequest::UnsafeArenaSwap(SeekRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SeekRequest::InternalSwap(SeekRequest* other) {
  using std::swap;
  subscription_.Swap(&other->subscription_);
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeekRequest::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SeekResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SeekResponse::SeekResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSeekResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.SeekResponse)
}
SeekResponse::SeekResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSeekResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.SeekResponse)
}
SeekResponse::SeekResponse(const SeekResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.SeekResponse)
}

void SeekResponse::SharedCtor() {
  _cached_size_ = 0;
}

SeekResponse::~SeekResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.SeekResponse)
  SharedDtor();
}

void SeekResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void SeekResponse::ArenaDtor(void* object) {
  SeekResponse* _this = reinterpret_cast< SeekResponse* >(object);
  (void)_this;
}
void SeekResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SeekResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeekResponse::descriptor() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SeekResponse& SeekResponse::default_instance() {
  ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSeekResponse();
  return *internal_default_instance();
}

SeekResponse* SeekResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SeekResponse>(arena);
}

void SeekResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.SeekResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool SeekResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.pubsub.v1.SeekResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:google.pubsub.v1.SeekResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.pubsub.v1.SeekResponse)
  return false;
#undef DO_
}

void SeekResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.pubsub.v1.SeekResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.pubsub.v1.SeekResponse)
}

::google::protobuf::uint8* SeekResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.SeekResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.SeekResponse)
  return target;
}

size_t SeekResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.SeekResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeekResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.SeekResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SeekResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SeekResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.SeekResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.SeekResponse)
    MergeFrom(*source);
  }
}

void SeekResponse::MergeFrom(const SeekResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.SeekResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SeekResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.SeekResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeekResponse::CopyFrom(const SeekResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.SeekResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekResponse::IsInitialized() const {
  return true;
}

void SeekResponse::Swap(SeekResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SeekResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SeekResponse::UnsafeArenaSwap(SeekResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SeekResponse::InternalSwap(SeekResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SeekResponse::GetMetadata() const {
  protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace pubsub
}  // namespace google

// @@protoc_insertion_point(global_scope)
