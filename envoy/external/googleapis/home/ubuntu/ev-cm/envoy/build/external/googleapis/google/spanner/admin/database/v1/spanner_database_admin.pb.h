// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/admin/database/v1/spanner_database_admin.proto

#ifndef PROTOBUF_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto__INCLUDED
#define PROTOBUF_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/auth.pb.h"
#include "google/iam/v1/iam_policy.pb.h"
#include "google/iam/v1/policy.pb.h"
#include "google/longrunning/operations.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[11];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsDatabaseImpl();
void InitDefaultsDatabase();
void InitDefaultsListDatabasesRequestImpl();
void InitDefaultsListDatabasesRequest();
void InitDefaultsListDatabasesResponseImpl();
void InitDefaultsListDatabasesResponse();
void InitDefaultsCreateDatabaseRequestImpl();
void InitDefaultsCreateDatabaseRequest();
void InitDefaultsCreateDatabaseMetadataImpl();
void InitDefaultsCreateDatabaseMetadata();
void InitDefaultsGetDatabaseRequestImpl();
void InitDefaultsGetDatabaseRequest();
void InitDefaultsUpdateDatabaseDdlRequestImpl();
void InitDefaultsUpdateDatabaseDdlRequest();
void InitDefaultsUpdateDatabaseDdlMetadataImpl();
void InitDefaultsUpdateDatabaseDdlMetadata();
void InitDefaultsDropDatabaseRequestImpl();
void InitDefaultsDropDatabaseRequest();
void InitDefaultsGetDatabaseDdlRequestImpl();
void InitDefaultsGetDatabaseDdlRequest();
void InitDefaultsGetDatabaseDdlResponseImpl();
void InitDefaultsGetDatabaseDdlResponse();
inline void InitDefaults() {
  InitDefaultsDatabase();
  InitDefaultsListDatabasesRequest();
  InitDefaultsListDatabasesResponse();
  InitDefaultsCreateDatabaseRequest();
  InitDefaultsCreateDatabaseMetadata();
  InitDefaultsGetDatabaseRequest();
  InitDefaultsUpdateDatabaseDdlRequest();
  InitDefaultsUpdateDatabaseDdlMetadata();
  InitDefaultsDropDatabaseRequest();
  InitDefaultsGetDatabaseDdlRequest();
  InitDefaultsGetDatabaseDdlResponse();
}
}  // namespace protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto
namespace google {
namespace spanner {
namespace admin {
namespace database {
namespace v1 {
class CreateDatabaseMetadata;
class CreateDatabaseMetadataDefaultTypeInternal;
extern CreateDatabaseMetadataDefaultTypeInternal _CreateDatabaseMetadata_default_instance_;
class CreateDatabaseRequest;
class CreateDatabaseRequestDefaultTypeInternal;
extern CreateDatabaseRequestDefaultTypeInternal _CreateDatabaseRequest_default_instance_;
class Database;
class DatabaseDefaultTypeInternal;
extern DatabaseDefaultTypeInternal _Database_default_instance_;
class DropDatabaseRequest;
class DropDatabaseRequestDefaultTypeInternal;
extern DropDatabaseRequestDefaultTypeInternal _DropDatabaseRequest_default_instance_;
class GetDatabaseDdlRequest;
class GetDatabaseDdlRequestDefaultTypeInternal;
extern GetDatabaseDdlRequestDefaultTypeInternal _GetDatabaseDdlRequest_default_instance_;
class GetDatabaseDdlResponse;
class GetDatabaseDdlResponseDefaultTypeInternal;
extern GetDatabaseDdlResponseDefaultTypeInternal _GetDatabaseDdlResponse_default_instance_;
class GetDatabaseRequest;
class GetDatabaseRequestDefaultTypeInternal;
extern GetDatabaseRequestDefaultTypeInternal _GetDatabaseRequest_default_instance_;
class ListDatabasesRequest;
class ListDatabasesRequestDefaultTypeInternal;
extern ListDatabasesRequestDefaultTypeInternal _ListDatabasesRequest_default_instance_;
class ListDatabasesResponse;
class ListDatabasesResponseDefaultTypeInternal;
extern ListDatabasesResponseDefaultTypeInternal _ListDatabasesResponse_default_instance_;
class UpdateDatabaseDdlMetadata;
class UpdateDatabaseDdlMetadataDefaultTypeInternal;
extern UpdateDatabaseDdlMetadataDefaultTypeInternal _UpdateDatabaseDdlMetadata_default_instance_;
class UpdateDatabaseDdlRequest;
class UpdateDatabaseDdlRequestDefaultTypeInternal;
extern UpdateDatabaseDdlRequestDefaultTypeInternal _UpdateDatabaseDdlRequest_default_instance_;
}  // namespace v1
}  // namespace database
}  // namespace admin
}  // namespace spanner
}  // namespace google
namespace google {
namespace spanner {
namespace admin {
namespace database {
namespace v1 {

enum Database_State {
  Database_State_STATE_UNSPECIFIED = 0,
  Database_State_CREATING = 1,
  Database_State_READY = 2,
  Database_State_Database_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Database_State_Database_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Database_State_IsValid(int value);
const Database_State Database_State_State_MIN = Database_State_STATE_UNSPECIFIED;
const Database_State Database_State_State_MAX = Database_State_READY;
const int Database_State_State_ARRAYSIZE = Database_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Database_State_descriptor();
inline const ::std::string& Database_State_Name(Database_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Database_State_descriptor(), value);
}
inline bool Database_State_Parse(
    const ::std::string& name, Database_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Database_State>(
    Database_State_descriptor(), name, value);
}
// ===================================================================

class Database : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.Database) */ {
 public:
  Database();
  virtual ~Database();

  Database(const Database& from);

  inline Database& operator=(const Database& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Database(Database&& from) noexcept
    : Database() {
    *this = ::std::move(from);
  }

  inline Database& operator=(Database&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Database& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Database* internal_default_instance() {
    return reinterpret_cast<const Database*>(
               &_Database_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Database* other);
  friend void swap(Database& a, Database& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Database* New() const PROTOBUF_FINAL { return New(NULL); }

  Database* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Database& from);
  void MergeFrom(const Database& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Database* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Database_State State;
  static const State STATE_UNSPECIFIED =
    Database_State_STATE_UNSPECIFIED;
  static const State CREATING =
    Database_State_CREATING;
  static const State READY =
    Database_State_READY;
  static inline bool State_IsValid(int value) {
    return Database_State_IsValid(value);
  }
  static const State State_MIN =
    Database_State_State_MIN;
  static const State State_MAX =
    Database_State_State_MAX;
  static const int State_ARRAYSIZE =
    Database_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Database_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Database_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Database_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.spanner.admin.database.v1.Database.State state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::spanner::admin::database::v1::Database_State state() const;
  void set_state(::google::spanner::admin::database::v1::Database_State value);

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.Database)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaultsDatabaseImpl();
};
// -------------------------------------------------------------------

class ListDatabasesRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.ListDatabasesRequest) */ {
 public:
  ListDatabasesRequest();
  virtual ~ListDatabasesRequest();

  ListDatabasesRequest(const ListDatabasesRequest& from);

  inline ListDatabasesRequest& operator=(const ListDatabasesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListDatabasesRequest(ListDatabasesRequest&& from) noexcept
    : ListDatabasesRequest() {
    *this = ::std::move(from);
  }

  inline ListDatabasesRequest& operator=(ListDatabasesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDatabasesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDatabasesRequest* internal_default_instance() {
    return reinterpret_cast<const ListDatabasesRequest*>(
               &_ListDatabasesRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ListDatabasesRequest* other);
  friend void swap(ListDatabasesRequest& a, ListDatabasesRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListDatabasesRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListDatabasesRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListDatabasesRequest& from);
  void MergeFrom(const ListDatabasesRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListDatabasesRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.ListDatabasesRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaultsListDatabasesRequestImpl();
};
// -------------------------------------------------------------------

class ListDatabasesResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.ListDatabasesResponse) */ {
 public:
  ListDatabasesResponse();
  virtual ~ListDatabasesResponse();

  ListDatabasesResponse(const ListDatabasesResponse& from);

  inline ListDatabasesResponse& operator=(const ListDatabasesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListDatabasesResponse(ListDatabasesResponse&& from) noexcept
    : ListDatabasesResponse() {
    *this = ::std::move(from);
  }

  inline ListDatabasesResponse& operator=(ListDatabasesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListDatabasesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListDatabasesResponse* internal_default_instance() {
    return reinterpret_cast<const ListDatabasesResponse*>(
               &_ListDatabasesResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(ListDatabasesResponse* other);
  friend void swap(ListDatabasesResponse& a, ListDatabasesResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListDatabasesResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListDatabasesResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListDatabasesResponse& from);
  void MergeFrom(const ListDatabasesResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListDatabasesResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.spanner.admin.database.v1.Database databases = 1;
  int databases_size() const;
  void clear_databases();
  static const int kDatabasesFieldNumber = 1;
  const ::google::spanner::admin::database::v1::Database& databases(int index) const;
  ::google::spanner::admin::database::v1::Database* mutable_databases(int index);
  ::google::spanner::admin::database::v1::Database* add_databases();
  ::google::protobuf::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >*
      mutable_databases();
  const ::google::protobuf::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >&
      databases() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.ListDatabasesResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::spanner::admin::database::v1::Database > databases_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaultsListDatabasesResponseImpl();
};
// -------------------------------------------------------------------

class CreateDatabaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.CreateDatabaseRequest) */ {
 public:
  CreateDatabaseRequest();
  virtual ~CreateDatabaseRequest();

  CreateDatabaseRequest(const CreateDatabaseRequest& from);

  inline CreateDatabaseRequest& operator=(const CreateDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateDatabaseRequest(CreateDatabaseRequest&& from) noexcept
    : CreateDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline CreateDatabaseRequest& operator=(CreateDatabaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateDatabaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDatabaseRequest*>(
               &_CreateDatabaseRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(CreateDatabaseRequest* other);
  friend void swap(CreateDatabaseRequest& a, CreateDatabaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateDatabaseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateDatabaseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateDatabaseRequest& from);
  void MergeFrom(const CreateDatabaseRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateDatabaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string extra_statements = 3;
  int extra_statements_size() const;
  void clear_extra_statements();
  static const int kExtraStatementsFieldNumber = 3;
  const ::std::string& extra_statements(int index) const;
  ::std::string* mutable_extra_statements(int index);
  void set_extra_statements(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_extra_statements(int index, ::std::string&& value);
  #endif
  void set_extra_statements(int index, const char* value);
  void set_extra_statements(int index, const char* value, size_t size);
  ::std::string* add_extra_statements();
  void add_extra_statements(const ::std::string& value);
  #if LANG_CXX11
  void add_extra_statements(::std::string&& value);
  #endif
  void add_extra_statements(const char* value);
  void add_extra_statements(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& extra_statements() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_extra_statements();

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string create_statement = 2;
  void clear_create_statement();
  static const int kCreateStatementFieldNumber = 2;
  const ::std::string& create_statement() const;
  void set_create_statement(const ::std::string& value);
  #if LANG_CXX11
  void set_create_statement(::std::string&& value);
  #endif
  void set_create_statement(const char* value);
  void set_create_statement(const char* value, size_t size);
  ::std::string* mutable_create_statement();
  ::std::string* release_create_statement();
  void set_allocated_create_statement(::std::string* create_statement);

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.CreateDatabaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> extra_statements_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr create_statement_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaultsCreateDatabaseRequestImpl();
};
// -------------------------------------------------------------------

class CreateDatabaseMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.CreateDatabaseMetadata) */ {
 public:
  CreateDatabaseMetadata();
  virtual ~CreateDatabaseMetadata();

  CreateDatabaseMetadata(const CreateDatabaseMetadata& from);

  inline CreateDatabaseMetadata& operator=(const CreateDatabaseMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateDatabaseMetadata(CreateDatabaseMetadata&& from) noexcept
    : CreateDatabaseMetadata() {
    *this = ::std::move(from);
  }

  inline CreateDatabaseMetadata& operator=(CreateDatabaseMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateDatabaseMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDatabaseMetadata* internal_default_instance() {
    return reinterpret_cast<const CreateDatabaseMetadata*>(
               &_CreateDatabaseMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(CreateDatabaseMetadata* other);
  friend void swap(CreateDatabaseMetadata& a, CreateDatabaseMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateDatabaseMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateDatabaseMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateDatabaseMetadata& from);
  void MergeFrom(const CreateDatabaseMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateDatabaseMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string database = 1;
  void clear_database();
  static const int kDatabaseFieldNumber = 1;
  const ::std::string& database() const;
  void set_database(const ::std::string& value);
  #if LANG_CXX11
  void set_database(::std::string&& value);
  #endif
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  ::std::string* mutable_database();
  ::std::string* release_database();
  void set_allocated_database(::std::string* database);

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.CreateDatabaseMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr database_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaultsCreateDatabaseMetadataImpl();
};
// -------------------------------------------------------------------

class GetDatabaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.GetDatabaseRequest) */ {
 public:
  GetDatabaseRequest();
  virtual ~GetDatabaseRequest();

  GetDatabaseRequest(const GetDatabaseRequest& from);

  inline GetDatabaseRequest& operator=(const GetDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDatabaseRequest(GetDatabaseRequest&& from) noexcept
    : GetDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline GetDatabaseRequest& operator=(GetDatabaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDatabaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatabaseRequest*>(
               &_GetDatabaseRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(GetDatabaseRequest* other);
  friend void swap(GetDatabaseRequest& a, GetDatabaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDatabaseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDatabaseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDatabaseRequest& from);
  void MergeFrom(const GetDatabaseRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDatabaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.GetDatabaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaultsGetDatabaseRequestImpl();
};
// -------------------------------------------------------------------

class UpdateDatabaseDdlRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest) */ {
 public:
  UpdateDatabaseDdlRequest();
  virtual ~UpdateDatabaseDdlRequest();

  UpdateDatabaseDdlRequest(const UpdateDatabaseDdlRequest& from);

  inline UpdateDatabaseDdlRequest& operator=(const UpdateDatabaseDdlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateDatabaseDdlRequest(UpdateDatabaseDdlRequest&& from) noexcept
    : UpdateDatabaseDdlRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDatabaseDdlRequest& operator=(UpdateDatabaseDdlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDatabaseDdlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDatabaseDdlRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDatabaseDdlRequest*>(
               &_UpdateDatabaseDdlRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(UpdateDatabaseDdlRequest* other);
  friend void swap(UpdateDatabaseDdlRequest& a, UpdateDatabaseDdlRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateDatabaseDdlRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateDatabaseDdlRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateDatabaseDdlRequest& from);
  void MergeFrom(const UpdateDatabaseDdlRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateDatabaseDdlRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string statements = 2;
  int statements_size() const;
  void clear_statements();
  static const int kStatementsFieldNumber = 2;
  const ::std::string& statements(int index) const;
  ::std::string* mutable_statements(int index);
  void set_statements(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_statements(int index, ::std::string&& value);
  #endif
  void set_statements(int index, const char* value);
  void set_statements(int index, const char* value, size_t size);
  ::std::string* add_statements();
  void add_statements(const ::std::string& value);
  #if LANG_CXX11
  void add_statements(::std::string&& value);
  #endif
  void add_statements(const char* value);
  void add_statements(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& statements() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_statements();

  // string database = 1;
  void clear_database();
  static const int kDatabaseFieldNumber = 1;
  const ::std::string& database() const;
  void set_database(const ::std::string& value);
  #if LANG_CXX11
  void set_database(::std::string&& value);
  #endif
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  ::std::string* mutable_database();
  ::std::string* release_database();
  void set_allocated_database(::std::string* database);

  // string operation_id = 3;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 3;
  const ::std::string& operation_id() const;
  void set_operation_id(const ::std::string& value);
  #if LANG_CXX11
  void set_operation_id(::std::string&& value);
  #endif
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  ::std::string* mutable_operation_id();
  ::std::string* release_operation_id();
  void set_allocated_operation_id(::std::string* operation_id);

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> statements_;
  ::google::protobuf::internal::ArenaStringPtr database_;
  ::google::protobuf::internal::ArenaStringPtr operation_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaultsUpdateDatabaseDdlRequestImpl();
};
// -------------------------------------------------------------------

class UpdateDatabaseDdlMetadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata) */ {
 public:
  UpdateDatabaseDdlMetadata();
  virtual ~UpdateDatabaseDdlMetadata();

  UpdateDatabaseDdlMetadata(const UpdateDatabaseDdlMetadata& from);

  inline UpdateDatabaseDdlMetadata& operator=(const UpdateDatabaseDdlMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateDatabaseDdlMetadata(UpdateDatabaseDdlMetadata&& from) noexcept
    : UpdateDatabaseDdlMetadata() {
    *this = ::std::move(from);
  }

  inline UpdateDatabaseDdlMetadata& operator=(UpdateDatabaseDdlMetadata&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateDatabaseDdlMetadata& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateDatabaseDdlMetadata* internal_default_instance() {
    return reinterpret_cast<const UpdateDatabaseDdlMetadata*>(
               &_UpdateDatabaseDdlMetadata_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(UpdateDatabaseDdlMetadata* other);
  friend void swap(UpdateDatabaseDdlMetadata& a, UpdateDatabaseDdlMetadata& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateDatabaseDdlMetadata* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateDatabaseDdlMetadata* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateDatabaseDdlMetadata& from);
  void MergeFrom(const UpdateDatabaseDdlMetadata& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateDatabaseDdlMetadata* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string statements = 2;
  int statements_size() const;
  void clear_statements();
  static const int kStatementsFieldNumber = 2;
  const ::std::string& statements(int index) const;
  ::std::string* mutable_statements(int index);
  void set_statements(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_statements(int index, ::std::string&& value);
  #endif
  void set_statements(int index, const char* value);
  void set_statements(int index, const char* value, size_t size);
  ::std::string* add_statements();
  void add_statements(const ::std::string& value);
  #if LANG_CXX11
  void add_statements(::std::string&& value);
  #endif
  void add_statements(const char* value);
  void add_statements(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& statements() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_statements();

  // repeated .google.protobuf.Timestamp commit_timestamps = 3;
  int commit_timestamps_size() const;
  void clear_commit_timestamps();
  static const int kCommitTimestampsFieldNumber = 3;
  const ::google::protobuf::Timestamp& commit_timestamps(int index) const;
  ::google::protobuf::Timestamp* mutable_commit_timestamps(int index);
  ::google::protobuf::Timestamp* add_commit_timestamps();
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >*
      mutable_commit_timestamps();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >&
      commit_timestamps() const;

  // string database = 1;
  void clear_database();
  static const int kDatabaseFieldNumber = 1;
  const ::std::string& database() const;
  void set_database(const ::std::string& value);
  #if LANG_CXX11
  void set_database(::std::string&& value);
  #endif
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  ::std::string* mutable_database();
  ::std::string* release_database();
  void set_allocated_database(::std::string* database);

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> statements_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp > commit_timestamps_;
  ::google::protobuf::internal::ArenaStringPtr database_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaultsUpdateDatabaseDdlMetadataImpl();
};
// -------------------------------------------------------------------

class DropDatabaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.DropDatabaseRequest) */ {
 public:
  DropDatabaseRequest();
  virtual ~DropDatabaseRequest();

  DropDatabaseRequest(const DropDatabaseRequest& from);

  inline DropDatabaseRequest& operator=(const DropDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DropDatabaseRequest(DropDatabaseRequest&& from) noexcept
    : DropDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline DropDatabaseRequest& operator=(DropDatabaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DropDatabaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const DropDatabaseRequest*>(
               &_DropDatabaseRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(DropDatabaseRequest* other);
  friend void swap(DropDatabaseRequest& a, DropDatabaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DropDatabaseRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DropDatabaseRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DropDatabaseRequest& from);
  void MergeFrom(const DropDatabaseRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DropDatabaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string database = 1;
  void clear_database();
  static const int kDatabaseFieldNumber = 1;
  const ::std::string& database() const;
  void set_database(const ::std::string& value);
  #if LANG_CXX11
  void set_database(::std::string&& value);
  #endif
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  ::std::string* mutable_database();
  ::std::string* release_database();
  void set_allocated_database(::std::string* database);

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.DropDatabaseRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr database_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaultsDropDatabaseRequestImpl();
};
// -------------------------------------------------------------------

class GetDatabaseDdlRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.GetDatabaseDdlRequest) */ {
 public:
  GetDatabaseDdlRequest();
  virtual ~GetDatabaseDdlRequest();

  GetDatabaseDdlRequest(const GetDatabaseDdlRequest& from);

  inline GetDatabaseDdlRequest& operator=(const GetDatabaseDdlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDatabaseDdlRequest(GetDatabaseDdlRequest&& from) noexcept
    : GetDatabaseDdlRequest() {
    *this = ::std::move(from);
  }

  inline GetDatabaseDdlRequest& operator=(GetDatabaseDdlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDatabaseDdlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDatabaseDdlRequest* internal_default_instance() {
    return reinterpret_cast<const GetDatabaseDdlRequest*>(
               &_GetDatabaseDdlRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(GetDatabaseDdlRequest* other);
  friend void swap(GetDatabaseDdlRequest& a, GetDatabaseDdlRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDatabaseDdlRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDatabaseDdlRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDatabaseDdlRequest& from);
  void MergeFrom(const GetDatabaseDdlRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDatabaseDdlRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string database = 1;
  void clear_database();
  static const int kDatabaseFieldNumber = 1;
  const ::std::string& database() const;
  void set_database(const ::std::string& value);
  #if LANG_CXX11
  void set_database(::std::string&& value);
  #endif
  void set_database(const char* value);
  void set_database(const char* value, size_t size);
  ::std::string* mutable_database();
  ::std::string* release_database();
  void set_allocated_database(::std::string* database);

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.GetDatabaseDdlRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr database_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaultsGetDatabaseDdlRequestImpl();
};
// -------------------------------------------------------------------

class GetDatabaseDdlResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.spanner.admin.database.v1.GetDatabaseDdlResponse) */ {
 public:
  GetDatabaseDdlResponse();
  virtual ~GetDatabaseDdlResponse();

  GetDatabaseDdlResponse(const GetDatabaseDdlResponse& from);

  inline GetDatabaseDdlResponse& operator=(const GetDatabaseDdlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetDatabaseDdlResponse(GetDatabaseDdlResponse&& from) noexcept
    : GetDatabaseDdlResponse() {
    *this = ::std::move(from);
  }

  inline GetDatabaseDdlResponse& operator=(GetDatabaseDdlResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetDatabaseDdlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetDatabaseDdlResponse* internal_default_instance() {
    return reinterpret_cast<const GetDatabaseDdlResponse*>(
               &_GetDatabaseDdlResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(GetDatabaseDdlResponse* other);
  friend void swap(GetDatabaseDdlResponse& a, GetDatabaseDdlResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetDatabaseDdlResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  GetDatabaseDdlResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetDatabaseDdlResponse& from);
  void MergeFrom(const GetDatabaseDdlResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetDatabaseDdlResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string statements = 1;
  int statements_size() const;
  void clear_statements();
  static const int kStatementsFieldNumber = 1;
  const ::std::string& statements(int index) const;
  ::std::string* mutable_statements(int index);
  void set_statements(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_statements(int index, ::std::string&& value);
  #endif
  void set_statements(int index, const char* value);
  void set_statements(int index, const char* value, size_t size);
  ::std::string* add_statements();
  void add_statements(const ::std::string& value);
  #if LANG_CXX11
  void add_statements(::std::string&& value);
  #endif
  void add_statements(const char* value);
  void add_statements(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& statements() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_statements();

  // @@protoc_insertion_point(class_scope:google.spanner.admin.database.v1.GetDatabaseDdlResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> statements_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::TableStruct;
  friend void ::protobuf_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto::InitDefaultsGetDatabaseDdlResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Database

// string name = 1;
inline void Database::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Database::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.name)
  return name_.GetNoArena();
}
inline void Database::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Database.name)
}
#if LANG_CXX11
inline void Database::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.Database.name)
}
#endif
inline void Database::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.Database.name)
}
inline void Database::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.Database.name)
}
inline ::std::string* Database::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.Database.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Database::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.Database.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Database::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.Database.name)
}

// .google.spanner.admin.database.v1.Database.State state = 2;
inline void Database::clear_state() {
  state_ = 0;
}
inline ::google::spanner::admin::database::v1::Database_State Database::state() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.Database.state)
  return static_cast< ::google::spanner::admin::database::v1::Database_State >(state_);
}
inline void Database::set_state(::google::spanner::admin::database::v1::Database_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.Database.state)
}

// -------------------------------------------------------------------

// ListDatabasesRequest

// string parent = 1;
inline void ListDatabasesRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDatabasesRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
  return parent_.GetNoArena();
}
inline void ListDatabasesRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
#if LANG_CXX11
inline void ListDatabasesRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
#endif
inline void ListDatabasesRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
inline void ListDatabasesRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}
inline ::std::string* ListDatabasesRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDatabasesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDatabasesRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabasesRequest.parent)
}

// int32 page_size = 3;
inline void ListDatabasesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListDatabasesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesRequest.page_size)
  return page_size_;
}
inline void ListDatabasesRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesRequest.page_size)
}

// string page_token = 4;
inline void ListDatabasesRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDatabasesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListDatabasesRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
#if LANG_CXX11
inline void ListDatabasesRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
#endif
inline void ListDatabasesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
inline void ListDatabasesRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}
inline ::std::string* ListDatabasesRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDatabasesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDatabasesRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabasesRequest.page_token)
}

// -------------------------------------------------------------------

// ListDatabasesResponse

// repeated .google.spanner.admin.database.v1.Database databases = 1;
inline int ListDatabasesResponse::databases_size() const {
  return databases_.size();
}
inline void ListDatabasesResponse::clear_databases() {
  databases_.Clear();
}
inline const ::google::spanner::admin::database::v1::Database& ListDatabasesResponse::databases(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return databases_.Get(index);
}
inline ::google::spanner::admin::database::v1::Database* ListDatabasesResponse::mutable_databases(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return databases_.Mutable(index);
}
inline ::google::spanner::admin::database::v1::Database* ListDatabasesResponse::add_databases() {
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return databases_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >*
ListDatabasesResponse::mutable_databases() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return &databases_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::spanner::admin::database::v1::Database >&
ListDatabasesResponse::databases() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.ListDatabasesResponse.databases)
  return databases_;
}

// string next_page_token = 2;
inline void ListDatabasesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListDatabasesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListDatabasesResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
#if LANG_CXX11
inline void ListDatabasesResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
#endif
inline void ListDatabasesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
inline void ListDatabasesResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}
inline ::std::string* ListDatabasesResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListDatabasesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListDatabasesResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.ListDatabasesResponse.next_page_token)
}

// -------------------------------------------------------------------

// CreateDatabaseRequest

// string parent = 1;
inline void CreateDatabaseRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDatabaseRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateDatabaseRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
#if LANG_CXX11
inline void CreateDatabaseRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
#endif
inline void CreateDatabaseRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
inline void CreateDatabaseRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}
inline ::std::string* CreateDatabaseRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDatabaseRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDatabaseRequest::set_allocated_parent(::std::string* parent) {
  if (parent != NULL) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateDatabaseRequest.parent)
}

// string create_statement = 2;
inline void CreateDatabaseRequest::clear_create_statement() {
  create_statement_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDatabaseRequest::create_statement() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
  return create_statement_.GetNoArena();
}
inline void CreateDatabaseRequest::set_create_statement(const ::std::string& value) {
  
  create_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
#if LANG_CXX11
inline void CreateDatabaseRequest::set_create_statement(::std::string&& value) {
  
  create_statement_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
#endif
inline void CreateDatabaseRequest::set_create_statement(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  create_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
inline void CreateDatabaseRequest::set_create_statement(const char* value, size_t size) {
  
  create_statement_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}
inline ::std::string* CreateDatabaseRequest::mutable_create_statement() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
  return create_statement_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDatabaseRequest::release_create_statement() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
  
  return create_statement_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDatabaseRequest::set_allocated_create_statement(::std::string* create_statement) {
  if (create_statement != NULL) {
    
  } else {
    
  }
  create_statement_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_statement);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateDatabaseRequest.create_statement)
}

// repeated string extra_statements = 3;
inline int CreateDatabaseRequest::extra_statements_size() const {
  return extra_statements_.size();
}
inline void CreateDatabaseRequest::clear_extra_statements() {
  extra_statements_.Clear();
}
inline const ::std::string& CreateDatabaseRequest::extra_statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return extra_statements_.Get(index);
}
inline ::std::string* CreateDatabaseRequest::mutable_extra_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return extra_statements_.Mutable(index);
}
inline void CreateDatabaseRequest::set_extra_statements(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  extra_statements_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CreateDatabaseRequest::set_extra_statements(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  extra_statements_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CreateDatabaseRequest::set_extra_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline void CreateDatabaseRequest::set_extra_statements(int index, const char* value, size_t size) {
  extra_statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline ::std::string* CreateDatabaseRequest::add_extra_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return extra_statements_.Add();
}
inline void CreateDatabaseRequest::add_extra_statements(const ::std::string& value) {
  extra_statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
#if LANG_CXX11
inline void CreateDatabaseRequest::add_extra_statements(::std::string&& value) {
  extra_statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
#endif
inline void CreateDatabaseRequest::add_extra_statements(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  extra_statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline void CreateDatabaseRequest::add_extra_statements(const char* value, size_t size) {
  extra_statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
CreateDatabaseRequest::extra_statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return extra_statements_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
CreateDatabaseRequest::mutable_extra_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.CreateDatabaseRequest.extra_statements)
  return &extra_statements_;
}

// -------------------------------------------------------------------

// CreateDatabaseMetadata

// string database = 1;
inline void CreateDatabaseMetadata::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateDatabaseMetadata::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
  return database_.GetNoArena();
}
inline void CreateDatabaseMetadata::set_database(const ::std::string& value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
#if LANG_CXX11
inline void CreateDatabaseMetadata::set_database(::std::string&& value) {
  
  database_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
#endif
inline void CreateDatabaseMetadata::set_database(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
inline void CreateDatabaseMetadata::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}
inline ::std::string* CreateDatabaseMetadata::mutable_database() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDatabaseMetadata::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
  
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDatabaseMetadata::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.CreateDatabaseMetadata.database)
}

// -------------------------------------------------------------------

// GetDatabaseRequest

// string name = 1;
inline void GetDatabaseRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDatabaseRequest::name() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.GetDatabaseRequest.name)
  return name_.GetNoArena();
}
inline void GetDatabaseRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
#if LANG_CXX11
inline void GetDatabaseRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
#endif
inline void GetDatabaseRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
inline void GetDatabaseRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}
inline ::std::string* GetDatabaseRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.GetDatabaseRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDatabaseRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.GetDatabaseRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDatabaseRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.GetDatabaseRequest.name)
}

// -------------------------------------------------------------------

// UpdateDatabaseDdlRequest

// string database = 1;
inline void UpdateDatabaseDdlRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateDatabaseDdlRequest::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
  return database_.GetNoArena();
}
inline void UpdateDatabaseDdlRequest::set_database(const ::std::string& value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
#if LANG_CXX11
inline void UpdateDatabaseDdlRequest::set_database(::std::string&& value) {
  
  database_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
#endif
inline void UpdateDatabaseDdlRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
inline void UpdateDatabaseDdlRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}
inline ::std::string* UpdateDatabaseDdlRequest::mutable_database() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateDatabaseDdlRequest::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
  
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDatabaseDdlRequest::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.database)
}

// repeated string statements = 2;
inline int UpdateDatabaseDdlRequest::statements_size() const {
  return statements_.size();
}
inline void UpdateDatabaseDdlRequest::clear_statements() {
  statements_.Clear();
}
inline const ::std::string& UpdateDatabaseDdlRequest::statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return statements_.Get(index);
}
inline ::std::string* UpdateDatabaseDdlRequest::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return statements_.Mutable(index);
}
inline void UpdateDatabaseDdlRequest::set_statements(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  statements_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UpdateDatabaseDdlRequest::set_statements(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  statements_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UpdateDatabaseDdlRequest::set_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline void UpdateDatabaseDdlRequest::set_statements(int index, const char* value, size_t size) {
  statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline ::std::string* UpdateDatabaseDdlRequest::add_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return statements_.Add();
}
inline void UpdateDatabaseDdlRequest::add_statements(const ::std::string& value) {
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
#if LANG_CXX11
inline void UpdateDatabaseDdlRequest::add_statements(::std::string&& value) {
  statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
#endif
inline void UpdateDatabaseDdlRequest::add_statements(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline void UpdateDatabaseDdlRequest::add_statements(const char* value, size_t size) {
  statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateDatabaseDdlRequest::statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return statements_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateDatabaseDdlRequest::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.statements)
  return &statements_;
}

// string operation_id = 3;
inline void UpdateDatabaseDdlRequest::clear_operation_id() {
  operation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateDatabaseDdlRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
  return operation_id_.GetNoArena();
}
inline void UpdateDatabaseDdlRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
#if LANG_CXX11
inline void UpdateDatabaseDdlRequest::set_operation_id(::std::string&& value) {
  
  operation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
#endif
inline void UpdateDatabaseDdlRequest::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
inline void UpdateDatabaseDdlRequest::set_operation_id(const char* value, size_t size) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}
inline ::std::string* UpdateDatabaseDdlRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
  return operation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateDatabaseDdlRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
  
  return operation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDatabaseDdlRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != NULL) {
    
  } else {
    
  }
  operation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateDatabaseDdlRequest.operation_id)
}

// -------------------------------------------------------------------

// UpdateDatabaseDdlMetadata

// string database = 1;
inline void UpdateDatabaseDdlMetadata::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateDatabaseDdlMetadata::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
  return database_.GetNoArena();
}
inline void UpdateDatabaseDdlMetadata::set_database(const ::std::string& value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
#if LANG_CXX11
inline void UpdateDatabaseDdlMetadata::set_database(::std::string&& value) {
  
  database_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
#endif
inline void UpdateDatabaseDdlMetadata::set_database(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
inline void UpdateDatabaseDdlMetadata::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}
inline ::std::string* UpdateDatabaseDdlMetadata::mutable_database() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateDatabaseDdlMetadata::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
  
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateDatabaseDdlMetadata::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.database)
}

// repeated string statements = 2;
inline int UpdateDatabaseDdlMetadata::statements_size() const {
  return statements_.size();
}
inline void UpdateDatabaseDdlMetadata::clear_statements() {
  statements_.Clear();
}
inline const ::std::string& UpdateDatabaseDdlMetadata::statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return statements_.Get(index);
}
inline ::std::string* UpdateDatabaseDdlMetadata::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return statements_.Mutable(index);
}
inline void UpdateDatabaseDdlMetadata::set_statements(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  statements_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UpdateDatabaseDdlMetadata::set_statements(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  statements_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UpdateDatabaseDdlMetadata::set_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline void UpdateDatabaseDdlMetadata::set_statements(int index, const char* value, size_t size) {
  statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline ::std::string* UpdateDatabaseDdlMetadata::add_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return statements_.Add();
}
inline void UpdateDatabaseDdlMetadata::add_statements(const ::std::string& value) {
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
#if LANG_CXX11
inline void UpdateDatabaseDdlMetadata::add_statements(::std::string&& value) {
  statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
#endif
inline void UpdateDatabaseDdlMetadata::add_statements(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline void UpdateDatabaseDdlMetadata::add_statements(const char* value, size_t size) {
  statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
UpdateDatabaseDdlMetadata::statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return statements_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
UpdateDatabaseDdlMetadata::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.statements)
  return &statements_;
}

// repeated .google.protobuf.Timestamp commit_timestamps = 3;
inline int UpdateDatabaseDdlMetadata::commit_timestamps_size() const {
  return commit_timestamps_.size();
}
inline const ::google::protobuf::Timestamp& UpdateDatabaseDdlMetadata::commit_timestamps(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return commit_timestamps_.Get(index);
}
inline ::google::protobuf::Timestamp* UpdateDatabaseDdlMetadata::mutable_commit_timestamps(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return commit_timestamps_.Mutable(index);
}
inline ::google::protobuf::Timestamp* UpdateDatabaseDdlMetadata::add_commit_timestamps() {
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return commit_timestamps_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >*
UpdateDatabaseDdlMetadata::mutable_commit_timestamps() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return &commit_timestamps_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Timestamp >&
UpdateDatabaseDdlMetadata::commit_timestamps() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.UpdateDatabaseDdlMetadata.commit_timestamps)
  return commit_timestamps_;
}

// -------------------------------------------------------------------

// DropDatabaseRequest

// string database = 1;
inline void DropDatabaseRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DropDatabaseRequest::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.DropDatabaseRequest.database)
  return database_.GetNoArena();
}
inline void DropDatabaseRequest::set_database(const ::std::string& value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
#if LANG_CXX11
inline void DropDatabaseRequest::set_database(::std::string&& value) {
  
  database_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
#endif
inline void DropDatabaseRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
inline void DropDatabaseRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}
inline ::std::string* DropDatabaseRequest::mutable_database() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.DropDatabaseRequest.database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropDatabaseRequest::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.DropDatabaseRequest.database)
  
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropDatabaseRequest::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.DropDatabaseRequest.database)
}

// -------------------------------------------------------------------

// GetDatabaseDdlRequest

// string database = 1;
inline void GetDatabaseDdlRequest::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetDatabaseDdlRequest::database() const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
  return database_.GetNoArena();
}
inline void GetDatabaseDdlRequest::set_database(const ::std::string& value) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
#if LANG_CXX11
inline void GetDatabaseDdlRequest::set_database(::std::string&& value) {
  
  database_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
#endif
inline void GetDatabaseDdlRequest::set_database(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
inline void GetDatabaseDdlRequest::set_database(const char* value, size_t size) {
  
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}
inline ::std::string* GetDatabaseDdlRequest::mutable_database() {
  
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetDatabaseDdlRequest::release_database() {
  // @@protoc_insertion_point(field_release:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
  
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetDatabaseDdlRequest::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    
  } else {
    
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:google.spanner.admin.database.v1.GetDatabaseDdlRequest.database)
}

// -------------------------------------------------------------------

// GetDatabaseDdlResponse

// repeated string statements = 1;
inline int GetDatabaseDdlResponse::statements_size() const {
  return statements_.size();
}
inline void GetDatabaseDdlResponse::clear_statements() {
  statements_.Clear();
}
inline const ::std::string& GetDatabaseDdlResponse::statements(int index) const {
  // @@protoc_insertion_point(field_get:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return statements_.Get(index);
}
inline ::std::string* GetDatabaseDdlResponse::mutable_statements(int index) {
  // @@protoc_insertion_point(field_mutable:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return statements_.Mutable(index);
}
inline void GetDatabaseDdlResponse::set_statements(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  statements_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetDatabaseDdlResponse::set_statements(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  statements_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetDatabaseDdlResponse::set_statements(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  statements_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline void GetDatabaseDdlResponse::set_statements(int index, const char* value, size_t size) {
  statements_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline ::std::string* GetDatabaseDdlResponse::add_statements() {
  // @@protoc_insertion_point(field_add_mutable:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return statements_.Add();
}
inline void GetDatabaseDdlResponse::add_statements(const ::std::string& value) {
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
#if LANG_CXX11
inline void GetDatabaseDdlResponse::add_statements(::std::string&& value) {
  statements_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
#endif
inline void GetDatabaseDdlResponse::add_statements(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  statements_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline void GetDatabaseDdlResponse::add_statements(const char* value, size_t size) {
  statements_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
GetDatabaseDdlResponse::statements() const {
  // @@protoc_insertion_point(field_list:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return statements_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
GetDatabaseDdlResponse::mutable_statements() {
  // @@protoc_insertion_point(field_mutable_list:google.spanner.admin.database.v1.GetDatabaseDdlResponse.statements)
  return &statements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace database
}  // namespace admin
}  // namespace spanner
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::spanner::admin::database::v1::Database_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::spanner::admin::database::v1::Database_State>() {
  return ::google::spanner::admin::database::v1::Database_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fspanner_2fadmin_2fdatabase_2fv1_2fspanner_5fdatabase_5fadmin_2eproto__INCLUDED
