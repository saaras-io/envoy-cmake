// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/streetview/publish/v1/rpcmessages.proto

#ifndef PROTOBUF_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto__INCLUDED
#define PROTOBUF_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/field_mask.pb.h>
#include "google/rpc/status.pb.h"
#include "google/streetview/publish/v1/resources.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[13];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCreatePhotoRequestImpl();
void InitDefaultsCreatePhotoRequest();
void InitDefaultsGetPhotoRequestImpl();
void InitDefaultsGetPhotoRequest();
void InitDefaultsBatchGetPhotosRequestImpl();
void InitDefaultsBatchGetPhotosRequest();
void InitDefaultsBatchGetPhotosResponseImpl();
void InitDefaultsBatchGetPhotosResponse();
void InitDefaultsPhotoResponseImpl();
void InitDefaultsPhotoResponse();
void InitDefaultsListPhotosRequestImpl();
void InitDefaultsListPhotosRequest();
void InitDefaultsListPhotosResponseImpl();
void InitDefaultsListPhotosResponse();
void InitDefaultsUpdatePhotoRequestImpl();
void InitDefaultsUpdatePhotoRequest();
void InitDefaultsBatchUpdatePhotosRequestImpl();
void InitDefaultsBatchUpdatePhotosRequest();
void InitDefaultsBatchUpdatePhotosResponseImpl();
void InitDefaultsBatchUpdatePhotosResponse();
void InitDefaultsDeletePhotoRequestImpl();
void InitDefaultsDeletePhotoRequest();
void InitDefaultsBatchDeletePhotosRequestImpl();
void InitDefaultsBatchDeletePhotosRequest();
void InitDefaultsBatchDeletePhotosResponseImpl();
void InitDefaultsBatchDeletePhotosResponse();
inline void InitDefaults() {
  InitDefaultsCreatePhotoRequest();
  InitDefaultsGetPhotoRequest();
  InitDefaultsBatchGetPhotosRequest();
  InitDefaultsBatchGetPhotosResponse();
  InitDefaultsPhotoResponse();
  InitDefaultsListPhotosRequest();
  InitDefaultsListPhotosResponse();
  InitDefaultsUpdatePhotoRequest();
  InitDefaultsBatchUpdatePhotosRequest();
  InitDefaultsBatchUpdatePhotosResponse();
  InitDefaultsDeletePhotoRequest();
  InitDefaultsBatchDeletePhotosRequest();
  InitDefaultsBatchDeletePhotosResponse();
}
}  // namespace protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto
namespace google {
namespace streetview {
namespace publish {
namespace v1 {
class BatchDeletePhotosRequest;
class BatchDeletePhotosRequestDefaultTypeInternal;
extern BatchDeletePhotosRequestDefaultTypeInternal _BatchDeletePhotosRequest_default_instance_;
class BatchDeletePhotosResponse;
class BatchDeletePhotosResponseDefaultTypeInternal;
extern BatchDeletePhotosResponseDefaultTypeInternal _BatchDeletePhotosResponse_default_instance_;
class BatchGetPhotosRequest;
class BatchGetPhotosRequestDefaultTypeInternal;
extern BatchGetPhotosRequestDefaultTypeInternal _BatchGetPhotosRequest_default_instance_;
class BatchGetPhotosResponse;
class BatchGetPhotosResponseDefaultTypeInternal;
extern BatchGetPhotosResponseDefaultTypeInternal _BatchGetPhotosResponse_default_instance_;
class BatchUpdatePhotosRequest;
class BatchUpdatePhotosRequestDefaultTypeInternal;
extern BatchUpdatePhotosRequestDefaultTypeInternal _BatchUpdatePhotosRequest_default_instance_;
class BatchUpdatePhotosResponse;
class BatchUpdatePhotosResponseDefaultTypeInternal;
extern BatchUpdatePhotosResponseDefaultTypeInternal _BatchUpdatePhotosResponse_default_instance_;
class CreatePhotoRequest;
class CreatePhotoRequestDefaultTypeInternal;
extern CreatePhotoRequestDefaultTypeInternal _CreatePhotoRequest_default_instance_;
class DeletePhotoRequest;
class DeletePhotoRequestDefaultTypeInternal;
extern DeletePhotoRequestDefaultTypeInternal _DeletePhotoRequest_default_instance_;
class GetPhotoRequest;
class GetPhotoRequestDefaultTypeInternal;
extern GetPhotoRequestDefaultTypeInternal _GetPhotoRequest_default_instance_;
class ListPhotosRequest;
class ListPhotosRequestDefaultTypeInternal;
extern ListPhotosRequestDefaultTypeInternal _ListPhotosRequest_default_instance_;
class ListPhotosResponse;
class ListPhotosResponseDefaultTypeInternal;
extern ListPhotosResponseDefaultTypeInternal _ListPhotosResponse_default_instance_;
class PhotoResponse;
class PhotoResponseDefaultTypeInternal;
extern PhotoResponseDefaultTypeInternal _PhotoResponse_default_instance_;
class UpdatePhotoRequest;
class UpdatePhotoRequestDefaultTypeInternal;
extern UpdatePhotoRequestDefaultTypeInternal _UpdatePhotoRequest_default_instance_;
}  // namespace v1
}  // namespace publish
}  // namespace streetview
}  // namespace google
namespace google {
namespace streetview {
namespace publish {
namespace v1 {

enum PhotoView {
  BASIC = 0,
  INCLUDE_DOWNLOAD_URL = 1,
  PhotoView_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PhotoView_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PhotoView_IsValid(int value);
const PhotoView PhotoView_MIN = BASIC;
const PhotoView PhotoView_MAX = INCLUDE_DOWNLOAD_URL;
const int PhotoView_ARRAYSIZE = PhotoView_MAX + 1;

const ::google::protobuf::EnumDescriptor* PhotoView_descriptor();
inline const ::std::string& PhotoView_Name(PhotoView value) {
  return ::google::protobuf::internal::NameOfEnum(
    PhotoView_descriptor(), value);
}
inline bool PhotoView_Parse(
    const ::std::string& name, PhotoView* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PhotoView>(
    PhotoView_descriptor(), name, value);
}
// ===================================================================

class CreatePhotoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.CreatePhotoRequest) */ {
 public:
  CreatePhotoRequest();
  virtual ~CreatePhotoRequest();

  CreatePhotoRequest(const CreatePhotoRequest& from);

  inline CreatePhotoRequest& operator=(const CreatePhotoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreatePhotoRequest(CreatePhotoRequest&& from) noexcept
    : CreatePhotoRequest() {
    *this = ::std::move(from);
  }

  inline CreatePhotoRequest& operator=(CreatePhotoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreatePhotoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreatePhotoRequest* internal_default_instance() {
    return reinterpret_cast<const CreatePhotoRequest*>(
               &_CreatePhotoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CreatePhotoRequest* other);
  friend void swap(CreatePhotoRequest& a, CreatePhotoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreatePhotoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreatePhotoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreatePhotoRequest& from);
  void MergeFrom(const CreatePhotoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreatePhotoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.streetview.publish.v1.Photo photo = 1;
  bool has_photo() const;
  void clear_photo();
  static const int kPhotoFieldNumber = 1;
  const ::google::streetview::publish::v1::Photo& photo() const;
  ::google::streetview::publish::v1::Photo* release_photo();
  ::google::streetview::publish::v1::Photo* mutable_photo();
  void set_allocated_photo(::google::streetview::publish::v1::Photo* photo);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.CreatePhotoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::streetview::publish::v1::Photo* photo_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaultsCreatePhotoRequestImpl();
};
// -------------------------------------------------------------------

class GetPhotoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.GetPhotoRequest) */ {
 public:
  GetPhotoRequest();
  virtual ~GetPhotoRequest();

  GetPhotoRequest(const GetPhotoRequest& from);

  inline GetPhotoRequest& operator=(const GetPhotoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetPhotoRequest(GetPhotoRequest&& from) noexcept
    : GetPhotoRequest() {
    *this = ::std::move(from);
  }

  inline GetPhotoRequest& operator=(GetPhotoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetPhotoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetPhotoRequest* internal_default_instance() {
    return reinterpret_cast<const GetPhotoRequest*>(
               &_GetPhotoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(GetPhotoRequest* other);
  friend void swap(GetPhotoRequest& a, GetPhotoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetPhotoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetPhotoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetPhotoRequest& from);
  void MergeFrom(const GetPhotoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetPhotoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string photo_id = 1;
  void clear_photo_id();
  static const int kPhotoIdFieldNumber = 1;
  const ::std::string& photo_id() const;
  void set_photo_id(const ::std::string& value);
  #if LANG_CXX11
  void set_photo_id(::std::string&& value);
  #endif
  void set_photo_id(const char* value);
  void set_photo_id(const char* value, size_t size);
  ::std::string* mutable_photo_id();
  ::std::string* release_photo_id();
  void set_allocated_photo_id(::std::string* photo_id);

  // .google.streetview.publish.v1.PhotoView view = 2;
  void clear_view();
  static const int kViewFieldNumber = 2;
  ::google::streetview::publish::v1::PhotoView view() const;
  void set_view(::google::streetview::publish::v1::PhotoView value);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.GetPhotoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr photo_id_;
  int view_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaultsGetPhotoRequestImpl();
};
// -------------------------------------------------------------------

class BatchGetPhotosRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.BatchGetPhotosRequest) */ {
 public:
  BatchGetPhotosRequest();
  virtual ~BatchGetPhotosRequest();

  BatchGetPhotosRequest(const BatchGetPhotosRequest& from);

  inline BatchGetPhotosRequest& operator=(const BatchGetPhotosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchGetPhotosRequest(BatchGetPhotosRequest&& from) noexcept
    : BatchGetPhotosRequest() {
    *this = ::std::move(from);
  }

  inline BatchGetPhotosRequest& operator=(BatchGetPhotosRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchGetPhotosRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchGetPhotosRequest* internal_default_instance() {
    return reinterpret_cast<const BatchGetPhotosRequest*>(
               &_BatchGetPhotosRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(BatchGetPhotosRequest* other);
  friend void swap(BatchGetPhotosRequest& a, BatchGetPhotosRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchGetPhotosRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchGetPhotosRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchGetPhotosRequest& from);
  void MergeFrom(const BatchGetPhotosRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchGetPhotosRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string photo_ids = 1;
  int photo_ids_size() const;
  void clear_photo_ids();
  static const int kPhotoIdsFieldNumber = 1;
  const ::std::string& photo_ids(int index) const;
  ::std::string* mutable_photo_ids(int index);
  void set_photo_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_photo_ids(int index, ::std::string&& value);
  #endif
  void set_photo_ids(int index, const char* value);
  void set_photo_ids(int index, const char* value, size_t size);
  ::std::string* add_photo_ids();
  void add_photo_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_photo_ids(::std::string&& value);
  #endif
  void add_photo_ids(const char* value);
  void add_photo_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& photo_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_photo_ids();

  // .google.streetview.publish.v1.PhotoView view = 2;
  void clear_view();
  static const int kViewFieldNumber = 2;
  ::google::streetview::publish::v1::PhotoView view() const;
  void set_view(::google::streetview::publish::v1::PhotoView value);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.BatchGetPhotosRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> photo_ids_;
  int view_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaultsBatchGetPhotosRequestImpl();
};
// -------------------------------------------------------------------

class BatchGetPhotosResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.BatchGetPhotosResponse) */ {
 public:
  BatchGetPhotosResponse();
  virtual ~BatchGetPhotosResponse();

  BatchGetPhotosResponse(const BatchGetPhotosResponse& from);

  inline BatchGetPhotosResponse& operator=(const BatchGetPhotosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchGetPhotosResponse(BatchGetPhotosResponse&& from) noexcept
    : BatchGetPhotosResponse() {
    *this = ::std::move(from);
  }

  inline BatchGetPhotosResponse& operator=(BatchGetPhotosResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchGetPhotosResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchGetPhotosResponse* internal_default_instance() {
    return reinterpret_cast<const BatchGetPhotosResponse*>(
               &_BatchGetPhotosResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(BatchGetPhotosResponse* other);
  friend void swap(BatchGetPhotosResponse& a, BatchGetPhotosResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchGetPhotosResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchGetPhotosResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchGetPhotosResponse& from);
  void MergeFrom(const BatchGetPhotosResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchGetPhotosResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.streetview.publish.v1.PhotoResponse results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  const ::google::streetview::publish::v1::PhotoResponse& results(int index) const;
  ::google::streetview::publish::v1::PhotoResponse* mutable_results(int index);
  ::google::streetview::publish::v1::PhotoResponse* add_results();
  ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse >&
      results() const;

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.BatchGetPhotosResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse > results_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaultsBatchGetPhotosResponseImpl();
};
// -------------------------------------------------------------------

class PhotoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.PhotoResponse) */ {
 public:
  PhotoResponse();
  virtual ~PhotoResponse();

  PhotoResponse(const PhotoResponse& from);

  inline PhotoResponse& operator=(const PhotoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhotoResponse(PhotoResponse&& from) noexcept
    : PhotoResponse() {
    *this = ::std::move(from);
  }

  inline PhotoResponse& operator=(PhotoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhotoResponse* internal_default_instance() {
    return reinterpret_cast<const PhotoResponse*>(
               &_PhotoResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PhotoResponse* other);
  friend void swap(PhotoResponse& a, PhotoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhotoResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PhotoResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhotoResponse& from);
  void MergeFrom(const PhotoResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhotoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.rpc.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);

  // .google.streetview.publish.v1.Photo photo = 2;
  bool has_photo() const;
  void clear_photo();
  static const int kPhotoFieldNumber = 2;
  const ::google::streetview::publish::v1::Photo& photo() const;
  ::google::streetview::publish::v1::Photo* release_photo();
  ::google::streetview::publish::v1::Photo* mutable_photo();
  void set_allocated_photo(::google::streetview::publish::v1::Photo* photo);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.PhotoResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::rpc::Status* status_;
  ::google::streetview::publish::v1::Photo* photo_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaultsPhotoResponseImpl();
};
// -------------------------------------------------------------------

class ListPhotosRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.ListPhotosRequest) */ {
 public:
  ListPhotosRequest();
  virtual ~ListPhotosRequest();

  ListPhotosRequest(const ListPhotosRequest& from);

  inline ListPhotosRequest& operator=(const ListPhotosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListPhotosRequest(ListPhotosRequest&& from) noexcept
    : ListPhotosRequest() {
    *this = ::std::move(from);
  }

  inline ListPhotosRequest& operator=(ListPhotosRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListPhotosRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPhotosRequest* internal_default_instance() {
    return reinterpret_cast<const ListPhotosRequest*>(
               &_ListPhotosRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(ListPhotosRequest* other);
  friend void swap(ListPhotosRequest& a, ListPhotosRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListPhotosRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListPhotosRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListPhotosRequest& from);
  void MergeFrom(const ListPhotosRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListPhotosRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // string filter = 4;
  void clear_filter();
  static const int kFilterFieldNumber = 4;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // .google.streetview.publish.v1.PhotoView view = 1;
  void clear_view();
  static const int kViewFieldNumber = 1;
  ::google::streetview::publish::v1::PhotoView view() const;
  void set_view(::google::streetview::publish::v1::PhotoView value);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.ListPhotosRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  int view_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaultsListPhotosRequestImpl();
};
// -------------------------------------------------------------------

class ListPhotosResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.ListPhotosResponse) */ {
 public:
  ListPhotosResponse();
  virtual ~ListPhotosResponse();

  ListPhotosResponse(const ListPhotosResponse& from);

  inline ListPhotosResponse& operator=(const ListPhotosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListPhotosResponse(ListPhotosResponse&& from) noexcept
    : ListPhotosResponse() {
    *this = ::std::move(from);
  }

  inline ListPhotosResponse& operator=(ListPhotosResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListPhotosResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListPhotosResponse* internal_default_instance() {
    return reinterpret_cast<const ListPhotosResponse*>(
               &_ListPhotosResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ListPhotosResponse* other);
  friend void swap(ListPhotosResponse& a, ListPhotosResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListPhotosResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListPhotosResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListPhotosResponse& from);
  void MergeFrom(const ListPhotosResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListPhotosResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.streetview.publish.v1.Photo photos = 1;
  int photos_size() const;
  void clear_photos();
  static const int kPhotosFieldNumber = 1;
  const ::google::streetview::publish::v1::Photo& photos(int index) const;
  ::google::streetview::publish::v1::Photo* mutable_photos(int index);
  ::google::streetview::publish::v1::Photo* add_photos();
  ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Photo >*
      mutable_photos();
  const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Photo >&
      photos() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.ListPhotosResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Photo > photos_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaultsListPhotosResponseImpl();
};
// -------------------------------------------------------------------

class UpdatePhotoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.UpdatePhotoRequest) */ {
 public:
  UpdatePhotoRequest();
  virtual ~UpdatePhotoRequest();

  UpdatePhotoRequest(const UpdatePhotoRequest& from);

  inline UpdatePhotoRequest& operator=(const UpdatePhotoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdatePhotoRequest(UpdatePhotoRequest&& from) noexcept
    : UpdatePhotoRequest() {
    *this = ::std::move(from);
  }

  inline UpdatePhotoRequest& operator=(UpdatePhotoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdatePhotoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdatePhotoRequest* internal_default_instance() {
    return reinterpret_cast<const UpdatePhotoRequest*>(
               &_UpdatePhotoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(UpdatePhotoRequest* other);
  friend void swap(UpdatePhotoRequest& a, UpdatePhotoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdatePhotoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdatePhotoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdatePhotoRequest& from);
  void MergeFrom(const UpdatePhotoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdatePhotoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.streetview.publish.v1.Photo photo = 1;
  bool has_photo() const;
  void clear_photo();
  static const int kPhotoFieldNumber = 1;
  const ::google::streetview::publish::v1::Photo& photo() const;
  ::google::streetview::publish::v1::Photo* release_photo();
  ::google::streetview::publish::v1::Photo* mutable_photo();
  void set_allocated_photo(::google::streetview::publish::v1::Photo* photo);

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.UpdatePhotoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::streetview::publish::v1::Photo* photo_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaultsUpdatePhotoRequestImpl();
};
// -------------------------------------------------------------------

class BatchUpdatePhotosRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.BatchUpdatePhotosRequest) */ {
 public:
  BatchUpdatePhotosRequest();
  virtual ~BatchUpdatePhotosRequest();

  BatchUpdatePhotosRequest(const BatchUpdatePhotosRequest& from);

  inline BatchUpdatePhotosRequest& operator=(const BatchUpdatePhotosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchUpdatePhotosRequest(BatchUpdatePhotosRequest&& from) noexcept
    : BatchUpdatePhotosRequest() {
    *this = ::std::move(from);
  }

  inline BatchUpdatePhotosRequest& operator=(BatchUpdatePhotosRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchUpdatePhotosRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchUpdatePhotosRequest* internal_default_instance() {
    return reinterpret_cast<const BatchUpdatePhotosRequest*>(
               &_BatchUpdatePhotosRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(BatchUpdatePhotosRequest* other);
  friend void swap(BatchUpdatePhotosRequest& a, BatchUpdatePhotosRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchUpdatePhotosRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchUpdatePhotosRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchUpdatePhotosRequest& from);
  void MergeFrom(const BatchUpdatePhotosRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchUpdatePhotosRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.streetview.publish.v1.UpdatePhotoRequest update_photo_requests = 1;
  int update_photo_requests_size() const;
  void clear_update_photo_requests();
  static const int kUpdatePhotoRequestsFieldNumber = 1;
  const ::google::streetview::publish::v1::UpdatePhotoRequest& update_photo_requests(int index) const;
  ::google::streetview::publish::v1::UpdatePhotoRequest* mutable_update_photo_requests(int index);
  ::google::streetview::publish::v1::UpdatePhotoRequest* add_update_photo_requests();
  ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::UpdatePhotoRequest >*
      mutable_update_photo_requests();
  const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::UpdatePhotoRequest >&
      update_photo_requests() const;

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.BatchUpdatePhotosRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::UpdatePhotoRequest > update_photo_requests_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaultsBatchUpdatePhotosRequestImpl();
};
// -------------------------------------------------------------------

class BatchUpdatePhotosResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.BatchUpdatePhotosResponse) */ {
 public:
  BatchUpdatePhotosResponse();
  virtual ~BatchUpdatePhotosResponse();

  BatchUpdatePhotosResponse(const BatchUpdatePhotosResponse& from);

  inline BatchUpdatePhotosResponse& operator=(const BatchUpdatePhotosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchUpdatePhotosResponse(BatchUpdatePhotosResponse&& from) noexcept
    : BatchUpdatePhotosResponse() {
    *this = ::std::move(from);
  }

  inline BatchUpdatePhotosResponse& operator=(BatchUpdatePhotosResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchUpdatePhotosResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchUpdatePhotosResponse* internal_default_instance() {
    return reinterpret_cast<const BatchUpdatePhotosResponse*>(
               &_BatchUpdatePhotosResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(BatchUpdatePhotosResponse* other);
  friend void swap(BatchUpdatePhotosResponse& a, BatchUpdatePhotosResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchUpdatePhotosResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchUpdatePhotosResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchUpdatePhotosResponse& from);
  void MergeFrom(const BatchUpdatePhotosResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchUpdatePhotosResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.streetview.publish.v1.PhotoResponse results = 1;
  int results_size() const;
  void clear_results();
  static const int kResultsFieldNumber = 1;
  const ::google::streetview::publish::v1::PhotoResponse& results(int index) const;
  ::google::streetview::publish::v1::PhotoResponse* mutable_results(int index);
  ::google::streetview::publish::v1::PhotoResponse* add_results();
  ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse >*
      mutable_results();
  const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse >&
      results() const;

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.BatchUpdatePhotosResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse > results_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaultsBatchUpdatePhotosResponseImpl();
};
// -------------------------------------------------------------------

class DeletePhotoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.DeletePhotoRequest) */ {
 public:
  DeletePhotoRequest();
  virtual ~DeletePhotoRequest();

  DeletePhotoRequest(const DeletePhotoRequest& from);

  inline DeletePhotoRequest& operator=(const DeletePhotoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeletePhotoRequest(DeletePhotoRequest&& from) noexcept
    : DeletePhotoRequest() {
    *this = ::std::move(from);
  }

  inline DeletePhotoRequest& operator=(DeletePhotoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeletePhotoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeletePhotoRequest* internal_default_instance() {
    return reinterpret_cast<const DeletePhotoRequest*>(
               &_DeletePhotoRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DeletePhotoRequest* other);
  friend void swap(DeletePhotoRequest& a, DeletePhotoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeletePhotoRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeletePhotoRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeletePhotoRequest& from);
  void MergeFrom(const DeletePhotoRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeletePhotoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string photo_id = 1;
  void clear_photo_id();
  static const int kPhotoIdFieldNumber = 1;
  const ::std::string& photo_id() const;
  void set_photo_id(const ::std::string& value);
  #if LANG_CXX11
  void set_photo_id(::std::string&& value);
  #endif
  void set_photo_id(const char* value);
  void set_photo_id(const char* value, size_t size);
  ::std::string* mutable_photo_id();
  ::std::string* release_photo_id();
  void set_allocated_photo_id(::std::string* photo_id);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.DeletePhotoRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr photo_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaultsDeletePhotoRequestImpl();
};
// -------------------------------------------------------------------

class BatchDeletePhotosRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.BatchDeletePhotosRequest) */ {
 public:
  BatchDeletePhotosRequest();
  virtual ~BatchDeletePhotosRequest();

  BatchDeletePhotosRequest(const BatchDeletePhotosRequest& from);

  inline BatchDeletePhotosRequest& operator=(const BatchDeletePhotosRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchDeletePhotosRequest(BatchDeletePhotosRequest&& from) noexcept
    : BatchDeletePhotosRequest() {
    *this = ::std::move(from);
  }

  inline BatchDeletePhotosRequest& operator=(BatchDeletePhotosRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchDeletePhotosRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchDeletePhotosRequest* internal_default_instance() {
    return reinterpret_cast<const BatchDeletePhotosRequest*>(
               &_BatchDeletePhotosRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(BatchDeletePhotosRequest* other);
  friend void swap(BatchDeletePhotosRequest& a, BatchDeletePhotosRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchDeletePhotosRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchDeletePhotosRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchDeletePhotosRequest& from);
  void MergeFrom(const BatchDeletePhotosRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchDeletePhotosRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string photo_ids = 1;
  int photo_ids_size() const;
  void clear_photo_ids();
  static const int kPhotoIdsFieldNumber = 1;
  const ::std::string& photo_ids(int index) const;
  ::std::string* mutable_photo_ids(int index);
  void set_photo_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_photo_ids(int index, ::std::string&& value);
  #endif
  void set_photo_ids(int index, const char* value);
  void set_photo_ids(int index, const char* value, size_t size);
  ::std::string* add_photo_ids();
  void add_photo_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_photo_ids(::std::string&& value);
  #endif
  void add_photo_ids(const char* value);
  void add_photo_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& photo_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_photo_ids();

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.BatchDeletePhotosRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> photo_ids_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaultsBatchDeletePhotosRequestImpl();
};
// -------------------------------------------------------------------

class BatchDeletePhotosResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.BatchDeletePhotosResponse) */ {
 public:
  BatchDeletePhotosResponse();
  virtual ~BatchDeletePhotosResponse();

  BatchDeletePhotosResponse(const BatchDeletePhotosResponse& from);

  inline BatchDeletePhotosResponse& operator=(const BatchDeletePhotosResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchDeletePhotosResponse(BatchDeletePhotosResponse&& from) noexcept
    : BatchDeletePhotosResponse() {
    *this = ::std::move(from);
  }

  inline BatchDeletePhotosResponse& operator=(BatchDeletePhotosResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchDeletePhotosResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchDeletePhotosResponse* internal_default_instance() {
    return reinterpret_cast<const BatchDeletePhotosResponse*>(
               &_BatchDeletePhotosResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(BatchDeletePhotosResponse* other);
  friend void swap(BatchDeletePhotosResponse& a, BatchDeletePhotosResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchDeletePhotosResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  BatchDeletePhotosResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BatchDeletePhotosResponse& from);
  void MergeFrom(const BatchDeletePhotosResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BatchDeletePhotosResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.rpc.Status status = 1;
  int status_size() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::google::rpc::Status& status(int index) const;
  ::google::rpc::Status* mutable_status(int index);
  ::google::rpc::Status* add_status();
  ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >*
      mutable_status();
  const ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >&
      status() const;

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.BatchDeletePhotosResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::rpc::Status > status_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto::InitDefaultsBatchDeletePhotosResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreatePhotoRequest

// .google.streetview.publish.v1.Photo photo = 1;
inline bool CreatePhotoRequest::has_photo() const {
  return this != internal_default_instance() && photo_ != NULL;
}
inline const ::google::streetview::publish::v1::Photo& CreatePhotoRequest::photo() const {
  const ::google::streetview::publish::v1::Photo* p = photo_;
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.CreatePhotoRequest.photo)
  return p != NULL ? *p : *reinterpret_cast<const ::google::streetview::publish::v1::Photo*>(
      &::google::streetview::publish::v1::_Photo_default_instance_);
}
inline ::google::streetview::publish::v1::Photo* CreatePhotoRequest::release_photo() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.CreatePhotoRequest.photo)
  
  ::google::streetview::publish::v1::Photo* temp = photo_;
  photo_ = NULL;
  return temp;
}
inline ::google::streetview::publish::v1::Photo* CreatePhotoRequest::mutable_photo() {
  
  if (photo_ == NULL) {
    photo_ = new ::google::streetview::publish::v1::Photo;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.CreatePhotoRequest.photo)
  return photo_;
}
inline void CreatePhotoRequest::set_allocated_photo(::google::streetview::publish::v1::Photo* photo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(photo_);
  }
  if (photo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      photo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, photo, submessage_arena);
    }
    
  } else {
    
  }
  photo_ = photo;
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.CreatePhotoRequest.photo)
}

// -------------------------------------------------------------------

// GetPhotoRequest

// string photo_id = 1;
inline void GetPhotoRequest::clear_photo_id() {
  photo_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetPhotoRequest::photo_id() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.GetPhotoRequest.photo_id)
  return photo_id_.GetNoArena();
}
inline void GetPhotoRequest::set_photo_id(const ::std::string& value) {
  
  photo_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.GetPhotoRequest.photo_id)
}
#if LANG_CXX11
inline void GetPhotoRequest::set_photo_id(::std::string&& value) {
  
  photo_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.GetPhotoRequest.photo_id)
}
#endif
inline void GetPhotoRequest::set_photo_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  photo_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.GetPhotoRequest.photo_id)
}
inline void GetPhotoRequest::set_photo_id(const char* value, size_t size) {
  
  photo_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.GetPhotoRequest.photo_id)
}
inline ::std::string* GetPhotoRequest::mutable_photo_id() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.GetPhotoRequest.photo_id)
  return photo_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetPhotoRequest::release_photo_id() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.GetPhotoRequest.photo_id)
  
  return photo_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetPhotoRequest::set_allocated_photo_id(::std::string* photo_id) {
  if (photo_id != NULL) {
    
  } else {
    
  }
  photo_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_id);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.GetPhotoRequest.photo_id)
}

// .google.streetview.publish.v1.PhotoView view = 2;
inline void GetPhotoRequest::clear_view() {
  view_ = 0;
}
inline ::google::streetview::publish::v1::PhotoView GetPhotoRequest::view() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.GetPhotoRequest.view)
  return static_cast< ::google::streetview::publish::v1::PhotoView >(view_);
}
inline void GetPhotoRequest::set_view(::google::streetview::publish::v1::PhotoView value) {
  
  view_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.GetPhotoRequest.view)
}

// -------------------------------------------------------------------

// BatchGetPhotosRequest

// repeated string photo_ids = 1;
inline int BatchGetPhotosRequest::photo_ids_size() const {
  return photo_ids_.size();
}
inline void BatchGetPhotosRequest::clear_photo_ids() {
  photo_ids_.Clear();
}
inline const ::std::string& BatchGetPhotosRequest::photo_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  return photo_ids_.Get(index);
}
inline ::std::string* BatchGetPhotosRequest::mutable_photo_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  return photo_ids_.Mutable(index);
}
inline void BatchGetPhotosRequest::set_photo_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  photo_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BatchGetPhotosRequest::set_photo_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  photo_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BatchGetPhotosRequest::set_photo_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  photo_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
}
inline void BatchGetPhotosRequest::set_photo_ids(int index, const char* value, size_t size) {
  photo_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
}
inline ::std::string* BatchGetPhotosRequest::add_photo_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  return photo_ids_.Add();
}
inline void BatchGetPhotosRequest::add_photo_ids(const ::std::string& value) {
  photo_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
}
#if LANG_CXX11
inline void BatchGetPhotosRequest::add_photo_ids(::std::string&& value) {
  photo_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
}
#endif
inline void BatchGetPhotosRequest::add_photo_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  photo_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
}
inline void BatchGetPhotosRequest::add_photo_ids(const char* value, size_t size) {
  photo_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchGetPhotosRequest::photo_ids() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  return photo_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BatchGetPhotosRequest::mutable_photo_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.BatchGetPhotosRequest.photo_ids)
  return &photo_ids_;
}

// .google.streetview.publish.v1.PhotoView view = 2;
inline void BatchGetPhotosRequest::clear_view() {
  view_ = 0;
}
inline ::google::streetview::publish::v1::PhotoView BatchGetPhotosRequest::view() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchGetPhotosRequest.view)
  return static_cast< ::google::streetview::publish::v1::PhotoView >(view_);
}
inline void BatchGetPhotosRequest::set_view(::google::streetview::publish::v1::PhotoView value) {
  
  view_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.BatchGetPhotosRequest.view)
}

// -------------------------------------------------------------------

// BatchGetPhotosResponse

// repeated .google.streetview.publish.v1.PhotoResponse results = 1;
inline int BatchGetPhotosResponse::results_size() const {
  return results_.size();
}
inline void BatchGetPhotosResponse::clear_results() {
  results_.Clear();
}
inline const ::google::streetview::publish::v1::PhotoResponse& BatchGetPhotosResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchGetPhotosResponse.results)
  return results_.Get(index);
}
inline ::google::streetview::publish::v1::PhotoResponse* BatchGetPhotosResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.BatchGetPhotosResponse.results)
  return results_.Mutable(index);
}
inline ::google::streetview::publish::v1::PhotoResponse* BatchGetPhotosResponse::add_results() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchGetPhotosResponse.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse >*
BatchGetPhotosResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.BatchGetPhotosResponse.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse >&
BatchGetPhotosResponse::results() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.BatchGetPhotosResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// PhotoResponse

// .google.rpc.Status status = 1;
inline bool PhotoResponse::has_status() const {
  return this != internal_default_instance() && status_ != NULL;
}
inline const ::google::rpc::Status& PhotoResponse::status() const {
  const ::google::rpc::Status* p = status_;
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.PhotoResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* PhotoResponse::release_status() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.PhotoResponse.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::google::rpc::Status* PhotoResponse::mutable_status() {
  
  if (status_ == NULL) {
    status_ = new ::google::rpc::Status;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.PhotoResponse.status)
  return status_;
}
inline void PhotoResponse::set_allocated_status(::google::rpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.PhotoResponse.status)
}

// .google.streetview.publish.v1.Photo photo = 2;
inline bool PhotoResponse::has_photo() const {
  return this != internal_default_instance() && photo_ != NULL;
}
inline const ::google::streetview::publish::v1::Photo& PhotoResponse::photo() const {
  const ::google::streetview::publish::v1::Photo* p = photo_;
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.PhotoResponse.photo)
  return p != NULL ? *p : *reinterpret_cast<const ::google::streetview::publish::v1::Photo*>(
      &::google::streetview::publish::v1::_Photo_default_instance_);
}
inline ::google::streetview::publish::v1::Photo* PhotoResponse::release_photo() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.PhotoResponse.photo)
  
  ::google::streetview::publish::v1::Photo* temp = photo_;
  photo_ = NULL;
  return temp;
}
inline ::google::streetview::publish::v1::Photo* PhotoResponse::mutable_photo() {
  
  if (photo_ == NULL) {
    photo_ = new ::google::streetview::publish::v1::Photo;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.PhotoResponse.photo)
  return photo_;
}
inline void PhotoResponse::set_allocated_photo(::google::streetview::publish::v1::Photo* photo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(photo_);
  }
  if (photo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      photo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, photo, submessage_arena);
    }
    
  } else {
    
  }
  photo_ = photo;
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.PhotoResponse.photo)
}

// -------------------------------------------------------------------

// ListPhotosRequest

// .google.streetview.publish.v1.PhotoView view = 1;
inline void ListPhotosRequest::clear_view() {
  view_ = 0;
}
inline ::google::streetview::publish::v1::PhotoView ListPhotosRequest::view() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.ListPhotosRequest.view)
  return static_cast< ::google::streetview::publish::v1::PhotoView >(view_);
}
inline void ListPhotosRequest::set_view(::google::streetview::publish::v1::PhotoView value) {
  
  view_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.ListPhotosRequest.view)
}

// int32 page_size = 2;
inline void ListPhotosRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListPhotosRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.ListPhotosRequest.page_size)
  return page_size_;
}
inline void ListPhotosRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.ListPhotosRequest.page_size)
}

// string page_token = 3;
inline void ListPhotosRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListPhotosRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.ListPhotosRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListPhotosRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.ListPhotosRequest.page_token)
}
#if LANG_CXX11
inline void ListPhotosRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.ListPhotosRequest.page_token)
}
#endif
inline void ListPhotosRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.ListPhotosRequest.page_token)
}
inline void ListPhotosRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.ListPhotosRequest.page_token)
}
inline ::std::string* ListPhotosRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.ListPhotosRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListPhotosRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.ListPhotosRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListPhotosRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.ListPhotosRequest.page_token)
}

// string filter = 4;
inline void ListPhotosRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListPhotosRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.ListPhotosRequest.filter)
  return filter_.GetNoArena();
}
inline void ListPhotosRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.ListPhotosRequest.filter)
}
#if LANG_CXX11
inline void ListPhotosRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.ListPhotosRequest.filter)
}
#endif
inline void ListPhotosRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.ListPhotosRequest.filter)
}
inline void ListPhotosRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.ListPhotosRequest.filter)
}
inline ::std::string* ListPhotosRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.ListPhotosRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListPhotosRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.ListPhotosRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListPhotosRequest::set_allocated_filter(::std::string* filter) {
  if (filter != NULL) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.ListPhotosRequest.filter)
}

// -------------------------------------------------------------------

// ListPhotosResponse

// repeated .google.streetview.publish.v1.Photo photos = 1;
inline int ListPhotosResponse::photos_size() const {
  return photos_.size();
}
inline const ::google::streetview::publish::v1::Photo& ListPhotosResponse::photos(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.ListPhotosResponse.photos)
  return photos_.Get(index);
}
inline ::google::streetview::publish::v1::Photo* ListPhotosResponse::mutable_photos(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.ListPhotosResponse.photos)
  return photos_.Mutable(index);
}
inline ::google::streetview::publish::v1::Photo* ListPhotosResponse::add_photos() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.ListPhotosResponse.photos)
  return photos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Photo >*
ListPhotosResponse::mutable_photos() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.ListPhotosResponse.photos)
  return &photos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Photo >&
ListPhotosResponse::photos() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.ListPhotosResponse.photos)
  return photos_;
}

// string next_page_token = 2;
inline void ListPhotosResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListPhotosResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListPhotosResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
}
#if LANG_CXX11
inline void ListPhotosResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
}
#endif
inline void ListPhotosResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
}
inline void ListPhotosResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
}
inline ::std::string* ListPhotosResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListPhotosResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListPhotosResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.ListPhotosResponse.next_page_token)
}

// -------------------------------------------------------------------

// UpdatePhotoRequest

// .google.streetview.publish.v1.Photo photo = 1;
inline bool UpdatePhotoRequest::has_photo() const {
  return this != internal_default_instance() && photo_ != NULL;
}
inline const ::google::streetview::publish::v1::Photo& UpdatePhotoRequest::photo() const {
  const ::google::streetview::publish::v1::Photo* p = photo_;
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.UpdatePhotoRequest.photo)
  return p != NULL ? *p : *reinterpret_cast<const ::google::streetview::publish::v1::Photo*>(
      &::google::streetview::publish::v1::_Photo_default_instance_);
}
inline ::google::streetview::publish::v1::Photo* UpdatePhotoRequest::release_photo() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.UpdatePhotoRequest.photo)
  
  ::google::streetview::publish::v1::Photo* temp = photo_;
  photo_ = NULL;
  return temp;
}
inline ::google::streetview::publish::v1::Photo* UpdatePhotoRequest::mutable_photo() {
  
  if (photo_ == NULL) {
    photo_ = new ::google::streetview::publish::v1::Photo;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.UpdatePhotoRequest.photo)
  return photo_;
}
inline void UpdatePhotoRequest::set_allocated_photo(::google::streetview::publish::v1::Photo* photo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(photo_);
  }
  if (photo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      photo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, photo, submessage_arena);
    }
    
  } else {
    
  }
  photo_ = photo;
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.UpdatePhotoRequest.photo)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdatePhotoRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdatePhotoRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.UpdatePhotoRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdatePhotoRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.UpdatePhotoRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdatePhotoRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    update_mask_ = new ::google::protobuf::FieldMask;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.UpdatePhotoRequest.update_mask)
  return update_mask_;
}
inline void UpdatePhotoRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.UpdatePhotoRequest.update_mask)
}

// -------------------------------------------------------------------

// BatchUpdatePhotosRequest

// repeated .google.streetview.publish.v1.UpdatePhotoRequest update_photo_requests = 1;
inline int BatchUpdatePhotosRequest::update_photo_requests_size() const {
  return update_photo_requests_.size();
}
inline void BatchUpdatePhotosRequest::clear_update_photo_requests() {
  update_photo_requests_.Clear();
}
inline const ::google::streetview::publish::v1::UpdatePhotoRequest& BatchUpdatePhotosRequest::update_photo_requests(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchUpdatePhotosRequest.update_photo_requests)
  return update_photo_requests_.Get(index);
}
inline ::google::streetview::publish::v1::UpdatePhotoRequest* BatchUpdatePhotosRequest::mutable_update_photo_requests(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.BatchUpdatePhotosRequest.update_photo_requests)
  return update_photo_requests_.Mutable(index);
}
inline ::google::streetview::publish::v1::UpdatePhotoRequest* BatchUpdatePhotosRequest::add_update_photo_requests() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchUpdatePhotosRequest.update_photo_requests)
  return update_photo_requests_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::UpdatePhotoRequest >*
BatchUpdatePhotosRequest::mutable_update_photo_requests() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.BatchUpdatePhotosRequest.update_photo_requests)
  return &update_photo_requests_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::UpdatePhotoRequest >&
BatchUpdatePhotosRequest::update_photo_requests() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.BatchUpdatePhotosRequest.update_photo_requests)
  return update_photo_requests_;
}

// -------------------------------------------------------------------

// BatchUpdatePhotosResponse

// repeated .google.streetview.publish.v1.PhotoResponse results = 1;
inline int BatchUpdatePhotosResponse::results_size() const {
  return results_.size();
}
inline void BatchUpdatePhotosResponse::clear_results() {
  results_.Clear();
}
inline const ::google::streetview::publish::v1::PhotoResponse& BatchUpdatePhotosResponse::results(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchUpdatePhotosResponse.results)
  return results_.Get(index);
}
inline ::google::streetview::publish::v1::PhotoResponse* BatchUpdatePhotosResponse::mutable_results(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.BatchUpdatePhotosResponse.results)
  return results_.Mutable(index);
}
inline ::google::streetview::publish::v1::PhotoResponse* BatchUpdatePhotosResponse::add_results() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchUpdatePhotosResponse.results)
  return results_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse >*
BatchUpdatePhotosResponse::mutable_results() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.BatchUpdatePhotosResponse.results)
  return &results_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::PhotoResponse >&
BatchUpdatePhotosResponse::results() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.BatchUpdatePhotosResponse.results)
  return results_;
}

// -------------------------------------------------------------------

// DeletePhotoRequest

// string photo_id = 1;
inline void DeletePhotoRequest::clear_photo_id() {
  photo_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeletePhotoRequest::photo_id() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
  return photo_id_.GetNoArena();
}
inline void DeletePhotoRequest::set_photo_id(const ::std::string& value) {
  
  photo_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
}
#if LANG_CXX11
inline void DeletePhotoRequest::set_photo_id(::std::string&& value) {
  
  photo_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
}
#endif
inline void DeletePhotoRequest::set_photo_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  photo_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
}
inline void DeletePhotoRequest::set_photo_id(const char* value, size_t size) {
  
  photo_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
}
inline ::std::string* DeletePhotoRequest::mutable_photo_id() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
  return photo_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeletePhotoRequest::release_photo_id() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
  
  return photo_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeletePhotoRequest::set_allocated_photo_id(::std::string* photo_id) {
  if (photo_id != NULL) {
    
  } else {
    
  }
  photo_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), photo_id);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.DeletePhotoRequest.photo_id)
}

// -------------------------------------------------------------------

// BatchDeletePhotosRequest

// repeated string photo_ids = 1;
inline int BatchDeletePhotosRequest::photo_ids_size() const {
  return photo_ids_.size();
}
inline void BatchDeletePhotosRequest::clear_photo_ids() {
  photo_ids_.Clear();
}
inline const ::std::string& BatchDeletePhotosRequest::photo_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  return photo_ids_.Get(index);
}
inline ::std::string* BatchDeletePhotosRequest::mutable_photo_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  return photo_ids_.Mutable(index);
}
inline void BatchDeletePhotosRequest::set_photo_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  photo_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void BatchDeletePhotosRequest::set_photo_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  photo_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void BatchDeletePhotosRequest::set_photo_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  photo_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
}
inline void BatchDeletePhotosRequest::set_photo_ids(int index, const char* value, size_t size) {
  photo_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
}
inline ::std::string* BatchDeletePhotosRequest::add_photo_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  return photo_ids_.Add();
}
inline void BatchDeletePhotosRequest::add_photo_ids(const ::std::string& value) {
  photo_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
}
#if LANG_CXX11
inline void BatchDeletePhotosRequest::add_photo_ids(::std::string&& value) {
  photo_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
}
#endif
inline void BatchDeletePhotosRequest::add_photo_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  photo_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
}
inline void BatchDeletePhotosRequest::add_photo_ids(const char* value, size_t size) {
  photo_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchDeletePhotosRequest::photo_ids() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  return photo_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BatchDeletePhotosRequest::mutable_photo_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.BatchDeletePhotosRequest.photo_ids)
  return &photo_ids_;
}

// -------------------------------------------------------------------

// BatchDeletePhotosResponse

// repeated .google.rpc.Status status = 1;
inline int BatchDeletePhotosResponse::status_size() const {
  return status_.size();
}
inline const ::google::rpc::Status& BatchDeletePhotosResponse::status(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.BatchDeletePhotosResponse.status)
  return status_.Get(index);
}
inline ::google::rpc::Status* BatchDeletePhotosResponse::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.BatchDeletePhotosResponse.status)
  return status_.Mutable(index);
}
inline ::google::rpc::Status* BatchDeletePhotosResponse::add_status() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.BatchDeletePhotosResponse.status)
  return status_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >*
BatchDeletePhotosResponse::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.BatchDeletePhotosResponse.status)
  return &status_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::rpc::Status >&
BatchDeletePhotosResponse::status() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.BatchDeletePhotosResponse.status)
  return status_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace publish
}  // namespace streetview
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::streetview::publish::v1::PhotoView> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::streetview::publish::v1::PhotoView>() {
  return ::google::streetview::publish::v1::PhotoView_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fstreetview_2fpublish_2fv1_2frpcmessages_2eproto__INCLUDED
