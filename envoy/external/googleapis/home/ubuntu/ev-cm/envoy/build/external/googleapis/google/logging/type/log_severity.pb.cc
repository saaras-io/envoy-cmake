// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/type/log_severity.proto

#include "google/logging/type/log_severity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace logging {
namespace type {
}  // namespace type
}  // namespace logging
}  // namespace google
namespace protobuf_google_2flogging_2ftype_2flog_5fseverity_2eproto {
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/logging/type/log_severity.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&google/logging/type/log_severity.proto"
      "\022\023google.logging.type\032\034google/api/annota"
      "tions.proto*\202\001\n\013LogSeverity\022\013\n\007DEFAULT\020\000"
      "\022\t\n\005DEBUG\020d\022\t\n\004INFO\020\310\001\022\013\n\006NOTICE\020\254\002\022\014\n\007W"
      "ARNING\020\220\003\022\n\n\005ERROR\020\364\003\022\r\n\010CRITICAL\020\330\004\022\n\n\005"
      "ALERT\020\274\005\022\016\n\tEMERGENCY\020\240\006B\203\001\n\027com.google."
      "logging.typeB\020LogSeverityProtoP\001Z8google"
      ".golang.org/genproto/googleapis/logging/"
      "type;ltype\252\002\031Google.Cloud.Logging.Typeb\006"
      "proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 366);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/logging/type/log_severity.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2flogging_2ftype_2flog_5fseverity_2eproto
namespace google {
namespace logging {
namespace type {
const ::google::protobuf::EnumDescriptor* LogSeverity_descriptor() {
  protobuf_google_2flogging_2ftype_2flog_5fseverity_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2flogging_2ftype_2flog_5fseverity_2eproto::file_level_enum_descriptors[0];
}
bool LogSeverity_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 200:
    case 300:
    case 400:
    case 500:
    case 600:
    case 700:
    case 800:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace logging
}  // namespace google

// @@protoc_insertion_point(global_scope)
