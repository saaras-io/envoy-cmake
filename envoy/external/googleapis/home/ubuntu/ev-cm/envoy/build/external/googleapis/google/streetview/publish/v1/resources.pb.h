// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/streetview/publish/v1/resources.proto

#ifndef PROTOBUF_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto__INCLUDED
#define PROTOBUF_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/timestamp.pb.h>
#include "google/type/latlng.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsUploadRefImpl();
void InitDefaultsUploadRef();
void InitDefaultsPhotoIdImpl();
void InitDefaultsPhotoId();
void InitDefaultsLevelImpl();
void InitDefaultsLevel();
void InitDefaultsPoseImpl();
void InitDefaultsPose();
void InitDefaultsPlaceImpl();
void InitDefaultsPlace();
void InitDefaultsConnectionImpl();
void InitDefaultsConnection();
void InitDefaultsPhotoImpl();
void InitDefaultsPhoto();
inline void InitDefaults() {
  InitDefaultsUploadRef();
  InitDefaultsPhotoId();
  InitDefaultsLevel();
  InitDefaultsPose();
  InitDefaultsPlace();
  InitDefaultsConnection();
  InitDefaultsPhoto();
}
}  // namespace protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto
namespace google {
namespace streetview {
namespace publish {
namespace v1 {
class Connection;
class ConnectionDefaultTypeInternal;
extern ConnectionDefaultTypeInternal _Connection_default_instance_;
class Level;
class LevelDefaultTypeInternal;
extern LevelDefaultTypeInternal _Level_default_instance_;
class Photo;
class PhotoDefaultTypeInternal;
extern PhotoDefaultTypeInternal _Photo_default_instance_;
class PhotoId;
class PhotoIdDefaultTypeInternal;
extern PhotoIdDefaultTypeInternal _PhotoId_default_instance_;
class Place;
class PlaceDefaultTypeInternal;
extern PlaceDefaultTypeInternal _Place_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class UploadRef;
class UploadRefDefaultTypeInternal;
extern UploadRefDefaultTypeInternal _UploadRef_default_instance_;
}  // namespace v1
}  // namespace publish
}  // namespace streetview
}  // namespace google
namespace google {
namespace streetview {
namespace publish {
namespace v1 {

// ===================================================================

class UploadRef : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.UploadRef) */ {
 public:
  UploadRef();
  virtual ~UploadRef();

  UploadRef(const UploadRef& from);

  inline UploadRef& operator=(const UploadRef& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadRef(UploadRef&& from) noexcept
    : UploadRef() {
    *this = ::std::move(from);
  }

  inline UploadRef& operator=(UploadRef&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadRef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadRef* internal_default_instance() {
    return reinterpret_cast<const UploadRef*>(
               &_UploadRef_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(UploadRef* other);
  friend void swap(UploadRef& a, UploadRef& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadRef* New() const PROTOBUF_FINAL { return New(NULL); }

  UploadRef* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UploadRef& from);
  void MergeFrom(const UploadRef& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UploadRef* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string upload_url = 1;
  void clear_upload_url();
  static const int kUploadUrlFieldNumber = 1;
  const ::std::string& upload_url() const;
  void set_upload_url(const ::std::string& value);
  #if LANG_CXX11
  void set_upload_url(::std::string&& value);
  #endif
  void set_upload_url(const char* value);
  void set_upload_url(const char* value, size_t size);
  ::std::string* mutable_upload_url();
  ::std::string* release_upload_url();
  void set_allocated_upload_url(::std::string* upload_url);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.UploadRef)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr upload_url_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsUploadRefImpl();
};
// -------------------------------------------------------------------

class PhotoId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.PhotoId) */ {
 public:
  PhotoId();
  virtual ~PhotoId();

  PhotoId(const PhotoId& from);

  inline PhotoId& operator=(const PhotoId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PhotoId(PhotoId&& from) noexcept
    : PhotoId() {
    *this = ::std::move(from);
  }

  inline PhotoId& operator=(PhotoId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PhotoId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PhotoId* internal_default_instance() {
    return reinterpret_cast<const PhotoId*>(
               &_PhotoId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PhotoId* other);
  friend void swap(PhotoId& a, PhotoId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PhotoId* New() const PROTOBUF_FINAL { return New(NULL); }

  PhotoId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PhotoId& from);
  void MergeFrom(const PhotoId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PhotoId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.PhotoId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPhotoIdImpl();
};
// -------------------------------------------------------------------

class Level : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.Level) */ {
 public:
  Level();
  virtual ~Level();

  Level(const Level& from);

  inline Level& operator=(const Level& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Level(Level&& from) noexcept
    : Level() {
    *this = ::std::move(from);
  }

  inline Level& operator=(Level&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Level& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Level* internal_default_instance() {
    return reinterpret_cast<const Level*>(
               &_Level_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Level* other);
  friend void swap(Level& a, Level& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Level* New() const PROTOBUF_FINAL { return New(NULL); }

  Level* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Level& from);
  void MergeFrom(const Level& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Level* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // double number = 1;
  void clear_number();
  static const int kNumberFieldNumber = 1;
  double number() const;
  void set_number(double value);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.Level)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  double number_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsLevelImpl();
};
// -------------------------------------------------------------------

class Pose : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.Pose) */ {
 public:
  Pose();
  virtual ~Pose();

  Pose(const Pose& from);

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Pose* other);
  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const PROTOBUF_FINAL { return New(NULL); }

  Pose* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Pose* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.type.LatLng lat_lng_pair = 1;
  bool has_lat_lng_pair() const;
  void clear_lat_lng_pair();
  static const int kLatLngPairFieldNumber = 1;
  const ::google::type::LatLng& lat_lng_pair() const;
  ::google::type::LatLng* release_lat_lng_pair();
  ::google::type::LatLng* mutable_lat_lng_pair();
  void set_allocated_lat_lng_pair(::google::type::LatLng* lat_lng_pair);

  // .google.streetview.publish.v1.Level level = 7;
  bool has_level() const;
  void clear_level();
  static const int kLevelFieldNumber = 7;
  const ::google::streetview::publish::v1::Level& level() const;
  ::google::streetview::publish::v1::Level* release_level();
  ::google::streetview::publish::v1::Level* mutable_level();
  void set_allocated_level(::google::streetview::publish::v1::Level* level);

  // double altitude = 2;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 2;
  double altitude() const;
  void set_altitude(double value);

  // double heading = 3;
  void clear_heading();
  static const int kHeadingFieldNumber = 3;
  double heading() const;
  void set_heading(double value);

  // double pitch = 4;
  void clear_pitch();
  static const int kPitchFieldNumber = 4;
  double pitch() const;
  void set_pitch(double value);

  // double roll = 5;
  void clear_roll();
  static const int kRollFieldNumber = 5;
  double roll() const;
  void set_roll(double value);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.Pose)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::type::LatLng* lat_lng_pair_;
  ::google::streetview::publish::v1::Level* level_;
  double altitude_;
  double heading_;
  double pitch_;
  double roll_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPoseImpl();
};
// -------------------------------------------------------------------

class Place : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.Place) */ {
 public:
  Place();
  virtual ~Place();

  Place(const Place& from);

  inline Place& operator=(const Place& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Place(Place&& from) noexcept
    : Place() {
    *this = ::std::move(from);
  }

  inline Place& operator=(Place&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Place& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Place* internal_default_instance() {
    return reinterpret_cast<const Place*>(
               &_Place_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Place* other);
  friend void swap(Place& a, Place& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Place* New() const PROTOBUF_FINAL { return New(NULL); }

  Place* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Place& from);
  void MergeFrom(const Place& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Place* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string place_id = 1;
  void clear_place_id();
  static const int kPlaceIdFieldNumber = 1;
  const ::std::string& place_id() const;
  void set_place_id(const ::std::string& value);
  #if LANG_CXX11
  void set_place_id(::std::string&& value);
  #endif
  void set_place_id(const char* value);
  void set_place_id(const char* value, size_t size);
  ::std::string* mutable_place_id();
  ::std::string* release_place_id();
  void set_allocated_place_id(::std::string* place_id);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.Place)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr place_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPlaceImpl();
};
// -------------------------------------------------------------------

class Connection : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.Connection) */ {
 public:
  Connection();
  virtual ~Connection();

  Connection(const Connection& from);

  inline Connection& operator=(const Connection& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Connection(Connection&& from) noexcept
    : Connection() {
    *this = ::std::move(from);
  }

  inline Connection& operator=(Connection&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Connection& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Connection* internal_default_instance() {
    return reinterpret_cast<const Connection*>(
               &_Connection_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Connection* other);
  friend void swap(Connection& a, Connection& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Connection* New() const PROTOBUF_FINAL { return New(NULL); }

  Connection* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Connection& from);
  void MergeFrom(const Connection& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Connection* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.streetview.publish.v1.PhotoId target = 1;
  bool has_target() const;
  void clear_target();
  static const int kTargetFieldNumber = 1;
  const ::google::streetview::publish::v1::PhotoId& target() const;
  ::google::streetview::publish::v1::PhotoId* release_target();
  ::google::streetview::publish::v1::PhotoId* mutable_target();
  void set_allocated_target(::google::streetview::publish::v1::PhotoId* target);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.Connection)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::streetview::publish::v1::PhotoId* target_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsConnectionImpl();
};
// -------------------------------------------------------------------

class Photo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.streetview.publish.v1.Photo) */ {
 public:
  Photo();
  virtual ~Photo();

  Photo(const Photo& from);

  inline Photo& operator=(const Photo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Photo(Photo&& from) noexcept
    : Photo() {
    *this = ::std::move(from);
  }

  inline Photo& operator=(Photo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Photo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Photo* internal_default_instance() {
    return reinterpret_cast<const Photo*>(
               &_Photo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(Photo* other);
  friend void swap(Photo& a, Photo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Photo* New() const PROTOBUF_FINAL { return New(NULL); }

  Photo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Photo& from);
  void MergeFrom(const Photo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Photo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.streetview.publish.v1.Connection connections = 5;
  int connections_size() const;
  void clear_connections();
  static const int kConnectionsFieldNumber = 5;
  const ::google::streetview::publish::v1::Connection& connections(int index) const;
  ::google::streetview::publish::v1::Connection* mutable_connections(int index);
  ::google::streetview::publish::v1::Connection* add_connections();
  ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Connection >*
      mutable_connections();
  const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Connection >&
      connections() const;

  // repeated .google.streetview.publish.v1.Place places = 7;
  int places_size() const;
  void clear_places();
  static const int kPlacesFieldNumber = 7;
  const ::google::streetview::publish::v1::Place& places(int index) const;
  ::google::streetview::publish::v1::Place* mutable_places(int index);
  ::google::streetview::publish::v1::Place* add_places();
  ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Place >*
      mutable_places();
  const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Place >&
      places() const;

  // string download_url = 3;
  void clear_download_url();
  static const int kDownloadUrlFieldNumber = 3;
  const ::std::string& download_url() const;
  void set_download_url(const ::std::string& value);
  #if LANG_CXX11
  void set_download_url(::std::string&& value);
  #endif
  void set_download_url(const char* value);
  void set_download_url(const char* value, size_t size);
  ::std::string* mutable_download_url();
  ::std::string* release_download_url();
  void set_allocated_download_url(::std::string* download_url);

  // string thumbnail_url = 9;
  void clear_thumbnail_url();
  static const int kThumbnailUrlFieldNumber = 9;
  const ::std::string& thumbnail_url() const;
  void set_thumbnail_url(const ::std::string& value);
  #if LANG_CXX11
  void set_thumbnail_url(::std::string&& value);
  #endif
  void set_thumbnail_url(const char* value);
  void set_thumbnail_url(const char* value, size_t size);
  ::std::string* mutable_thumbnail_url();
  ::std::string* release_thumbnail_url();
  void set_allocated_thumbnail_url(::std::string* thumbnail_url);

  // string share_link = 11;
  void clear_share_link();
  static const int kShareLinkFieldNumber = 11;
  const ::std::string& share_link() const;
  void set_share_link(const ::std::string& value);
  #if LANG_CXX11
  void set_share_link(::std::string&& value);
  #endif
  void set_share_link(const char* value);
  void set_share_link(const char* value, size_t size);
  ::std::string* mutable_share_link();
  ::std::string* release_share_link();
  void set_allocated_share_link(::std::string* share_link);

  // .google.streetview.publish.v1.PhotoId photo_id = 1;
  bool has_photo_id() const;
  void clear_photo_id();
  static const int kPhotoIdFieldNumber = 1;
  const ::google::streetview::publish::v1::PhotoId& photo_id() const;
  ::google::streetview::publish::v1::PhotoId* release_photo_id();
  ::google::streetview::publish::v1::PhotoId* mutable_photo_id();
  void set_allocated_photo_id(::google::streetview::publish::v1::PhotoId* photo_id);

  // .google.streetview.publish.v1.UploadRef upload_reference = 2;
  bool has_upload_reference() const;
  void clear_upload_reference();
  static const int kUploadReferenceFieldNumber = 2;
  const ::google::streetview::publish::v1::UploadRef& upload_reference() const;
  ::google::streetview::publish::v1::UploadRef* release_upload_reference();
  ::google::streetview::publish::v1::UploadRef* mutable_upload_reference();
  void set_allocated_upload_reference(::google::streetview::publish::v1::UploadRef* upload_reference);

  // .google.streetview.publish.v1.Pose pose = 4;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 4;
  const ::google::streetview::publish::v1::Pose& pose() const;
  ::google::streetview::publish::v1::Pose* release_pose();
  ::google::streetview::publish::v1::Pose* mutable_pose();
  void set_allocated_pose(::google::streetview::publish::v1::Pose* pose);

  // .google.protobuf.Timestamp capture_time = 6;
  bool has_capture_time() const;
  void clear_capture_time();
  static const int kCaptureTimeFieldNumber = 6;
  const ::google::protobuf::Timestamp& capture_time() const;
  ::google::protobuf::Timestamp* release_capture_time();
  ::google::protobuf::Timestamp* mutable_capture_time();
  void set_allocated_capture_time(::google::protobuf::Timestamp* capture_time);

  // int64 view_count = 10;
  void clear_view_count();
  static const int kViewCountFieldNumber = 10;
  ::google::protobuf::int64 view_count() const;
  void set_view_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.streetview.publish.v1.Photo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Connection > connections_;
  ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Place > places_;
  ::google::protobuf::internal::ArenaStringPtr download_url_;
  ::google::protobuf::internal::ArenaStringPtr thumbnail_url_;
  ::google::protobuf::internal::ArenaStringPtr share_link_;
  ::google::streetview::publish::v1::PhotoId* photo_id_;
  ::google::streetview::publish::v1::UploadRef* upload_reference_;
  ::google::streetview::publish::v1::Pose* pose_;
  ::google::protobuf::Timestamp* capture_time_;
  ::google::protobuf::int64 view_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::TableStruct;
  friend void ::protobuf_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto::InitDefaultsPhotoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadRef

// string upload_url = 1;
inline void UploadRef::clear_upload_url() {
  upload_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UploadRef::upload_url() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.UploadRef.upload_url)
  return upload_url_.GetNoArena();
}
inline void UploadRef::set_upload_url(const ::std::string& value) {
  
  upload_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.UploadRef.upload_url)
}
#if LANG_CXX11
inline void UploadRef::set_upload_url(::std::string&& value) {
  
  upload_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.UploadRef.upload_url)
}
#endif
inline void UploadRef::set_upload_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  upload_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.UploadRef.upload_url)
}
inline void UploadRef::set_upload_url(const char* value, size_t size) {
  
  upload_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.UploadRef.upload_url)
}
inline ::std::string* UploadRef::mutable_upload_url() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.UploadRef.upload_url)
  return upload_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UploadRef::release_upload_url() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.UploadRef.upload_url)
  
  return upload_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UploadRef::set_allocated_upload_url(::std::string* upload_url) {
  if (upload_url != NULL) {
    
  } else {
    
  }
  upload_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), upload_url);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.UploadRef.upload_url)
}

// -------------------------------------------------------------------

// PhotoId

// string id = 1;
inline void PhotoId::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PhotoId::id() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.PhotoId.id)
  return id_.GetNoArena();
}
inline void PhotoId::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.PhotoId.id)
}
#if LANG_CXX11
inline void PhotoId::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.PhotoId.id)
}
#endif
inline void PhotoId::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.PhotoId.id)
}
inline void PhotoId::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.PhotoId.id)
}
inline ::std::string* PhotoId::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.PhotoId.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PhotoId::release_id() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.PhotoId.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PhotoId::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.PhotoId.id)
}

// -------------------------------------------------------------------

// Level

// double number = 1;
inline void Level::clear_number() {
  number_ = 0;
}
inline double Level::number() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Level.number)
  return number_;
}
inline void Level::set_number(double value) {
  
  number_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Level.number)
}

// string name = 2;
inline void Level::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Level::name() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Level.name)
  return name_.GetNoArena();
}
inline void Level::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Level.name)
}
#if LANG_CXX11
inline void Level::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.Level.name)
}
#endif
inline void Level::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.Level.name)
}
inline void Level::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.Level.name)
}
inline ::std::string* Level::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Level.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Level::release_name() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Level.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Level::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Level.name)
}

// -------------------------------------------------------------------

// Pose

// .google.type.LatLng lat_lng_pair = 1;
inline bool Pose::has_lat_lng_pair() const {
  return this != internal_default_instance() && lat_lng_pair_ != NULL;
}
inline const ::google::type::LatLng& Pose::lat_lng_pair() const {
  const ::google::type::LatLng* p = lat_lng_pair_;
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Pose.lat_lng_pair)
  return p != NULL ? *p : *reinterpret_cast<const ::google::type::LatLng*>(
      &::google::type::_LatLng_default_instance_);
}
inline ::google::type::LatLng* Pose::release_lat_lng_pair() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Pose.lat_lng_pair)
  
  ::google::type::LatLng* temp = lat_lng_pair_;
  lat_lng_pair_ = NULL;
  return temp;
}
inline ::google::type::LatLng* Pose::mutable_lat_lng_pair() {
  
  if (lat_lng_pair_ == NULL) {
    lat_lng_pair_ = new ::google::type::LatLng;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Pose.lat_lng_pair)
  return lat_lng_pair_;
}
inline void Pose::set_allocated_lat_lng_pair(::google::type::LatLng* lat_lng_pair) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(lat_lng_pair_);
  }
  if (lat_lng_pair) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lat_lng_pair = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lat_lng_pair, submessage_arena);
    }
    
  } else {
    
  }
  lat_lng_pair_ = lat_lng_pair;
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Pose.lat_lng_pair)
}

// double altitude = 2;
inline void Pose::clear_altitude() {
  altitude_ = 0;
}
inline double Pose::altitude() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Pose.altitude)
  return altitude_;
}
inline void Pose::set_altitude(double value) {
  
  altitude_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Pose.altitude)
}

// double heading = 3;
inline void Pose::clear_heading() {
  heading_ = 0;
}
inline double Pose::heading() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Pose.heading)
  return heading_;
}
inline void Pose::set_heading(double value) {
  
  heading_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Pose.heading)
}

// double pitch = 4;
inline void Pose::clear_pitch() {
  pitch_ = 0;
}
inline double Pose::pitch() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Pose.pitch)
  return pitch_;
}
inline void Pose::set_pitch(double value) {
  
  pitch_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Pose.pitch)
}

// double roll = 5;
inline void Pose::clear_roll() {
  roll_ = 0;
}
inline double Pose::roll() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Pose.roll)
  return roll_;
}
inline void Pose::set_roll(double value) {
  
  roll_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Pose.roll)
}

// .google.streetview.publish.v1.Level level = 7;
inline bool Pose::has_level() const {
  return this != internal_default_instance() && level_ != NULL;
}
inline void Pose::clear_level() {
  if (GetArenaNoVirtual() == NULL && level_ != NULL) {
    delete level_;
  }
  level_ = NULL;
}
inline const ::google::streetview::publish::v1::Level& Pose::level() const {
  const ::google::streetview::publish::v1::Level* p = level_;
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Pose.level)
  return p != NULL ? *p : *reinterpret_cast<const ::google::streetview::publish::v1::Level*>(
      &::google::streetview::publish::v1::_Level_default_instance_);
}
inline ::google::streetview::publish::v1::Level* Pose::release_level() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Pose.level)
  
  ::google::streetview::publish::v1::Level* temp = level_;
  level_ = NULL;
  return temp;
}
inline ::google::streetview::publish::v1::Level* Pose::mutable_level() {
  
  if (level_ == NULL) {
    level_ = new ::google::streetview::publish::v1::Level;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Pose.level)
  return level_;
}
inline void Pose::set_allocated_level(::google::streetview::publish::v1::Level* level) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete level_;
  }
  if (level) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      level = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, level, submessage_arena);
    }
    
  } else {
    
  }
  level_ = level;
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Pose.level)
}

// -------------------------------------------------------------------

// Place

// string place_id = 1;
inline void Place::clear_place_id() {
  place_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Place::place_id() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Place.place_id)
  return place_id_.GetNoArena();
}
inline void Place::set_place_id(const ::std::string& value) {
  
  place_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Place.place_id)
}
#if LANG_CXX11
inline void Place::set_place_id(::std::string&& value) {
  
  place_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.Place.place_id)
}
#endif
inline void Place::set_place_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  place_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.Place.place_id)
}
inline void Place::set_place_id(const char* value, size_t size) {
  
  place_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.Place.place_id)
}
inline ::std::string* Place::mutable_place_id() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Place.place_id)
  return place_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Place::release_place_id() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Place.place_id)
  
  return place_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Place::set_allocated_place_id(::std::string* place_id) {
  if (place_id != NULL) {
    
  } else {
    
  }
  place_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), place_id);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Place.place_id)
}

// -------------------------------------------------------------------

// Connection

// .google.streetview.publish.v1.PhotoId target = 1;
inline bool Connection::has_target() const {
  return this != internal_default_instance() && target_ != NULL;
}
inline void Connection::clear_target() {
  if (GetArenaNoVirtual() == NULL && target_ != NULL) {
    delete target_;
  }
  target_ = NULL;
}
inline const ::google::streetview::publish::v1::PhotoId& Connection::target() const {
  const ::google::streetview::publish::v1::PhotoId* p = target_;
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Connection.target)
  return p != NULL ? *p : *reinterpret_cast<const ::google::streetview::publish::v1::PhotoId*>(
      &::google::streetview::publish::v1::_PhotoId_default_instance_);
}
inline ::google::streetview::publish::v1::PhotoId* Connection::release_target() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Connection.target)
  
  ::google::streetview::publish::v1::PhotoId* temp = target_;
  target_ = NULL;
  return temp;
}
inline ::google::streetview::publish::v1::PhotoId* Connection::mutable_target() {
  
  if (target_ == NULL) {
    target_ = new ::google::streetview::publish::v1::PhotoId;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Connection.target)
  return target_;
}
inline void Connection::set_allocated_target(::google::streetview::publish::v1::PhotoId* target) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete target_;
  }
  if (target) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      target = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Connection.target)
}

// -------------------------------------------------------------------

// Photo

// .google.streetview.publish.v1.PhotoId photo_id = 1;
inline bool Photo::has_photo_id() const {
  return this != internal_default_instance() && photo_id_ != NULL;
}
inline void Photo::clear_photo_id() {
  if (GetArenaNoVirtual() == NULL && photo_id_ != NULL) {
    delete photo_id_;
  }
  photo_id_ = NULL;
}
inline const ::google::streetview::publish::v1::PhotoId& Photo::photo_id() const {
  const ::google::streetview::publish::v1::PhotoId* p = photo_id_;
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.photo_id)
  return p != NULL ? *p : *reinterpret_cast<const ::google::streetview::publish::v1::PhotoId*>(
      &::google::streetview::publish::v1::_PhotoId_default_instance_);
}
inline ::google::streetview::publish::v1::PhotoId* Photo::release_photo_id() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.photo_id)
  
  ::google::streetview::publish::v1::PhotoId* temp = photo_id_;
  photo_id_ = NULL;
  return temp;
}
inline ::google::streetview::publish::v1::PhotoId* Photo::mutable_photo_id() {
  
  if (photo_id_ == NULL) {
    photo_id_ = new ::google::streetview::publish::v1::PhotoId;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.photo_id)
  return photo_id_;
}
inline void Photo::set_allocated_photo_id(::google::streetview::publish::v1::PhotoId* photo_id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete photo_id_;
  }
  if (photo_id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      photo_id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, photo_id, submessage_arena);
    }
    
  } else {
    
  }
  photo_id_ = photo_id;
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.photo_id)
}

// .google.streetview.publish.v1.UploadRef upload_reference = 2;
inline bool Photo::has_upload_reference() const {
  return this != internal_default_instance() && upload_reference_ != NULL;
}
inline void Photo::clear_upload_reference() {
  if (GetArenaNoVirtual() == NULL && upload_reference_ != NULL) {
    delete upload_reference_;
  }
  upload_reference_ = NULL;
}
inline const ::google::streetview::publish::v1::UploadRef& Photo::upload_reference() const {
  const ::google::streetview::publish::v1::UploadRef* p = upload_reference_;
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.upload_reference)
  return p != NULL ? *p : *reinterpret_cast<const ::google::streetview::publish::v1::UploadRef*>(
      &::google::streetview::publish::v1::_UploadRef_default_instance_);
}
inline ::google::streetview::publish::v1::UploadRef* Photo::release_upload_reference() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.upload_reference)
  
  ::google::streetview::publish::v1::UploadRef* temp = upload_reference_;
  upload_reference_ = NULL;
  return temp;
}
inline ::google::streetview::publish::v1::UploadRef* Photo::mutable_upload_reference() {
  
  if (upload_reference_ == NULL) {
    upload_reference_ = new ::google::streetview::publish::v1::UploadRef;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.upload_reference)
  return upload_reference_;
}
inline void Photo::set_allocated_upload_reference(::google::streetview::publish::v1::UploadRef* upload_reference) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete upload_reference_;
  }
  if (upload_reference) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      upload_reference = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upload_reference, submessage_arena);
    }
    
  } else {
    
  }
  upload_reference_ = upload_reference;
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.upload_reference)
}

// string download_url = 3;
inline void Photo::clear_download_url() {
  download_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Photo::download_url() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.download_url)
  return download_url_.GetNoArena();
}
inline void Photo::set_download_url(const ::std::string& value) {
  
  download_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Photo.download_url)
}
#if LANG_CXX11
inline void Photo::set_download_url(::std::string&& value) {
  
  download_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.Photo.download_url)
}
#endif
inline void Photo::set_download_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  download_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.Photo.download_url)
}
inline void Photo::set_download_url(const char* value, size_t size) {
  
  download_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.Photo.download_url)
}
inline ::std::string* Photo::mutable_download_url() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.download_url)
  return download_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Photo::release_download_url() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.download_url)
  
  return download_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Photo::set_allocated_download_url(::std::string* download_url) {
  if (download_url != NULL) {
    
  } else {
    
  }
  download_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), download_url);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.download_url)
}

// string thumbnail_url = 9;
inline void Photo::clear_thumbnail_url() {
  thumbnail_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Photo::thumbnail_url() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.thumbnail_url)
  return thumbnail_url_.GetNoArena();
}
inline void Photo::set_thumbnail_url(const ::std::string& value) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Photo.thumbnail_url)
}
#if LANG_CXX11
inline void Photo::set_thumbnail_url(::std::string&& value) {
  
  thumbnail_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.Photo.thumbnail_url)
}
#endif
inline void Photo::set_thumbnail_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.Photo.thumbnail_url)
}
inline void Photo::set_thumbnail_url(const char* value, size_t size) {
  
  thumbnail_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.Photo.thumbnail_url)
}
inline ::std::string* Photo::mutable_thumbnail_url() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.thumbnail_url)
  return thumbnail_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Photo::release_thumbnail_url() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.thumbnail_url)
  
  return thumbnail_url_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Photo::set_allocated_thumbnail_url(::std::string* thumbnail_url) {
  if (thumbnail_url != NULL) {
    
  } else {
    
  }
  thumbnail_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thumbnail_url);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.thumbnail_url)
}

// string share_link = 11;
inline void Photo::clear_share_link() {
  share_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Photo::share_link() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.share_link)
  return share_link_.GetNoArena();
}
inline void Photo::set_share_link(const ::std::string& value) {
  
  share_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Photo.share_link)
}
#if LANG_CXX11
inline void Photo::set_share_link(::std::string&& value) {
  
  share_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.streetview.publish.v1.Photo.share_link)
}
#endif
inline void Photo::set_share_link(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  share_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.streetview.publish.v1.Photo.share_link)
}
inline void Photo::set_share_link(const char* value, size_t size) {
  
  share_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.streetview.publish.v1.Photo.share_link)
}
inline ::std::string* Photo::mutable_share_link() {
  
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.share_link)
  return share_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Photo::release_share_link() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.share_link)
  
  return share_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Photo::set_allocated_share_link(::std::string* share_link) {
  if (share_link != NULL) {
    
  } else {
    
  }
  share_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), share_link);
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.share_link)
}

// .google.streetview.publish.v1.Pose pose = 4;
inline bool Photo::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline void Photo::clear_pose() {
  if (GetArenaNoVirtual() == NULL && pose_ != NULL) {
    delete pose_;
  }
  pose_ = NULL;
}
inline const ::google::streetview::publish::v1::Pose& Photo::pose() const {
  const ::google::streetview::publish::v1::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::google::streetview::publish::v1::Pose*>(
      &::google::streetview::publish::v1::_Pose_default_instance_);
}
inline ::google::streetview::publish::v1::Pose* Photo::release_pose() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.pose)
  
  ::google::streetview::publish::v1::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::google::streetview::publish::v1::Pose* Photo::mutable_pose() {
  
  if (pose_ == NULL) {
    pose_ = new ::google::streetview::publish::v1::Pose;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.pose)
  return pose_;
}
inline void Photo::set_allocated_pose(::google::streetview::publish::v1::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pose_;
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.pose)
}

// repeated .google.streetview.publish.v1.Connection connections = 5;
inline int Photo::connections_size() const {
  return connections_.size();
}
inline void Photo::clear_connections() {
  connections_.Clear();
}
inline const ::google::streetview::publish::v1::Connection& Photo::connections(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.connections)
  return connections_.Get(index);
}
inline ::google::streetview::publish::v1::Connection* Photo::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.connections)
  return connections_.Mutable(index);
}
inline ::google::streetview::publish::v1::Connection* Photo::add_connections() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.Photo.connections)
  return connections_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Connection >*
Photo::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.Photo.connections)
  return &connections_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Connection >&
Photo::connections() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.Photo.connections)
  return connections_;
}

// .google.protobuf.Timestamp capture_time = 6;
inline bool Photo::has_capture_time() const {
  return this != internal_default_instance() && capture_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Photo::capture_time() const {
  const ::google::protobuf::Timestamp* p = capture_time_;
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.capture_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Photo::release_capture_time() {
  // @@protoc_insertion_point(field_release:google.streetview.publish.v1.Photo.capture_time)
  
  ::google::protobuf::Timestamp* temp = capture_time_;
  capture_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Photo::mutable_capture_time() {
  
  if (capture_time_ == NULL) {
    capture_time_ = new ::google::protobuf::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.capture_time)
  return capture_time_;
}
inline void Photo::set_allocated_capture_time(::google::protobuf::Timestamp* capture_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(capture_time_);
  }
  if (capture_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(capture_time)->GetArena();
    if (message_arena != submessage_arena) {
      capture_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, capture_time, submessage_arena);
    }
    
  } else {
    
  }
  capture_time_ = capture_time;
  // @@protoc_insertion_point(field_set_allocated:google.streetview.publish.v1.Photo.capture_time)
}

// repeated .google.streetview.publish.v1.Place places = 7;
inline int Photo::places_size() const {
  return places_.size();
}
inline void Photo::clear_places() {
  places_.Clear();
}
inline const ::google::streetview::publish::v1::Place& Photo::places(int index) const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.places)
  return places_.Get(index);
}
inline ::google::streetview::publish::v1::Place* Photo::mutable_places(int index) {
  // @@protoc_insertion_point(field_mutable:google.streetview.publish.v1.Photo.places)
  return places_.Mutable(index);
}
inline ::google::streetview::publish::v1::Place* Photo::add_places() {
  // @@protoc_insertion_point(field_add:google.streetview.publish.v1.Photo.places)
  return places_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Place >*
Photo::mutable_places() {
  // @@protoc_insertion_point(field_mutable_list:google.streetview.publish.v1.Photo.places)
  return &places_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::streetview::publish::v1::Place >&
Photo::places() const {
  // @@protoc_insertion_point(field_list:google.streetview.publish.v1.Photo.places)
  return places_;
}

// int64 view_count = 10;
inline void Photo::clear_view_count() {
  view_count_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Photo::view_count() const {
  // @@protoc_insertion_point(field_get:google.streetview.publish.v1.Photo.view_count)
  return view_count_;
}
inline void Photo::set_view_count(::google::protobuf::int64 value) {
  
  view_count_ = value;
  // @@protoc_insertion_point(field_set:google.streetview.publish.v1.Photo.view_count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace publish
}  // namespace streetview
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fstreetview_2fpublish_2fv1_2fresources_2eproto__INCLUDED
