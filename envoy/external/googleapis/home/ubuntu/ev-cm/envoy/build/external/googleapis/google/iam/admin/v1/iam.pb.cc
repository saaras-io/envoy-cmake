// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/iam/admin/v1/iam.proto

#include "google/iam/admin/v1/iam.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace iam {
namespace admin {
namespace v1 {
class ServiceAccountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceAccount>
      _instance;
} _ServiceAccount_default_instance_;
class CreateServiceAccountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateServiceAccountRequest>
      _instance;
} _CreateServiceAccountRequest_default_instance_;
class ListServiceAccountsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListServiceAccountsRequest>
      _instance;
} _ListServiceAccountsRequest_default_instance_;
class ListServiceAccountsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListServiceAccountsResponse>
      _instance;
} _ListServiceAccountsResponse_default_instance_;
class GetServiceAccountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServiceAccountRequest>
      _instance;
} _GetServiceAccountRequest_default_instance_;
class DeleteServiceAccountRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteServiceAccountRequest>
      _instance;
} _DeleteServiceAccountRequest_default_instance_;
class ListServiceAccountKeysRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListServiceAccountKeysRequest>
      _instance;
} _ListServiceAccountKeysRequest_default_instance_;
class ListServiceAccountKeysResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListServiceAccountKeysResponse>
      _instance;
} _ListServiceAccountKeysResponse_default_instance_;
class GetServiceAccountKeyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetServiceAccountKeyRequest>
      _instance;
} _GetServiceAccountKeyRequest_default_instance_;
class ServiceAccountKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceAccountKey>
      _instance;
} _ServiceAccountKey_default_instance_;
class CreateServiceAccountKeyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateServiceAccountKeyRequest>
      _instance;
} _CreateServiceAccountKeyRequest_default_instance_;
class DeleteServiceAccountKeyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteServiceAccountKeyRequest>
      _instance;
} _DeleteServiceAccountKeyRequest_default_instance_;
class SignBlobRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignBlobRequest>
      _instance;
} _SignBlobRequest_default_instance_;
class SignBlobResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignBlobResponse>
      _instance;
} _SignBlobResponse_default_instance_;
class SignJwtRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignJwtRequest>
      _instance;
} _SignJwtRequest_default_instance_;
class SignJwtResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignJwtResponse>
      _instance;
} _SignJwtResponse_default_instance_;
class RoleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Role>
      _instance;
} _Role_default_instance_;
class QueryGrantableRolesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryGrantableRolesRequest>
      _instance;
} _QueryGrantableRolesRequest_default_instance_;
class QueryGrantableRolesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryGrantableRolesResponse>
      _instance;
} _QueryGrantableRolesResponse_default_instance_;
class ListRolesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListRolesRequest>
      _instance;
} _ListRolesRequest_default_instance_;
class ListRolesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ListRolesResponse>
      _instance;
} _ListRolesResponse_default_instance_;
class GetRoleRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetRoleRequest>
      _instance;
} _GetRoleRequest_default_instance_;
class CreateRoleRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateRoleRequest>
      _instance;
} _CreateRoleRequest_default_instance_;
class UpdateRoleRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpdateRoleRequest>
      _instance;
} _UpdateRoleRequest_default_instance_;
class DeleteRoleRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteRoleRequest>
      _instance;
} _DeleteRoleRequest_default_instance_;
class UndeleteRoleRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UndeleteRoleRequest>
      _instance;
} _UndeleteRoleRequest_default_instance_;
class PermissionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Permission>
      _instance;
} _Permission_default_instance_;
class QueryTestablePermissionsRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryTestablePermissionsRequest>
      _instance;
} _QueryTestablePermissionsRequest_default_instance_;
class QueryTestablePermissionsResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<QueryTestablePermissionsResponse>
      _instance;
} _QueryTestablePermissionsResponse_default_instance_;
}  // namespace v1
}  // namespace admin
}  // namespace iam
}  // namespace google
namespace protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto {
void InitDefaultsServiceAccountImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_ServiceAccount_default_instance_;
    new (ptr) ::google::iam::admin::v1::ServiceAccount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::ServiceAccount::InitAsDefaultInstance();
}

void InitDefaultsServiceAccount() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServiceAccountImpl);
}

void InitDefaultsCreateServiceAccountRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsServiceAccount();
  {
    void* ptr = &::google::iam::admin::v1::_CreateServiceAccountRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::CreateServiceAccountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::CreateServiceAccountRequest::InitAsDefaultInstance();
}

void InitDefaultsCreateServiceAccountRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateServiceAccountRequestImpl);
}

void InitDefaultsListServiceAccountsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_ListServiceAccountsRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::ListServiceAccountsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::ListServiceAccountsRequest::InitAsDefaultInstance();
}

void InitDefaultsListServiceAccountsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListServiceAccountsRequestImpl);
}

void InitDefaultsListServiceAccountsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsServiceAccount();
  {
    void* ptr = &::google::iam::admin::v1::_ListServiceAccountsResponse_default_instance_;
    new (ptr) ::google::iam::admin::v1::ListServiceAccountsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::ListServiceAccountsResponse::InitAsDefaultInstance();
}

void InitDefaultsListServiceAccountsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListServiceAccountsResponseImpl);
}

void InitDefaultsGetServiceAccountRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_GetServiceAccountRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::GetServiceAccountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::GetServiceAccountRequest::InitAsDefaultInstance();
}

void InitDefaultsGetServiceAccountRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetServiceAccountRequestImpl);
}

void InitDefaultsDeleteServiceAccountRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_DeleteServiceAccountRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::DeleteServiceAccountRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::DeleteServiceAccountRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteServiceAccountRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteServiceAccountRequestImpl);
}

void InitDefaultsListServiceAccountKeysRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_ListServiceAccountKeysRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::ListServiceAccountKeysRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::ListServiceAccountKeysRequest::InitAsDefaultInstance();
}

void InitDefaultsListServiceAccountKeysRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListServiceAccountKeysRequestImpl);
}

void InitDefaultsListServiceAccountKeysResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsServiceAccountKey();
  {
    void* ptr = &::google::iam::admin::v1::_ListServiceAccountKeysResponse_default_instance_;
    new (ptr) ::google::iam::admin::v1::ListServiceAccountKeysResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::ListServiceAccountKeysResponse::InitAsDefaultInstance();
}

void InitDefaultsListServiceAccountKeysResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListServiceAccountKeysResponseImpl);
}

void InitDefaultsGetServiceAccountKeyRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_GetServiceAccountKeyRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::GetServiceAccountKeyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::GetServiceAccountKeyRequest::InitAsDefaultInstance();
}

void InitDefaultsGetServiceAccountKeyRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetServiceAccountKeyRequestImpl);
}

void InitDefaultsServiceAccountKeyImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::google::iam::admin::v1::_ServiceAccountKey_default_instance_;
    new (ptr) ::google::iam::admin::v1::ServiceAccountKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::ServiceAccountKey::InitAsDefaultInstance();
}

void InitDefaultsServiceAccountKey() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsServiceAccountKeyImpl);
}

void InitDefaultsCreateServiceAccountKeyRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_CreateServiceAccountKeyRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::CreateServiceAccountKeyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::CreateServiceAccountKeyRequest::InitAsDefaultInstance();
}

void InitDefaultsCreateServiceAccountKeyRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateServiceAccountKeyRequestImpl);
}

void InitDefaultsDeleteServiceAccountKeyRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_DeleteServiceAccountKeyRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::DeleteServiceAccountKeyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::DeleteServiceAccountKeyRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteServiceAccountKeyRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteServiceAccountKeyRequestImpl);
}

void InitDefaultsSignBlobRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_SignBlobRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::SignBlobRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::SignBlobRequest::InitAsDefaultInstance();
}

void InitDefaultsSignBlobRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignBlobRequestImpl);
}

void InitDefaultsSignBlobResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_SignBlobResponse_default_instance_;
    new (ptr) ::google::iam::admin::v1::SignBlobResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::SignBlobResponse::InitAsDefaultInstance();
}

void InitDefaultsSignBlobResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignBlobResponseImpl);
}

void InitDefaultsSignJwtRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_SignJwtRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::SignJwtRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::SignJwtRequest::InitAsDefaultInstance();
}

void InitDefaultsSignJwtRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignJwtRequestImpl);
}

void InitDefaultsSignJwtResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_SignJwtResponse_default_instance_;
    new (ptr) ::google::iam::admin::v1::SignJwtResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::SignJwtResponse::InitAsDefaultInstance();
}

void InitDefaultsSignJwtResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSignJwtResponseImpl);
}

void InitDefaultsRoleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_Role_default_instance_;
    new (ptr) ::google::iam::admin::v1::Role();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::Role::InitAsDefaultInstance();
}

void InitDefaultsRole() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRoleImpl);
}

void InitDefaultsQueryGrantableRolesRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_QueryGrantableRolesRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::QueryGrantableRolesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::QueryGrantableRolesRequest::InitAsDefaultInstance();
}

void InitDefaultsQueryGrantableRolesRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQueryGrantableRolesRequestImpl);
}

void InitDefaultsQueryGrantableRolesResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsRole();
  {
    void* ptr = &::google::iam::admin::v1::_QueryGrantableRolesResponse_default_instance_;
    new (ptr) ::google::iam::admin::v1::QueryGrantableRolesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::QueryGrantableRolesResponse::InitAsDefaultInstance();
}

void InitDefaultsQueryGrantableRolesResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQueryGrantableRolesResponseImpl);
}

void InitDefaultsListRolesRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_ListRolesRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::ListRolesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::ListRolesRequest::InitAsDefaultInstance();
}

void InitDefaultsListRolesRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListRolesRequestImpl);
}

void InitDefaultsListRolesResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsRole();
  {
    void* ptr = &::google::iam::admin::v1::_ListRolesResponse_default_instance_;
    new (ptr) ::google::iam::admin::v1::ListRolesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::ListRolesResponse::InitAsDefaultInstance();
}

void InitDefaultsListRolesResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsListRolesResponseImpl);
}

void InitDefaultsGetRoleRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_GetRoleRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::GetRoleRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::GetRoleRequest::InitAsDefaultInstance();
}

void InitDefaultsGetRoleRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetRoleRequestImpl);
}

void InitDefaultsCreateRoleRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsRole();
  {
    void* ptr = &::google::iam::admin::v1::_CreateRoleRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::CreateRoleRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::CreateRoleRequest::InitAsDefaultInstance();
}

void InitDefaultsCreateRoleRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateRoleRequestImpl);
}

void InitDefaultsUpdateRoleRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsRole();
  protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::InitDefaultsFieldMask();
  {
    void* ptr = &::google::iam::admin::v1::_UpdateRoleRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::UpdateRoleRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::UpdateRoleRequest::InitAsDefaultInstance();
}

void InitDefaultsUpdateRoleRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUpdateRoleRequestImpl);
}

void InitDefaultsDeleteRoleRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_DeleteRoleRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::DeleteRoleRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::DeleteRoleRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteRoleRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteRoleRequestImpl);
}

void InitDefaultsUndeleteRoleRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_UndeleteRoleRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::UndeleteRoleRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::UndeleteRoleRequest::InitAsDefaultInstance();
}

void InitDefaultsUndeleteRoleRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsUndeleteRoleRequestImpl);
}

void InitDefaultsPermissionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_Permission_default_instance_;
    new (ptr) ::google::iam::admin::v1::Permission();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::Permission::InitAsDefaultInstance();
}

void InitDefaultsPermission() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPermissionImpl);
}

void InitDefaultsQueryTestablePermissionsRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::iam::admin::v1::_QueryTestablePermissionsRequest_default_instance_;
    new (ptr) ::google::iam::admin::v1::QueryTestablePermissionsRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::QueryTestablePermissionsRequest::InitAsDefaultInstance();
}

void InitDefaultsQueryTestablePermissionsRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQueryTestablePermissionsRequestImpl);
}

void InitDefaultsQueryTestablePermissionsResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsPermission();
  {
    void* ptr = &::google::iam::admin::v1::_QueryTestablePermissionsResponse_default_instance_;
    new (ptr) ::google::iam::admin::v1::QueryTestablePermissionsResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::iam::admin::v1::QueryTestablePermissionsResponse::InitAsDefaultInstance();
}

void InitDefaultsQueryTestablePermissionsResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsQueryTestablePermissionsResponseImpl);
}

::google::protobuf::Metadata file_level_metadata[29];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccount, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccount, project_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccount, unique_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccount, email_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccount, display_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccount, etag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccount, oauth2_client_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::CreateServiceAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::CreateServiceAccountRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::CreateServiceAccountRequest, account_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::CreateServiceAccountRequest, service_account_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListServiceAccountsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListServiceAccountsRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListServiceAccountsRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListServiceAccountsRequest, page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListServiceAccountsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListServiceAccountsResponse, accounts_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListServiceAccountsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::GetServiceAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::GetServiceAccountRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::DeleteServiceAccountRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::DeleteServiceAccountRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListServiceAccountKeysRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListServiceAccountKeysRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListServiceAccountKeysRequest, key_types_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListServiceAccountKeysResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListServiceAccountKeysResponse, keys_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::GetServiceAccountKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::GetServiceAccountKeyRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::GetServiceAccountKeyRequest, public_key_type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccountKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccountKey, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccountKey, private_key_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccountKey, key_algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccountKey, private_key_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccountKey, public_key_data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccountKey, valid_after_time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ServiceAccountKey, valid_before_time_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::CreateServiceAccountKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::CreateServiceAccountKeyRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::CreateServiceAccountKeyRequest, private_key_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::CreateServiceAccountKeyRequest, key_algorithm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::DeleteServiceAccountKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::DeleteServiceAccountKeyRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::SignBlobRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::SignBlobRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::SignBlobRequest, bytes_to_sign_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::SignBlobResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::SignBlobResponse, key_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::SignBlobResponse, signature_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::SignJwtRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::SignJwtRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::SignJwtRequest, payload_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::SignJwtResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::SignJwtResponse, key_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::SignJwtResponse, signed_jwt_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Role, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Role, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Role, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Role, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Role, included_permissions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Role, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Role, etag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Role, deleted_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryGrantableRolesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryGrantableRolesRequest, full_resource_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryGrantableRolesRequest, view_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryGrantableRolesRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryGrantableRolesRequest, page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryGrantableRolesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryGrantableRolesResponse, roles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryGrantableRolesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListRolesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListRolesRequest, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListRolesRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListRolesRequest, page_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListRolesRequest, view_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListRolesRequest, show_deleted_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListRolesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListRolesResponse, roles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::ListRolesResponse, next_page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::GetRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::GetRoleRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::CreateRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::CreateRoleRequest, parent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::CreateRoleRequest, role_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::CreateRoleRequest, role_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::UpdateRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::UpdateRoleRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::UpdateRoleRequest, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::UpdateRoleRequest, update_mask_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::DeleteRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::DeleteRoleRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::DeleteRoleRequest, etag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::UndeleteRoleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::UndeleteRoleRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::UndeleteRoleRequest, etag_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Permission, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Permission, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Permission, title_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Permission, description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Permission, only_in_predefined_roles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Permission, stage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::Permission, custom_roles_support_level_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryTestablePermissionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryTestablePermissionsRequest, full_resource_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryTestablePermissionsRequest, page_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryTestablePermissionsRequest, page_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryTestablePermissionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryTestablePermissionsResponse, permissions_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::iam::admin::v1::QueryTestablePermissionsResponse, next_page_token_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::iam::admin::v1::ServiceAccount)},
  { 12, -1, sizeof(::google::iam::admin::v1::CreateServiceAccountRequest)},
  { 20, -1, sizeof(::google::iam::admin::v1::ListServiceAccountsRequest)},
  { 28, -1, sizeof(::google::iam::admin::v1::ListServiceAccountsResponse)},
  { 35, -1, sizeof(::google::iam::admin::v1::GetServiceAccountRequest)},
  { 41, -1, sizeof(::google::iam::admin::v1::DeleteServiceAccountRequest)},
  { 47, -1, sizeof(::google::iam::admin::v1::ListServiceAccountKeysRequest)},
  { 54, -1, sizeof(::google::iam::admin::v1::ListServiceAccountKeysResponse)},
  { 60, -1, sizeof(::google::iam::admin::v1::GetServiceAccountKeyRequest)},
  { 67, -1, sizeof(::google::iam::admin::v1::ServiceAccountKey)},
  { 79, -1, sizeof(::google::iam::admin::v1::CreateServiceAccountKeyRequest)},
  { 87, -1, sizeof(::google::iam::admin::v1::DeleteServiceAccountKeyRequest)},
  { 93, -1, sizeof(::google::iam::admin::v1::SignBlobRequest)},
  { 100, -1, sizeof(::google::iam::admin::v1::SignBlobResponse)},
  { 107, -1, sizeof(::google::iam::admin::v1::SignJwtRequest)},
  { 114, -1, sizeof(::google::iam::admin::v1::SignJwtResponse)},
  { 121, -1, sizeof(::google::iam::admin::v1::Role)},
  { 133, -1, sizeof(::google::iam::admin::v1::QueryGrantableRolesRequest)},
  { 142, -1, sizeof(::google::iam::admin::v1::QueryGrantableRolesResponse)},
  { 149, -1, sizeof(::google::iam::admin::v1::ListRolesRequest)},
  { 159, -1, sizeof(::google::iam::admin::v1::ListRolesResponse)},
  { 166, -1, sizeof(::google::iam::admin::v1::GetRoleRequest)},
  { 172, -1, sizeof(::google::iam::admin::v1::CreateRoleRequest)},
  { 180, -1, sizeof(::google::iam::admin::v1::UpdateRoleRequest)},
  { 188, -1, sizeof(::google::iam::admin::v1::DeleteRoleRequest)},
  { 195, -1, sizeof(::google::iam::admin::v1::UndeleteRoleRequest)},
  { 202, -1, sizeof(::google::iam::admin::v1::Permission)},
  { 213, -1, sizeof(::google::iam::admin::v1::QueryTestablePermissionsRequest)},
  { 221, -1, sizeof(::google::iam::admin::v1::QueryTestablePermissionsResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_ServiceAccount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_CreateServiceAccountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_ListServiceAccountsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_ListServiceAccountsResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_GetServiceAccountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_DeleteServiceAccountRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_ListServiceAccountKeysRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_ListServiceAccountKeysResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_GetServiceAccountKeyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_ServiceAccountKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_CreateServiceAccountKeyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_DeleteServiceAccountKeyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_SignBlobRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_SignBlobResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_SignJwtRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_SignJwtResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_Role_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_QueryGrantableRolesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_QueryGrantableRolesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_ListRolesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_ListRolesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_GetRoleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_CreateRoleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_UpdateRoleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_DeleteRoleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_UndeleteRoleRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_Permission_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_QueryTestablePermissionsRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::iam::admin::v1::_QueryTestablePermissionsResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/iam/admin/v1/iam.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 29);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\035google/iam/admin/v1/iam.proto\022\023google."
      "iam.admin.v1\032\034google/api/annotations.pro"
      "to\032\036google/iam/v1/iam_policy.proto\032\032goog"
      "le/iam/v1/policy.proto\032\033google/protobuf/"
      "empty.proto\032 google/protobuf/field_mask."
      "proto\032\037google/protobuf/timestamp.proto\"\222"
      "\001\n\016ServiceAccount\022\014\n\004name\030\001 \001(\t\022\022\n\nproje"
      "ct_id\030\002 \001(\t\022\021\n\tunique_id\030\004 \001(\t\022\r\n\005email\030"
      "\005 \001(\t\022\024\n\014display_name\030\006 \001(\t\022\014\n\004etag\030\007 \001("
      "\014\022\030\n\020oauth2_client_id\030\t \001(\t\"}\n\033CreateSer"
      "viceAccountRequest\022\014\n\004name\030\001 \001(\t\022\022\n\nacco"
      "unt_id\030\002 \001(\t\022<\n\017service_account\030\003 \001(\0132#."
      "google.iam.admin.v1.ServiceAccount\"Q\n\032Li"
      "stServiceAccountsRequest\022\014\n\004name\030\001 \001(\t\022\021"
      "\n\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"m\n"
      "\033ListServiceAccountsResponse\0225\n\010accounts"
      "\030\001 \003(\0132#.google.iam.admin.v1.ServiceAcco"
      "unt\022\027\n\017next_page_token\030\002 \001(\t\"(\n\030GetServi"
      "ceAccountRequest\022\014\n\004name\030\001 \001(\t\"+\n\033Delete"
      "ServiceAccountRequest\022\014\n\004name\030\001 \001(\t\"\307\001\n\035"
      "ListServiceAccountKeysRequest\022\014\n\004name\030\001 "
      "\001(\t\022M\n\tkey_types\030\002 \003(\0162:.google.iam.admi"
      "n.v1.ListServiceAccountKeysRequest.KeyTy"
      "pe\"I\n\007KeyType\022\030\n\024KEY_TYPE_UNSPECIFIED\020\000\022"
      "\020\n\014USER_MANAGED\020\001\022\022\n\016SYSTEM_MANAGED\020\002\"V\n"
      "\036ListServiceAccountKeysResponse\0224\n\004keys\030"
      "\001 \003(\0132&.google.iam.admin.v1.ServiceAccou"
      "ntKey\"v\n\033GetServiceAccountKeyRequest\022\014\n\004"
      "name\030\001 \001(\t\022I\n\017public_key_type\030\002 \001(\01620.go"
      "ogle.iam.admin.v1.ServiceAccountPublicKe"
      "yType\"\326\002\n\021ServiceAccountKey\022\014\n\004name\030\001 \001("
      "\t\022K\n\020private_key_type\030\002 \001(\01621.google.iam"
      ".admin.v1.ServiceAccountPrivateKeyType\022F"
      "\n\rkey_algorithm\030\010 \001(\0162/.google.iam.admin"
      ".v1.ServiceAccountKeyAlgorithm\022\030\n\020privat"
      "e_key_data\030\003 \001(\014\022\027\n\017public_key_data\030\007 \001("
      "\014\0224\n\020valid_after_time\030\004 \001(\0132\032.google.pro"
      "tobuf.Timestamp\0225\n\021valid_before_time\030\005 \001"
      "(\0132\032.google.protobuf.Timestamp\"\303\001\n\036Creat"
      "eServiceAccountKeyRequest\022\014\n\004name\030\001 \001(\t\022"
      "K\n\020private_key_type\030\002 \001(\01621.google.iam.a"
      "dmin.v1.ServiceAccountPrivateKeyType\022F\n\r"
      "key_algorithm\030\003 \001(\0162/.google.iam.admin.v"
      "1.ServiceAccountKeyAlgorithm\".\n\036DeleteSe"
      "rviceAccountKeyRequest\022\014\n\004name\030\001 \001(\t\"6\n\017"
      "SignBlobRequest\022\014\n\004name\030\001 \001(\t\022\025\n\rbytes_t"
      "o_sign\030\002 \001(\014\"5\n\020SignBlobResponse\022\016\n\006key_"
      "id\030\001 \001(\t\022\021\n\tsignature\030\002 \001(\014\"/\n\016SignJwtRe"
      "quest\022\014\n\004name\030\001 \001(\t\022\017\n\007payload\030\002 \001(\t\"5\n\017"
      "SignJwtResponse\022\016\n\006key_id\030\001 \001(\t\022\022\n\nsigne"
      "d_jwt\030\002 \001(\t\"\206\002\n\004Role\022\014\n\004name\030\001 \001(\t\022\r\n\005ti"
      "tle\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\034\n\024includ"
      "ed_permissions\030\007 \003(\t\0228\n\005stage\030\010 \001(\0162).go"
      "ogle.iam.admin.v1.Role.RoleLaunchStage\022\014"
      "\n\004etag\030\t \001(\014\022\017\n\007deleted\030\013 \001(\010\"U\n\017RoleLau"
      "nchStage\022\t\n\005ALPHA\020\000\022\010\n\004BETA\020\001\022\006\n\002GA\020\002\022\016\n"
      "\nDEPRECATED\020\004\022\014\n\010DISABLED\020\005\022\007\n\003EAP\020\006\"\214\001\n"
      "\032QueryGrantableRolesRequest\022\032\n\022full_reso"
      "urce_name\030\001 \001(\t\022+\n\004view\030\002 \001(\0162\035.google.i"
      "am.admin.v1.RoleView\022\021\n\tpage_size\030\003 \001(\005\022"
      "\022\n\npage_token\030\004 \001(\t\"`\n\033QueryGrantableRol"
      "esResponse\022(\n\005roles\030\001 \003(\0132\031.google.iam.a"
      "dmin.v1.Role\022\027\n\017next_page_token\030\002 \001(\t\"\214\001"
      "\n\020ListRolesRequest\022\016\n\006parent\030\001 \001(\t\022\021\n\tpa"
      "ge_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\022+\n\004vie"
      "w\030\004 \001(\0162\035.google.iam.admin.v1.RoleView\022\024"
      "\n\014show_deleted\030\006 \001(\010\"V\n\021ListRolesRespons"
      "e\022(\n\005roles\030\001 \003(\0132\031.google.iam.admin.v1.R"
      "ole\022\027\n\017next_page_token\030\002 \001(\t\"\036\n\016GetRoleR"
      "equest\022\014\n\004name\030\001 \001(\t\"]\n\021CreateRoleReques"
      "t\022\016\n\006parent\030\001 \001(\t\022\017\n\007role_id\030\002 \001(\t\022\'\n\004ro"
      "le\030\003 \001(\0132\031.google.iam.admin.v1.Role\"{\n\021U"
      "pdateRoleRequest\022\014\n\004name\030\001 \001(\t\022\'\n\004role\030\002"
      " \001(\0132\031.google.iam.admin.v1.Role\022/\n\013updat"
      "e_mask\030\003 \001(\0132\032.google.protobuf.FieldMask"
      "\"/\n\021DeleteRoleRequest\022\014\n\004name\030\001 \001(\t\022\014\n\004e"
      "tag\030\002 \001(\014\"1\n\023UndeleteRoleRequest\022\014\n\004name"
      "\030\001 \001(\t\022\014\n\004etag\030\002 \001(\014\"\223\003\n\nPermission\022\014\n\004n"
      "ame\030\001 \001(\t\022\r\n\005title\030\002 \001(\t\022\023\n\013description\030"
      "\003 \001(\t\022 \n\030only_in_predefined_roles\030\004 \001(\010\022"
      "D\n\005stage\030\005 \001(\01625.google.iam.admin.v1.Per"
      "mission.PermissionLaunchStage\022[\n\032custom_"
      "roles_support_level\030\006 \001(\01627.google.iam.a"
      "dmin.v1.Permission.CustomRolesSupportLev"
      "el\"D\n\025PermissionLaunchStage\022\t\n\005ALPHA\020\000\022\010"
      "\n\004BETA\020\001\022\006\n\002GA\020\002\022\016\n\nDEPRECATED\020\003\"H\n\027Cust"
      "omRolesSupportLevel\022\r\n\tSUPPORTED\020\000\022\013\n\007TE"
      "STING\020\001\022\021\n\rNOT_SUPPORTED\020\002\"d\n\037QueryTesta"
      "blePermissionsRequest\022\032\n\022full_resource_n"
      "ame\030\001 \001(\t\022\021\n\tpage_size\030\002 \001(\005\022\022\n\npage_tok"
      "en\030\003 \001(\t\"q\n QueryTestablePermissionsResp"
      "onse\0224\n\013permissions\030\001 \003(\0132\037.google.iam.a"
      "dmin.v1.Permission\022\027\n\017next_page_token\030\002 "
      "\001(\t*a\n\032ServiceAccountKeyAlgorithm\022\027\n\023KEY"
      "_ALG_UNSPECIFIED\020\000\022\024\n\020KEY_ALG_RSA_1024\020\001"
      "\022\024\n\020KEY_ALG_RSA_2048\020\002*l\n\034ServiceAccount"
      "PrivateKeyType\022\024\n\020TYPE_UNSPECIFIED\020\000\022\024\n\020"
      "TYPE_PKCS12_FILE\020\001\022 \n\034TYPE_GOOGLE_CREDEN"
      "TIALS_FILE\020\002*]\n\033ServiceAccountPublicKeyT"
      "ype\022\r\n\tTYPE_NONE\020\000\022\026\n\022TYPE_X509_PEM_FILE"
      "\020\001\022\027\n\023TYPE_RAW_PUBLIC_KEY\020\002*\037\n\010RoleView\022"
      "\t\n\005BASIC\020\000\022\010\n\004FULL\020\0012\230\032\n\003IAM\022\247\001\n\023ListSer"
      "viceAccounts\022/.google.iam.admin.v1.ListS"
      "erviceAccountsRequest\0320.google.iam.admin"
      ".v1.ListServiceAccountsResponse\"-\202\323\344\223\002\'\022"
      "%/v1/{name=projects/*}/serviceAccounts\022\230"
      "\001\n\021GetServiceAccount\022-.google.iam.admin."
      "v1.GetServiceAccountRequest\032#.google.iam"
      ".admin.v1.ServiceAccount\"/\202\323\344\223\002)\022\'/v1/{n"
      "ame=projects/*/serviceAccounts/*}\022\237\001\n\024Cr"
      "eateServiceAccount\0220.google.iam.admin.v1"
      ".CreateServiceAccountRequest\032#.google.ia"
      "m.admin.v1.ServiceAccount\"0\202\323\344\223\002*\"%/v1/{"
      "name=projects/*}/serviceAccounts:\001*\022\224\001\n\024"
      "UpdateServiceAccount\022#.google.iam.admin."
      "v1.ServiceAccount\032#.google.iam.admin.v1."
      "ServiceAccount\"2\202\323\344\223\002,\032\'/v1/{name=projec"
      "ts/*/serviceAccounts/*}:\001*\022\221\001\n\024DeleteSer"
      "viceAccount\0220.google.iam.admin.v1.Delete"
      "ServiceAccountRequest\032\026.google.protobuf."
      "Empty\"/\202\323\344\223\002)*\'/v1/{name=projects/*/serv"
      "iceAccounts/*}\022\267\001\n\026ListServiceAccountKey"
      "s\0222.google.iam.admin.v1.ListServiceAccou"
      "ntKeysRequest\0323.google.iam.admin.v1.List"
      "ServiceAccountKeysResponse\"4\202\323\344\223\002.\022,/v1/"
      "{name=projects/*/serviceAccounts/*}/keys"
      "\022\250\001\n\024GetServiceAccountKey\0220.google.iam.a"
      "dmin.v1.GetServiceAccountKeyRequest\032&.go"
      "ogle.iam.admin.v1.ServiceAccountKey\"6\202\323\344"
      "\223\0020\022./v1/{name=projects/*/serviceAccount"
      "s/*/keys/*}\022\257\001\n\027CreateServiceAccountKey\022"
      "3.google.iam.admin.v1.CreateServiceAccou"
      "ntKeyRequest\032&.google.iam.admin.v1.Servi"
      "ceAccountKey\"7\202\323\344\223\0021\",/v1/{name=projects"
      "/*/serviceAccounts/*}/keys:\001*\022\236\001\n\027Delete"
      "ServiceAccountKey\0223.google.iam.admin.v1."
      "DeleteServiceAccountKeyRequest\032\026.google."
      "protobuf.Empty\"6\202\323\344\223\0020*./v1/{name=projec"
      "ts/*/serviceAccounts/*/keys/*}\022\224\001\n\010SignB"
      "lob\022$.google.iam.admin.v1.SignBlobReques"
      "t\032%.google.iam.admin.v1.SignBlobResponse"
      "\";\202\323\344\223\0025\"0/v1/{name=projects/*/serviceAc"
      "counts/*}:signBlob:\001*\022\220\001\n\007SignJwt\022#.goog"
      "le.iam.admin.v1.SignJwtRequest\032$.google."
      "iam.admin.v1.SignJwtResponse\":\202\323\344\223\0024\"//v"
      "1/{name=projects/*/serviceAccounts/*}:si"
      "gnJwt:\001*\022\213\001\n\014GetIamPolicy\022\".google.iam.v"
      "1.GetIamPolicyRequest\032\025.google.iam.v1.Po"
      "licy\"@\202\323\344\223\002:\"8/v1/{resource=projects/*/s"
      "erviceAccounts/*}:getIamPolicy\022\216\001\n\014SetIa"
      "mPolicy\022\".google.iam.v1.SetIamPolicyRequ"
      "est\032\025.google.iam.v1.Policy\"C\202\323\344\223\002=\"8/v1/"
      "{resource=projects/*/serviceAccounts/*}:"
      "setIamPolicy:\001*\022\264\001\n\022TestIamPermissions\022("
      ".google.iam.v1.TestIamPermissionsRequest"
      "\032).google.iam.v1.TestIamPermissionsRespo"
      "nse\"I\202\323\344\223\002C\">/v1/{resource=projects/*/se"
      "rviceAccounts/*}:testIamPermissions:\001*\022\242"
      "\001\n\023QueryGrantableRoles\022/.google.iam.admi"
      "n.v1.QueryGrantableRolesRequest\0320.google"
      ".iam.admin.v1.QueryGrantableRolesRespons"
      "e\"(\202\323\344\223\002\"\"\035/v1/roles:queryGrantableRoles"
      ":\001*\022m\n\tListRoles\022%.google.iam.admin.v1.L"
      "istRolesRequest\032&.google.iam.admin.v1.Li"
      "stRolesResponse\"\021\202\323\344\223\002\013\022\t/v1/roles\022e\n\007Ge"
      "tRole\022#.google.iam.admin.v1.GetRoleReque"
      "st\032\031.google.iam.admin.v1.Role\"\032\202\323\344\223\002\024\022\022/"
      "v1/{name=roles/*}\022~\n\nCreateRole\022&.google"
      ".iam.admin.v1.CreateRoleRequest\032\031.google"
      ".iam.admin.v1.Role\"-\202\323\344\223\002\'\"\"/v1/{parent="
      "organizations/*}/roles:\001*\022\201\001\n\nUpdateRole"
      "\022&.google.iam.admin.v1.UpdateRoleRequest"
      "\032\031.google.iam.admin.v1.Role\"0\202\323\344\223\002*2\"/v1"
      "/{name=organizations/*/roles/*}:\004role\022{\n"
      "\nDeleteRole\022&.google.iam.admin.v1.Delete"
      "RoleRequest\032\031.google.iam.admin.v1.Role\"*"
      "\202\323\344\223\002$*\"/v1/{name=organizations/*/roles/"
      "*}\022\213\001\n\014UndeleteRole\022(.google.iam.admin.v"
      "1.UndeleteRoleRequest\032\031.google.iam.admin"
      ".v1.Role\"6\202\323\344\223\0020\"+/v1/{name=organization"
      "s/*/roles/*}:undelete:\001*\022\274\001\n\030QueryTestab"
      "lePermissions\0224.google.iam.admin.v1.Quer"
      "yTestablePermissionsRequest\0325.google.iam"
      ".admin.v1.QueryTestablePermissionsRespon"
      "se\"3\202\323\344\223\002-\"(/v1/permissions:queryTestabl"
      "ePermissions:\001*Bb\n\027com.google.iam.admin."
      "v1B\010IamProtoP\001Z8google.golang.org/genpro"
      "to/googleapis/iam/admin/v1;admin\370\001\001b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 7523);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/iam/admin/v1/iam.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fiam_2fv1_2fiam_5fpolicy_2eproto::AddDescriptors();
  ::protobuf_google_2fiam_2fv1_2fpolicy_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ffield_5fmask_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto
namespace google {
namespace iam {
namespace admin {
namespace v1 {
const ::google::protobuf::EnumDescriptor* ListServiceAccountKeysRequest_KeyType_descriptor() {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_enum_descriptors[0];
}
bool ListServiceAccountKeysRequest_KeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest::KEY_TYPE_UNSPECIFIED;
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest::USER_MANAGED;
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest::SYSTEM_MANAGED;
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest::KeyType_MIN;
const ListServiceAccountKeysRequest_KeyType ListServiceAccountKeysRequest::KeyType_MAX;
const int ListServiceAccountKeysRequest::KeyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Role_RoleLaunchStage_descriptor() {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_enum_descriptors[1];
}
bool Role_RoleLaunchStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Role_RoleLaunchStage Role::ALPHA;
const Role_RoleLaunchStage Role::BETA;
const Role_RoleLaunchStage Role::GA;
const Role_RoleLaunchStage Role::DEPRECATED;
const Role_RoleLaunchStage Role::DISABLED;
const Role_RoleLaunchStage Role::EAP;
const Role_RoleLaunchStage Role::RoleLaunchStage_MIN;
const Role_RoleLaunchStage Role::RoleLaunchStage_MAX;
const int Role::RoleLaunchStage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Permission_PermissionLaunchStage_descriptor() {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_enum_descriptors[2];
}
bool Permission_PermissionLaunchStage_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Permission_PermissionLaunchStage Permission::ALPHA;
const Permission_PermissionLaunchStage Permission::BETA;
const Permission_PermissionLaunchStage Permission::GA;
const Permission_PermissionLaunchStage Permission::DEPRECATED;
const Permission_PermissionLaunchStage Permission::PermissionLaunchStage_MIN;
const Permission_PermissionLaunchStage Permission::PermissionLaunchStage_MAX;
const int Permission::PermissionLaunchStage_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* Permission_CustomRolesSupportLevel_descriptor() {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_enum_descriptors[3];
}
bool Permission_CustomRolesSupportLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Permission_CustomRolesSupportLevel Permission::SUPPORTED;
const Permission_CustomRolesSupportLevel Permission::TESTING;
const Permission_CustomRolesSupportLevel Permission::NOT_SUPPORTED;
const Permission_CustomRolesSupportLevel Permission::CustomRolesSupportLevel_MIN;
const Permission_CustomRolesSupportLevel Permission::CustomRolesSupportLevel_MAX;
const int Permission::CustomRolesSupportLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ServiceAccountKeyAlgorithm_descriptor() {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_enum_descriptors[4];
}
bool ServiceAccountKeyAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceAccountPrivateKeyType_descriptor() {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_enum_descriptors[5];
}
bool ServiceAccountPrivateKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ServiceAccountPublicKeyType_descriptor() {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_enum_descriptors[6];
}
bool ServiceAccountPublicKeyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RoleView_descriptor() {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_enum_descriptors[7];
}
bool RoleView_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ServiceAccount::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceAccount::kNameFieldNumber;
const int ServiceAccount::kProjectIdFieldNumber;
const int ServiceAccount::kUniqueIdFieldNumber;
const int ServiceAccount::kEmailFieldNumber;
const int ServiceAccount::kDisplayNameFieldNumber;
const int ServiceAccount::kEtagFieldNumber;
const int ServiceAccount::kOauth2ClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceAccount::ServiceAccount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsServiceAccount();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ServiceAccount)
}
ServiceAccount::ServiceAccount(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsServiceAccount();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ServiceAccount)
}
ServiceAccount::ServiceAccount(const ServiceAccount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.project_id().size() > 0) {
    project_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.project_id(),
      GetArenaNoVirtual());
  }
  unique_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.unique_id().size() > 0) {
    unique_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.unique_id(),
      GetArenaNoVirtual());
  }
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.email().size() > 0) {
    email_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email(),
      GetArenaNoVirtual());
  }
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.display_name().size() > 0) {
    display_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.display_name(),
      GetArenaNoVirtual());
  }
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.etag().size() > 0) {
    etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.etag(),
      GetArenaNoVirtual());
  }
  oauth2_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.oauth2_client_id().size() > 0) {
    oauth2_client_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.oauth2_client_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ServiceAccount)
}

void ServiceAccount::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unique_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oauth2_client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ServiceAccount::~ServiceAccount() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ServiceAccount)
  SharedDtor();
}

void ServiceAccount::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  unique_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  display_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  oauth2_client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServiceAccount::ArenaDtor(void* object) {
  ServiceAccount* _this = reinterpret_cast< ServiceAccount* >(object);
  (void)_this;
}
void ServiceAccount::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServiceAccount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceAccount::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServiceAccount& ServiceAccount::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsServiceAccount();
  return *internal_default_instance();
}

ServiceAccount* ServiceAccount::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServiceAccount>(arena);
}

void ServiceAccount::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ServiceAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  project_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  unique_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  email_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  display_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  etag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  oauth2_client_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool ServiceAccount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ServiceAccount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccount.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string project_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->project_id().data(), static_cast<int>(this->project_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccount.project_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string unique_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unique_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unique_id().data(), static_cast<int>(this->unique_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccount.unique_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string email = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->email().data(), static_cast<int>(this->email().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccount.email"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string display_name = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_display_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->display_name().data(), static_cast<int>(this->display_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccount.display_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes etag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_etag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string oauth2_client_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_oauth2_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->oauth2_client_id().data(), static_cast<int>(this->oauth2_client_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccount.oauth2_client_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ServiceAccount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ServiceAccount)
  return false;
#undef DO_
}

void ServiceAccount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ServiceAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string project_id = 2;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.project_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->project_id(), output);
  }

  // string unique_id = 4;
  if (this->unique_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_id().data(), static_cast<int>(this->unique_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.unique_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->unique_id(), output);
  }

  // string email = 5;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->email(), output);
  }

  // string display_name = 6;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.display_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->display_name(), output);
  }

  // bytes etag = 7;
  if (this->etag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->etag(), output);
  }

  // string oauth2_client_id = 9;
  if (this->oauth2_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oauth2_client_id().data(), static_cast<int>(this->oauth2_client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.oauth2_client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->oauth2_client_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ServiceAccount)
}

::google::protobuf::uint8* ServiceAccount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ServiceAccount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string project_id = 2;
  if (this->project_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->project_id().data(), static_cast<int>(this->project_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.project_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->project_id(), target);
  }

  // string unique_id = 4;
  if (this->unique_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unique_id().data(), static_cast<int>(this->unique_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.unique_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->unique_id(), target);
  }

  // string email = 5;
  if (this->email().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->email().data(), static_cast<int>(this->email().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->email(), target);
  }

  // string display_name = 6;
  if (this->display_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->display_name().data(), static_cast<int>(this->display_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.display_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->display_name(), target);
  }

  // bytes etag = 7;
  if (this->etag().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->etag(), target);
  }

  // string oauth2_client_id = 9;
  if (this->oauth2_client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->oauth2_client_id().data(), static_cast<int>(this->oauth2_client_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccount.oauth2_client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->oauth2_client_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ServiceAccount)
  return target;
}

size_t ServiceAccount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ServiceAccount)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string project_id = 2;
  if (this->project_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->project_id());
  }

  // string unique_id = 4;
  if (this->unique_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->unique_id());
  }

  // string email = 5;
  if (this->email().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // string display_name = 6;
  if (this->display_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->display_name());
  }

  // bytes etag = 7;
  if (this->etag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->etag());
  }

  // string oauth2_client_id = 9;
  if (this->oauth2_client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->oauth2_client_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceAccount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ServiceAccount)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceAccount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceAccount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ServiceAccount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ServiceAccount)
    MergeFrom(*source);
  }
}

void ServiceAccount::MergeFrom(const ServiceAccount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ServiceAccount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.project_id().size() > 0) {
    set_project_id(from.project_id());
  }
  if (from.unique_id().size() > 0) {
    set_unique_id(from.unique_id());
  }
  if (from.email().size() > 0) {
    set_email(from.email());
  }
  if (from.display_name().size() > 0) {
    set_display_name(from.display_name());
  }
  if (from.etag().size() > 0) {
    set_etag(from.etag());
  }
  if (from.oauth2_client_id().size() > 0) {
    set_oauth2_client_id(from.oauth2_client_id());
  }
}

void ServiceAccount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ServiceAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceAccount::CopyFrom(const ServiceAccount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ServiceAccount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceAccount::IsInitialized() const {
  return true;
}

void ServiceAccount::Swap(ServiceAccount* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServiceAccount* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ServiceAccount::UnsafeArenaSwap(ServiceAccount* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServiceAccount::InternalSwap(ServiceAccount* other) {
  using std::swap;
  name_.Swap(&other->name_);
  project_id_.Swap(&other->project_id_);
  unique_id_.Swap(&other->unique_id_);
  email_.Swap(&other->email_);
  display_name_.Swap(&other->display_name_);
  etag_.Swap(&other->etag_);
  oauth2_client_id_.Swap(&other->oauth2_client_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceAccount::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateServiceAccountRequest::InitAsDefaultInstance() {
  ::google::iam::admin::v1::_CreateServiceAccountRequest_default_instance_._instance.get_mutable()->service_account_ = const_cast< ::google::iam::admin::v1::ServiceAccount*>(
      ::google::iam::admin::v1::ServiceAccount::internal_default_instance());
}
void CreateServiceAccountRequest::_slow_mutable_service_account() {
  service_account_ = ::google::protobuf::Arena::CreateMessage< ::google::iam::admin::v1::ServiceAccount >(
      GetArenaNoVirtual());
}
void CreateServiceAccountRequest::unsafe_arena_set_allocated_service_account(
    ::google::iam::admin::v1::ServiceAccount* service_account) {
  if (GetArenaNoVirtual() == NULL) {
    delete service_account_;
  }
  service_account_ = service_account;
  if (service_account) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateServiceAccountRequest.service_account)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateServiceAccountRequest::kNameFieldNumber;
const int CreateServiceAccountRequest::kAccountIdFieldNumber;
const int CreateServiceAccountRequest::kServiceAccountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateServiceAccountRequest::CreateServiceAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsCreateServiceAccountRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.CreateServiceAccountRequest)
}
CreateServiceAccountRequest::CreateServiceAccountRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsCreateServiceAccountRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.CreateServiceAccountRequest)
}
CreateServiceAccountRequest::CreateServiceAccountRequest(const CreateServiceAccountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account_id().size() > 0) {
    account_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_id(),
      GetArenaNoVirtual());
  }
  if (from.has_service_account()) {
    service_account_ = new ::google::iam::admin::v1::ServiceAccount(*from.service_account_);
  } else {
    service_account_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.CreateServiceAccountRequest)
}

void CreateServiceAccountRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  service_account_ = NULL;
  _cached_size_ = 0;
}

CreateServiceAccountRequest::~CreateServiceAccountRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.CreateServiceAccountRequest)
  SharedDtor();
}

void CreateServiceAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete service_account_;
}

void CreateServiceAccountRequest::ArenaDtor(void* object) {
  CreateServiceAccountRequest* _this = reinterpret_cast< CreateServiceAccountRequest* >(object);
  (void)_this;
}
void CreateServiceAccountRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateServiceAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateServiceAccountRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateServiceAccountRequest& CreateServiceAccountRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsCreateServiceAccountRequest();
  return *internal_default_instance();
}

CreateServiceAccountRequest* CreateServiceAccountRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateServiceAccountRequest>(arena);
}

void CreateServiceAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.CreateServiceAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  account_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && service_account_ != NULL) {
    delete service_account_;
  }
  service_account_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateServiceAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.CreateServiceAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.CreateServiceAccountRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string account_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account_id().data(), static_cast<int>(this->account_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.CreateServiceAccountRequest.account_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.admin.v1.ServiceAccount service_account = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_service_account()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.CreateServiceAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.CreateServiceAccountRequest)
  return false;
#undef DO_
}

void CreateServiceAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.CreateServiceAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateServiceAccountRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateServiceAccountRequest.account_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account_id(), output);
  }

  // .google.iam.admin.v1.ServiceAccount service_account = 3;
  if (this->has_service_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->service_account_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.CreateServiceAccountRequest)
}

::google::protobuf::uint8* CreateServiceAccountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.CreateServiceAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateServiceAccountRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account_id().data(), static_cast<int>(this->account_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateServiceAccountRequest.account_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account_id(), target);
  }

  // .google.iam.admin.v1.ServiceAccount service_account = 3;
  if (this->has_service_account()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->service_account_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.CreateServiceAccountRequest)
  return target;
}

size_t CreateServiceAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.CreateServiceAccountRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string account_id = 2;
  if (this->account_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account_id());
  }

  // .google.iam.admin.v1.ServiceAccount service_account = 3;
  if (this->has_service_account()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->service_account_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateServiceAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.CreateServiceAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateServiceAccountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateServiceAccountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.CreateServiceAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.CreateServiceAccountRequest)
    MergeFrom(*source);
  }
}

void CreateServiceAccountRequest::MergeFrom(const CreateServiceAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.CreateServiceAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.account_id().size() > 0) {
    set_account_id(from.account_id());
  }
  if (from.has_service_account()) {
    mutable_service_account()->::google::iam::admin::v1::ServiceAccount::MergeFrom(from.service_account());
  }
}

void CreateServiceAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.CreateServiceAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateServiceAccountRequest::CopyFrom(const CreateServiceAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.CreateServiceAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateServiceAccountRequest::IsInitialized() const {
  return true;
}

void CreateServiceAccountRequest::Swap(CreateServiceAccountRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateServiceAccountRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateServiceAccountRequest::UnsafeArenaSwap(CreateServiceAccountRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateServiceAccountRequest::InternalSwap(CreateServiceAccountRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  account_id_.Swap(&other->account_id_);
  swap(service_account_, other->service_account_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateServiceAccountRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListServiceAccountsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServiceAccountsRequest::kNameFieldNumber;
const int ListServiceAccountsRequest::kPageSizeFieldNumber;
const int ListServiceAccountsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServiceAccountsRequest::ListServiceAccountsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ListServiceAccountsRequest)
}
ListServiceAccountsRequest::ListServiceAccountsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ListServiceAccountsRequest)
}
ListServiceAccountsRequest::ListServiceAccountsRequest(const ListServiceAccountsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ListServiceAccountsRequest)
}

void ListServiceAccountsRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

ListServiceAccountsRequest::~ListServiceAccountsRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ListServiceAccountsRequest)
  SharedDtor();
}

void ListServiceAccountsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListServiceAccountsRequest::ArenaDtor(void* object) {
  ListServiceAccountsRequest* _this = reinterpret_cast< ListServiceAccountsRequest* >(object);
  (void)_this;
}
void ListServiceAccountsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListServiceAccountsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceAccountsRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListServiceAccountsRequest& ListServiceAccountsRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountsRequest();
  return *internal_default_instance();
}

ListServiceAccountsRequest* ListServiceAccountsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListServiceAccountsRequest>(arena);
}

void ListServiceAccountsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ListServiceAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

bool ListServiceAccountsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ListServiceAccountsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ListServiceAccountsRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ListServiceAccountsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ListServiceAccountsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ListServiceAccountsRequest)
  return false;
#undef DO_
}

void ListServiceAccountsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ListServiceAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountsRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ListServiceAccountsRequest)
}

::google::protobuf::uint8* ListServiceAccountsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ListServiceAccountsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountsRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ListServiceAccountsRequest)
  return target;
}

size_t ListServiceAccountsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ListServiceAccountsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceAccountsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ListServiceAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListServiceAccountsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServiceAccountsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ListServiceAccountsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ListServiceAccountsRequest)
    MergeFrom(*source);
  }
}

void ListServiceAccountsRequest::MergeFrom(const ListServiceAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ListServiceAccountsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void ListServiceAccountsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ListServiceAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceAccountsRequest::CopyFrom(const ListServiceAccountsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ListServiceAccountsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceAccountsRequest::IsInitialized() const {
  return true;
}

void ListServiceAccountsRequest::Swap(ListServiceAccountsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListServiceAccountsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListServiceAccountsRequest::UnsafeArenaSwap(ListServiceAccountsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListServiceAccountsRequest::InternalSwap(ListServiceAccountsRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  page_token_.Swap(&other->page_token_);
  swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServiceAccountsRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListServiceAccountsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServiceAccountsResponse::kAccountsFieldNumber;
const int ListServiceAccountsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServiceAccountsResponse::ListServiceAccountsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ListServiceAccountsResponse)
}
ListServiceAccountsResponse::ListServiceAccountsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  accounts_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountsResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ListServiceAccountsResponse)
}
ListServiceAccountsResponse::ListServiceAccountsResponse(const ListServiceAccountsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      accounts_(from.accounts_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ListServiceAccountsResponse)
}

void ListServiceAccountsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListServiceAccountsResponse::~ListServiceAccountsResponse() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ListServiceAccountsResponse)
  SharedDtor();
}

void ListServiceAccountsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListServiceAccountsResponse::ArenaDtor(void* object) {
  ListServiceAccountsResponse* _this = reinterpret_cast< ListServiceAccountsResponse* >(object);
  (void)_this;
}
void ListServiceAccountsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListServiceAccountsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceAccountsResponse::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListServiceAccountsResponse& ListServiceAccountsResponse::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountsResponse();
  return *internal_default_instance();
}

ListServiceAccountsResponse* ListServiceAccountsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListServiceAccountsResponse>(arena);
}

void ListServiceAccountsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ListServiceAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  accounts_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool ListServiceAccountsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ListServiceAccountsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.iam.admin.v1.ServiceAccount accounts = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_accounts()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ListServiceAccountsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ListServiceAccountsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ListServiceAccountsResponse)
  return false;
#undef DO_
}

void ListServiceAccountsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ListServiceAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.iam.admin.v1.ServiceAccount accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accounts_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->accounts(static_cast<int>(i)), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ListServiceAccountsResponse)
}

::google::protobuf::uint8* ListServiceAccountsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ListServiceAccountsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.iam.admin.v1.ServiceAccount accounts = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->accounts_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->accounts(static_cast<int>(i)), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ListServiceAccountsResponse)
  return target;
}

size_t ListServiceAccountsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ListServiceAccountsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.iam.admin.v1.ServiceAccount accounts = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->accounts_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->accounts(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceAccountsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ListServiceAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListServiceAccountsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServiceAccountsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ListServiceAccountsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ListServiceAccountsResponse)
    MergeFrom(*source);
  }
}

void ListServiceAccountsResponse::MergeFrom(const ListServiceAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ListServiceAccountsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  accounts_.MergeFrom(from.accounts_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListServiceAccountsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ListServiceAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceAccountsResponse::CopyFrom(const ListServiceAccountsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ListServiceAccountsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceAccountsResponse::IsInitialized() const {
  return true;
}

void ListServiceAccountsResponse::Swap(ListServiceAccountsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListServiceAccountsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListServiceAccountsResponse::UnsafeArenaSwap(ListServiceAccountsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListServiceAccountsResponse::InternalSwap(ListServiceAccountsResponse* other) {
  using std::swap;
  accounts_.InternalSwap(&other->accounts_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServiceAccountsResponse::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetServiceAccountRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServiceAccountRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServiceAccountRequest::GetServiceAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsGetServiceAccountRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.GetServiceAccountRequest)
}
GetServiceAccountRequest::GetServiceAccountRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsGetServiceAccountRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.GetServiceAccountRequest)
}
GetServiceAccountRequest::GetServiceAccountRequest(const GetServiceAccountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.GetServiceAccountRequest)
}

void GetServiceAccountRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetServiceAccountRequest::~GetServiceAccountRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.GetServiceAccountRequest)
  SharedDtor();
}

void GetServiceAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetServiceAccountRequest::ArenaDtor(void* object) {
  GetServiceAccountRequest* _this = reinterpret_cast< GetServiceAccountRequest* >(object);
  (void)_this;
}
void GetServiceAccountRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetServiceAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceAccountRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetServiceAccountRequest& GetServiceAccountRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsGetServiceAccountRequest();
  return *internal_default_instance();
}

GetServiceAccountRequest* GetServiceAccountRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetServiceAccountRequest>(arena);
}

void GetServiceAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.GetServiceAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool GetServiceAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.GetServiceAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.GetServiceAccountRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.GetServiceAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.GetServiceAccountRequest)
  return false;
#undef DO_
}

void GetServiceAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.GetServiceAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.GetServiceAccountRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.GetServiceAccountRequest)
}

::google::protobuf::uint8* GetServiceAccountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.GetServiceAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.GetServiceAccountRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.GetServiceAccountRequest)
  return target;
}

size_t GetServiceAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.GetServiceAccountRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.GetServiceAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceAccountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServiceAccountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.GetServiceAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.GetServiceAccountRequest)
    MergeFrom(*source);
  }
}

void GetServiceAccountRequest::MergeFrom(const GetServiceAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.GetServiceAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void GetServiceAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.GetServiceAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceAccountRequest::CopyFrom(const GetServiceAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.GetServiceAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceAccountRequest::IsInitialized() const {
  return true;
}

void GetServiceAccountRequest::Swap(GetServiceAccountRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetServiceAccountRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetServiceAccountRequest::UnsafeArenaSwap(GetServiceAccountRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetServiceAccountRequest::InternalSwap(GetServiceAccountRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetServiceAccountRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteServiceAccountRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteServiceAccountRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteServiceAccountRequest::DeleteServiceAccountRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsDeleteServiceAccountRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.DeleteServiceAccountRequest)
}
DeleteServiceAccountRequest::DeleteServiceAccountRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsDeleteServiceAccountRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.DeleteServiceAccountRequest)
}
DeleteServiceAccountRequest::DeleteServiceAccountRequest(const DeleteServiceAccountRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.DeleteServiceAccountRequest)
}

void DeleteServiceAccountRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteServiceAccountRequest::~DeleteServiceAccountRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.DeleteServiceAccountRequest)
  SharedDtor();
}

void DeleteServiceAccountRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteServiceAccountRequest::ArenaDtor(void* object) {
  DeleteServiceAccountRequest* _this = reinterpret_cast< DeleteServiceAccountRequest* >(object);
  (void)_this;
}
void DeleteServiceAccountRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteServiceAccountRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteServiceAccountRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteServiceAccountRequest& DeleteServiceAccountRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsDeleteServiceAccountRequest();
  return *internal_default_instance();
}

DeleteServiceAccountRequest* DeleteServiceAccountRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteServiceAccountRequest>(arena);
}

void DeleteServiceAccountRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool DeleteServiceAccountRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.DeleteServiceAccountRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.DeleteServiceAccountRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.DeleteServiceAccountRequest)
  return false;
#undef DO_
}

void DeleteServiceAccountRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.DeleteServiceAccountRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.DeleteServiceAccountRequest)
}

::google::protobuf::uint8* DeleteServiceAccountRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.DeleteServiceAccountRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.DeleteServiceAccountRequest)
  return target;
}

size_t DeleteServiceAccountRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteServiceAccountRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteServiceAccountRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteServiceAccountRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.DeleteServiceAccountRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.DeleteServiceAccountRequest)
    MergeFrom(*source);
  }
}

void DeleteServiceAccountRequest::MergeFrom(const DeleteServiceAccountRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void DeleteServiceAccountRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteServiceAccountRequest::CopyFrom(const DeleteServiceAccountRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.DeleteServiceAccountRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteServiceAccountRequest::IsInitialized() const {
  return true;
}

void DeleteServiceAccountRequest::Swap(DeleteServiceAccountRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteServiceAccountRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteServiceAccountRequest::UnsafeArenaSwap(DeleteServiceAccountRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteServiceAccountRequest::InternalSwap(DeleteServiceAccountRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteServiceAccountRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListServiceAccountKeysRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServiceAccountKeysRequest::kNameFieldNumber;
const int ListServiceAccountKeysRequest::kKeyTypesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServiceAccountKeysRequest::ListServiceAccountKeysRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountKeysRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ListServiceAccountKeysRequest)
}
ListServiceAccountKeysRequest::ListServiceAccountKeysRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  key_types_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountKeysRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ListServiceAccountKeysRequest)
}
ListServiceAccountKeysRequest::ListServiceAccountKeysRequest(const ListServiceAccountKeysRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      key_types_(from.key_types_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ListServiceAccountKeysRequest)
}

void ListServiceAccountKeysRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListServiceAccountKeysRequest::~ListServiceAccountKeysRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ListServiceAccountKeysRequest)
  SharedDtor();
}

void ListServiceAccountKeysRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListServiceAccountKeysRequest::ArenaDtor(void* object) {
  ListServiceAccountKeysRequest* _this = reinterpret_cast< ListServiceAccountKeysRequest* >(object);
  (void)_this;
}
void ListServiceAccountKeysRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListServiceAccountKeysRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceAccountKeysRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListServiceAccountKeysRequest& ListServiceAccountKeysRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountKeysRequest();
  return *internal_default_instance();
}

ListServiceAccountKeysRequest* ListServiceAccountKeysRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListServiceAccountKeysRequest>(arena);
}

void ListServiceAccountKeysRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_types_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool ListServiceAccountKeysRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ListServiceAccountKeysRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          ::google::protobuf::uint32 length;
          DO_(input->ReadVarint32(&length));
          ::google::protobuf::io::CodedInputStream::Limit limit = input->PushLimit(static_cast<int>(length));
          while (input->BytesUntilLimit() > 0) {
            int value;
            DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
            add_key_types(static_cast< ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType >(value));
          }
          input->PopLimit(limit);
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          add_key_types(static_cast< ::google::iam::admin::v1::ListServiceAccountKeysRequest_KeyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ListServiceAccountKeysRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ListServiceAccountKeysRequest)
  return false;
#undef DO_
}

void ListServiceAccountKeysRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountKeysRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated .google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
  if (this->key_types_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      output);
    output->WriteVarint32(
        static_cast< ::google::protobuf::uint32>(_key_types_cached_byte_size_));
  }
  for (int i = 0, n = this->key_types_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnumNoTag(
      this->key_types(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ListServiceAccountKeysRequest)
}

::google::protobuf::uint8* ListServiceAccountKeysRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListServiceAccountKeysRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
  if (this->key_types_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(      static_cast< ::google::protobuf::uint32>(
            _key_types_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumNoTagToArray(
      this->key_types_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ListServiceAccountKeysRequest)
  return target;
}

size_t ListServiceAccountKeysRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.iam.admin.v1.ListServiceAccountKeysRequest.KeyType key_types = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->key_types_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->key_types(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _key_types_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceAccountKeysRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListServiceAccountKeysRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServiceAccountKeysRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ListServiceAccountKeysRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ListServiceAccountKeysRequest)
    MergeFrom(*source);
  }
}

void ListServiceAccountKeysRequest::MergeFrom(const ListServiceAccountKeysRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  key_types_.MergeFrom(from.key_types_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void ListServiceAccountKeysRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceAccountKeysRequest::CopyFrom(const ListServiceAccountKeysRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ListServiceAccountKeysRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceAccountKeysRequest::IsInitialized() const {
  return true;
}

void ListServiceAccountKeysRequest::Swap(ListServiceAccountKeysRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListServiceAccountKeysRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListServiceAccountKeysRequest::UnsafeArenaSwap(ListServiceAccountKeysRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListServiceAccountKeysRequest::InternalSwap(ListServiceAccountKeysRequest* other) {
  using std::swap;
  key_types_.InternalSwap(&other->key_types_);
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServiceAccountKeysRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListServiceAccountKeysResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListServiceAccountKeysResponse::kKeysFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListServiceAccountKeysResponse::ListServiceAccountKeysResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountKeysResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ListServiceAccountKeysResponse)
}
ListServiceAccountKeysResponse::ListServiceAccountKeysResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  keys_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountKeysResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ListServiceAccountKeysResponse)
}
ListServiceAccountKeysResponse::ListServiceAccountKeysResponse(const ListServiceAccountKeysResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ListServiceAccountKeysResponse)
}

void ListServiceAccountKeysResponse::SharedCtor() {
  _cached_size_ = 0;
}

ListServiceAccountKeysResponse::~ListServiceAccountKeysResponse() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ListServiceAccountKeysResponse)
  SharedDtor();
}

void ListServiceAccountKeysResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
}

void ListServiceAccountKeysResponse::ArenaDtor(void* object) {
  ListServiceAccountKeysResponse* _this = reinterpret_cast< ListServiceAccountKeysResponse* >(object);
  (void)_this;
}
void ListServiceAccountKeysResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListServiceAccountKeysResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListServiceAccountKeysResponse::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListServiceAccountKeysResponse& ListServiceAccountKeysResponse::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListServiceAccountKeysResponse();
  return *internal_default_instance();
}

ListServiceAccountKeysResponse* ListServiceAccountKeysResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListServiceAccountKeysResponse>(arena);
}

void ListServiceAccountKeysResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  _internal_metadata_.Clear();
}

bool ListServiceAccountKeysResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.iam.admin.v1.ServiceAccountKey keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_keys()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ListServiceAccountKeysResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ListServiceAccountKeysResponse)
  return false;
#undef DO_
}

void ListServiceAccountKeysResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.iam.admin.v1.ServiceAccountKey keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keys(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ListServiceAccountKeysResponse)
}

::google::protobuf::uint8* ListServiceAccountKeysResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.iam.admin.v1.ServiceAccountKey keys = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->keys_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->keys(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ListServiceAccountKeysResponse)
  return target;
}

size_t ListServiceAccountKeysResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.iam.admin.v1.ServiceAccountKey keys = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->keys_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->keys(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListServiceAccountKeysResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListServiceAccountKeysResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListServiceAccountKeysResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ListServiceAccountKeysResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ListServiceAccountKeysResponse)
    MergeFrom(*source);
  }
}

void ListServiceAccountKeysResponse::MergeFrom(const ListServiceAccountKeysResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
}

void ListServiceAccountKeysResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListServiceAccountKeysResponse::CopyFrom(const ListServiceAccountKeysResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ListServiceAccountKeysResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListServiceAccountKeysResponse::IsInitialized() const {
  return true;
}

void ListServiceAccountKeysResponse::Swap(ListServiceAccountKeysResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListServiceAccountKeysResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListServiceAccountKeysResponse::UnsafeArenaSwap(ListServiceAccountKeysResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListServiceAccountKeysResponse::InternalSwap(ListServiceAccountKeysResponse* other) {
  using std::swap;
  keys_.InternalSwap(&other->keys_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListServiceAccountKeysResponse::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetServiceAccountKeyRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetServiceAccountKeyRequest::kNameFieldNumber;
const int GetServiceAccountKeyRequest::kPublicKeyTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetServiceAccountKeyRequest::GetServiceAccountKeyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsGetServiceAccountKeyRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.GetServiceAccountKeyRequest)
}
GetServiceAccountKeyRequest::GetServiceAccountKeyRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsGetServiceAccountKeyRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.GetServiceAccountKeyRequest)
}
GetServiceAccountKeyRequest::GetServiceAccountKeyRequest(const GetServiceAccountKeyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  public_key_type_ = from.public_key_type_;
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.GetServiceAccountKeyRequest)
}

void GetServiceAccountKeyRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_type_ = 0;
  _cached_size_ = 0;
}

GetServiceAccountKeyRequest::~GetServiceAccountKeyRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.GetServiceAccountKeyRequest)
  SharedDtor();
}

void GetServiceAccountKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetServiceAccountKeyRequest::ArenaDtor(void* object) {
  GetServiceAccountKeyRequest* _this = reinterpret_cast< GetServiceAccountKeyRequest* >(object);
  (void)_this;
}
void GetServiceAccountKeyRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetServiceAccountKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetServiceAccountKeyRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetServiceAccountKeyRequest& GetServiceAccountKeyRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsGetServiceAccountKeyRequest();
  return *internal_default_instance();
}

GetServiceAccountKeyRequest* GetServiceAccountKeyRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetServiceAccountKeyRequest>(arena);
}

void GetServiceAccountKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  public_key_type_ = 0;
  _internal_metadata_.Clear();
}

bool GetServiceAccountKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.GetServiceAccountKeyRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_public_key_type(static_cast< ::google::iam::admin::v1::ServiceAccountPublicKeyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.GetServiceAccountKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.GetServiceAccountKeyRequest)
  return false;
#undef DO_
}

void GetServiceAccountKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.GetServiceAccountKeyRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
  if (this->public_key_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->public_key_type(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.GetServiceAccountKeyRequest)
}

::google::protobuf::uint8* GetServiceAccountKeyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.GetServiceAccountKeyRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
  if (this->public_key_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->public_key_type(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.GetServiceAccountKeyRequest)
  return target;
}

size_t GetServiceAccountKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.iam.admin.v1.ServiceAccountPublicKeyType public_key_type = 2;
  if (this->public_key_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->public_key_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetServiceAccountKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetServiceAccountKeyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetServiceAccountKeyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.GetServiceAccountKeyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.GetServiceAccountKeyRequest)
    MergeFrom(*source);
  }
}

void GetServiceAccountKeyRequest::MergeFrom(const GetServiceAccountKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.public_key_type() != 0) {
    set_public_key_type(from.public_key_type());
  }
}

void GetServiceAccountKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetServiceAccountKeyRequest::CopyFrom(const GetServiceAccountKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.GetServiceAccountKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetServiceAccountKeyRequest::IsInitialized() const {
  return true;
}

void GetServiceAccountKeyRequest::Swap(GetServiceAccountKeyRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetServiceAccountKeyRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetServiceAccountKeyRequest::UnsafeArenaSwap(GetServiceAccountKeyRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetServiceAccountKeyRequest::InternalSwap(GetServiceAccountKeyRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(public_key_type_, other->public_key_type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetServiceAccountKeyRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ServiceAccountKey::InitAsDefaultInstance() {
  ::google::iam::admin::v1::_ServiceAccountKey_default_instance_._instance.get_mutable()->valid_after_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
  ::google::iam::admin::v1::_ServiceAccountKey_default_instance_._instance.get_mutable()->valid_before_time_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void ServiceAccountKey::_slow_mutable_valid_after_time() {
  valid_after_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
}
void ServiceAccountKey::unsafe_arena_set_allocated_valid_after_time(
    ::google::protobuf::Timestamp* valid_after_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete valid_after_time_;
  }
  valid_after_time_ = valid_after_time;
  if (valid_after_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccountKey.valid_after_time)
}
void ServiceAccountKey::clear_valid_after_time() {
  if (GetArenaNoVirtual() == NULL && valid_after_time_ != NULL) {
    delete valid_after_time_;
  }
  valid_after_time_ = NULL;
}
void ServiceAccountKey::_slow_mutable_valid_before_time() {
  valid_before_time_ = ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
}
void ServiceAccountKey::unsafe_arena_set_allocated_valid_before_time(
    ::google::protobuf::Timestamp* valid_before_time) {
  if (GetArenaNoVirtual() == NULL) {
    delete valid_before_time_;
  }
  valid_before_time_ = valid_before_time;
  if (valid_before_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.ServiceAccountKey.valid_before_time)
}
void ServiceAccountKey::clear_valid_before_time() {
  if (GetArenaNoVirtual() == NULL && valid_before_time_ != NULL) {
    delete valid_before_time_;
  }
  valid_before_time_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceAccountKey::kNameFieldNumber;
const int ServiceAccountKey::kPrivateKeyTypeFieldNumber;
const int ServiceAccountKey::kKeyAlgorithmFieldNumber;
const int ServiceAccountKey::kPrivateKeyDataFieldNumber;
const int ServiceAccountKey::kPublicKeyDataFieldNumber;
const int ServiceAccountKey::kValidAfterTimeFieldNumber;
const int ServiceAccountKey::kValidBeforeTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceAccountKey::ServiceAccountKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsServiceAccountKey();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ServiceAccountKey)
}
ServiceAccountKey::ServiceAccountKey(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsServiceAccountKey();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ServiceAccountKey)
}
ServiceAccountKey::ServiceAccountKey(const ServiceAccountKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  private_key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.private_key_data().size() > 0) {
    private_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.private_key_data(),
      GetArenaNoVirtual());
  }
  public_key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key_data().size() > 0) {
    public_key_data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_data(),
      GetArenaNoVirtual());
  }
  if (from.has_valid_after_time()) {
    valid_after_time_ = new ::google::protobuf::Timestamp(*from.valid_after_time_);
  } else {
    valid_after_time_ = NULL;
  }
  if (from.has_valid_before_time()) {
    valid_before_time_ = new ::google::protobuf::Timestamp(*from.valid_before_time_);
  } else {
    valid_before_time_ = NULL;
  }
  ::memcpy(&private_key_type_, &from.private_key_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_algorithm_) -
    reinterpret_cast<char*>(&private_key_type_)) + sizeof(key_algorithm_));
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ServiceAccountKey)
}

void ServiceAccountKey::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&valid_after_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_algorithm_) -
      reinterpret_cast<char*>(&valid_after_time_)) + sizeof(key_algorithm_));
  _cached_size_ = 0;
}

ServiceAccountKey::~ServiceAccountKey() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ServiceAccountKey)
  SharedDtor();
}

void ServiceAccountKey::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  private_key_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  public_key_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete valid_after_time_;
  if (this != internal_default_instance()) delete valid_before_time_;
}

void ServiceAccountKey::ArenaDtor(void* object) {
  ServiceAccountKey* _this = reinterpret_cast< ServiceAccountKey* >(object);
  (void)_this;
}
void ServiceAccountKey::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ServiceAccountKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceAccountKey::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServiceAccountKey& ServiceAccountKey::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsServiceAccountKey();
  return *internal_default_instance();
}

ServiceAccountKey* ServiceAccountKey::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ServiceAccountKey>(arena);
}

void ServiceAccountKey::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ServiceAccountKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  private_key_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  public_key_data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && valid_after_time_ != NULL) {
    delete valid_after_time_;
  }
  valid_after_time_ = NULL;
  if (GetArenaNoVirtual() == NULL && valid_before_time_ != NULL) {
    delete valid_before_time_;
  }
  valid_before_time_ = NULL;
  ::memset(&private_key_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_algorithm_) -
      reinterpret_cast<char*>(&private_key_type_)) + sizeof(key_algorithm_));
  _internal_metadata_.Clear();
}

bool ServiceAccountKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ServiceAccountKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ServiceAccountKey.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_private_key_type(static_cast< ::google::iam::admin::v1::ServiceAccountPrivateKeyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes private_key_data = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_private_key_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp valid_after_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_valid_after_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Timestamp valid_before_time = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_valid_before_time()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes public_key_data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_key_algorithm(static_cast< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ServiceAccountKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ServiceAccountKey)
  return false;
#undef DO_
}

void ServiceAccountKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ServiceAccountKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccountKey.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  if (this->private_key_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->private_key_type(), output);
  }

  // bytes private_key_data = 3;
  if (this->private_key_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->private_key_data(), output);
  }

  // .google.protobuf.Timestamp valid_after_time = 4;
  if (this->has_valid_after_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->valid_after_time_, output);
  }

  // .google.protobuf.Timestamp valid_before_time = 5;
  if (this->has_valid_before_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->valid_before_time_, output);
  }

  // bytes public_key_data = 7;
  if (this->public_key_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->public_key_data(), output);
  }

  // .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
  if (this->key_algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->key_algorithm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ServiceAccountKey)
}

::google::protobuf::uint8* ServiceAccountKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ServiceAccountKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ServiceAccountKey.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  if (this->private_key_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->private_key_type(), target);
  }

  // bytes private_key_data = 3;
  if (this->private_key_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->private_key_data(), target);
  }

  // .google.protobuf.Timestamp valid_after_time = 4;
  if (this->has_valid_after_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->valid_after_time_, deterministic, target);
  }

  // .google.protobuf.Timestamp valid_before_time = 5;
  if (this->has_valid_before_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->valid_before_time_, deterministic, target);
  }

  // bytes public_key_data = 7;
  if (this->public_key_data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->public_key_data(), target);
  }

  // .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
  if (this->key_algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->key_algorithm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ServiceAccountKey)
  return target;
}

size_t ServiceAccountKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ServiceAccountKey)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes private_key_data = 3;
  if (this->private_key_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->private_key_data());
  }

  // bytes public_key_data = 7;
  if (this->public_key_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key_data());
  }

  // .google.protobuf.Timestamp valid_after_time = 4;
  if (this->has_valid_after_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->valid_after_time_);
  }

  // .google.protobuf.Timestamp valid_before_time = 5;
  if (this->has_valid_before_time()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->valid_before_time_);
  }

  // .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  if (this->private_key_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->private_key_type());
  }

  // .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 8;
  if (this->key_algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_algorithm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceAccountKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ServiceAccountKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceAccountKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceAccountKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ServiceAccountKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ServiceAccountKey)
    MergeFrom(*source);
  }
}

void ServiceAccountKey::MergeFrom(const ServiceAccountKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ServiceAccountKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.private_key_data().size() > 0) {
    set_private_key_data(from.private_key_data());
  }
  if (from.public_key_data().size() > 0) {
    set_public_key_data(from.public_key_data());
  }
  if (from.has_valid_after_time()) {
    mutable_valid_after_time()->::google::protobuf::Timestamp::MergeFrom(from.valid_after_time());
  }
  if (from.has_valid_before_time()) {
    mutable_valid_before_time()->::google::protobuf::Timestamp::MergeFrom(from.valid_before_time());
  }
  if (from.private_key_type() != 0) {
    set_private_key_type(from.private_key_type());
  }
  if (from.key_algorithm() != 0) {
    set_key_algorithm(from.key_algorithm());
  }
}

void ServiceAccountKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ServiceAccountKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceAccountKey::CopyFrom(const ServiceAccountKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ServiceAccountKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceAccountKey::IsInitialized() const {
  return true;
}

void ServiceAccountKey::Swap(ServiceAccountKey* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ServiceAccountKey* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ServiceAccountKey::UnsafeArenaSwap(ServiceAccountKey* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ServiceAccountKey::InternalSwap(ServiceAccountKey* other) {
  using std::swap;
  name_.Swap(&other->name_);
  private_key_data_.Swap(&other->private_key_data_);
  public_key_data_.Swap(&other->public_key_data_);
  swap(valid_after_time_, other->valid_after_time_);
  swap(valid_before_time_, other->valid_before_time_);
  swap(private_key_type_, other->private_key_type_);
  swap(key_algorithm_, other->key_algorithm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceAccountKey::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateServiceAccountKeyRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateServiceAccountKeyRequest::kNameFieldNumber;
const int CreateServiceAccountKeyRequest::kPrivateKeyTypeFieldNumber;
const int CreateServiceAccountKeyRequest::kKeyAlgorithmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateServiceAccountKeyRequest::CreateServiceAccountKeyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsCreateServiceAccountKeyRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.CreateServiceAccountKeyRequest)
}
CreateServiceAccountKeyRequest::CreateServiceAccountKeyRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsCreateServiceAccountKeyRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.CreateServiceAccountKeyRequest)
}
CreateServiceAccountKeyRequest::CreateServiceAccountKeyRequest(const CreateServiceAccountKeyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  ::memcpy(&private_key_type_, &from.private_key_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&key_algorithm_) -
    reinterpret_cast<char*>(&private_key_type_)) + sizeof(key_algorithm_));
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.CreateServiceAccountKeyRequest)
}

void CreateServiceAccountKeyRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&private_key_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_algorithm_) -
      reinterpret_cast<char*>(&private_key_type_)) + sizeof(key_algorithm_));
  _cached_size_ = 0;
}

CreateServiceAccountKeyRequest::~CreateServiceAccountKeyRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  SharedDtor();
}

void CreateServiceAccountKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateServiceAccountKeyRequest::ArenaDtor(void* object) {
  CreateServiceAccountKeyRequest* _this = reinterpret_cast< CreateServiceAccountKeyRequest* >(object);
  (void)_this;
}
void CreateServiceAccountKeyRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateServiceAccountKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateServiceAccountKeyRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateServiceAccountKeyRequest& CreateServiceAccountKeyRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsCreateServiceAccountKeyRequest();
  return *internal_default_instance();
}

CreateServiceAccountKeyRequest* CreateServiceAccountKeyRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateServiceAccountKeyRequest>(arena);
}

void CreateServiceAccountKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&private_key_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&key_algorithm_) -
      reinterpret_cast<char*>(&private_key_type_)) + sizeof(key_algorithm_));
  _internal_metadata_.Clear();
}

bool CreateServiceAccountKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.CreateServiceAccountKeyRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_private_key_type(static_cast< ::google::iam::admin::v1::ServiceAccountPrivateKeyType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_key_algorithm(static_cast< ::google::iam::admin::v1::ServiceAccountKeyAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  return false;
#undef DO_
}

void CreateServiceAccountKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateServiceAccountKeyRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  if (this->private_key_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->private_key_type(), output);
  }

  // .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
  if (this->key_algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->key_algorithm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.CreateServiceAccountKeyRequest)
}

::google::protobuf::uint8* CreateServiceAccountKeyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateServiceAccountKeyRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  if (this->private_key_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->private_key_type(), target);
  }

  // .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
  if (this->key_algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->key_algorithm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  return target;
}

size_t CreateServiceAccountKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.iam.admin.v1.ServiceAccountPrivateKeyType private_key_type = 2;
  if (this->private_key_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->private_key_type());
  }

  // .google.iam.admin.v1.ServiceAccountKeyAlgorithm key_algorithm = 3;
  if (this->key_algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->key_algorithm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateServiceAccountKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateServiceAccountKeyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateServiceAccountKeyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.CreateServiceAccountKeyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.CreateServiceAccountKeyRequest)
    MergeFrom(*source);
  }
}

void CreateServiceAccountKeyRequest::MergeFrom(const CreateServiceAccountKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.private_key_type() != 0) {
    set_private_key_type(from.private_key_type());
  }
  if (from.key_algorithm() != 0) {
    set_key_algorithm(from.key_algorithm());
  }
}

void CreateServiceAccountKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateServiceAccountKeyRequest::CopyFrom(const CreateServiceAccountKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.CreateServiceAccountKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateServiceAccountKeyRequest::IsInitialized() const {
  return true;
}

void CreateServiceAccountKeyRequest::Swap(CreateServiceAccountKeyRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateServiceAccountKeyRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateServiceAccountKeyRequest::UnsafeArenaSwap(CreateServiceAccountKeyRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateServiceAccountKeyRequest::InternalSwap(CreateServiceAccountKeyRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(private_key_type_, other->private_key_type_);
  swap(key_algorithm_, other->key_algorithm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateServiceAccountKeyRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteServiceAccountKeyRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteServiceAccountKeyRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteServiceAccountKeyRequest::DeleteServiceAccountKeyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsDeleteServiceAccountKeyRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
}
DeleteServiceAccountKeyRequest::DeleteServiceAccountKeyRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsDeleteServiceAccountKeyRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
}
DeleteServiceAccountKeyRequest::DeleteServiceAccountKeyRequest(const DeleteServiceAccountKeyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
}

void DeleteServiceAccountKeyRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteServiceAccountKeyRequest::~DeleteServiceAccountKeyRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  SharedDtor();
}

void DeleteServiceAccountKeyRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteServiceAccountKeyRequest::ArenaDtor(void* object) {
  DeleteServiceAccountKeyRequest* _this = reinterpret_cast< DeleteServiceAccountKeyRequest* >(object);
  (void)_this;
}
void DeleteServiceAccountKeyRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteServiceAccountKeyRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteServiceAccountKeyRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteServiceAccountKeyRequest& DeleteServiceAccountKeyRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsDeleteServiceAccountKeyRequest();
  return *internal_default_instance();
}

DeleteServiceAccountKeyRequest* DeleteServiceAccountKeyRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteServiceAccountKeyRequest>(arena);
}

void DeleteServiceAccountKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool DeleteServiceAccountKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.DeleteServiceAccountKeyRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  return false;
#undef DO_
}

void DeleteServiceAccountKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.DeleteServiceAccountKeyRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
}

::google::protobuf::uint8* DeleteServiceAccountKeyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.DeleteServiceAccountKeyRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  return target;
}

size_t DeleteServiceAccountKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteServiceAccountKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteServiceAccountKeyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteServiceAccountKeyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
    MergeFrom(*source);
  }
}

void DeleteServiceAccountKeyRequest::MergeFrom(const DeleteServiceAccountKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void DeleteServiceAccountKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteServiceAccountKeyRequest::CopyFrom(const DeleteServiceAccountKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.DeleteServiceAccountKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteServiceAccountKeyRequest::IsInitialized() const {
  return true;
}

void DeleteServiceAccountKeyRequest::Swap(DeleteServiceAccountKeyRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteServiceAccountKeyRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteServiceAccountKeyRequest::UnsafeArenaSwap(DeleteServiceAccountKeyRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteServiceAccountKeyRequest::InternalSwap(DeleteServiceAccountKeyRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteServiceAccountKeyRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignBlobRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignBlobRequest::kNameFieldNumber;
const int SignBlobRequest::kBytesToSignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignBlobRequest::SignBlobRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignBlobRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.SignBlobRequest)
}
SignBlobRequest::SignBlobRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignBlobRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.SignBlobRequest)
}
SignBlobRequest::SignBlobRequest(const SignBlobRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  bytes_to_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.bytes_to_sign().size() > 0) {
    bytes_to_sign_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.bytes_to_sign(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.SignBlobRequest)
}

void SignBlobRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_to_sign_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SignBlobRequest::~SignBlobRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.SignBlobRequest)
  SharedDtor();
}

void SignBlobRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bytes_to_sign_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignBlobRequest::ArenaDtor(void* object) {
  SignBlobRequest* _this = reinterpret_cast< SignBlobRequest* >(object);
  (void)_this;
}
void SignBlobRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SignBlobRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignBlobRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignBlobRequest& SignBlobRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignBlobRequest();
  return *internal_default_instance();
}

SignBlobRequest* SignBlobRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SignBlobRequest>(arena);
}

void SignBlobRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.SignBlobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  bytes_to_sign_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool SignBlobRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.SignBlobRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.SignBlobRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes bytes_to_sign = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes_to_sign()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.SignBlobRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.SignBlobRequest)
  return false;
#undef DO_
}

void SignBlobRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.SignBlobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignBlobRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bytes bytes_to_sign = 2;
  if (this->bytes_to_sign().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->bytes_to_sign(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.SignBlobRequest)
}

::google::protobuf::uint8* SignBlobRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.SignBlobRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignBlobRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // bytes bytes_to_sign = 2;
  if (this->bytes_to_sign().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->bytes_to_sign(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.SignBlobRequest)
  return target;
}

size_t SignBlobRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.SignBlobRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes bytes_to_sign = 2;
  if (this->bytes_to_sign().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->bytes_to_sign());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignBlobRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.SignBlobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignBlobRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignBlobRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.SignBlobRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.SignBlobRequest)
    MergeFrom(*source);
  }
}

void SignBlobRequest::MergeFrom(const SignBlobRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.SignBlobRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.bytes_to_sign().size() > 0) {
    set_bytes_to_sign(from.bytes_to_sign());
  }
}

void SignBlobRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.SignBlobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignBlobRequest::CopyFrom(const SignBlobRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.SignBlobRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignBlobRequest::IsInitialized() const {
  return true;
}

void SignBlobRequest::Swap(SignBlobRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SignBlobRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SignBlobRequest::UnsafeArenaSwap(SignBlobRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SignBlobRequest::InternalSwap(SignBlobRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  bytes_to_sign_.Swap(&other->bytes_to_sign_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignBlobRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignBlobResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignBlobResponse::kKeyIdFieldNumber;
const int SignBlobResponse::kSignatureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignBlobResponse::SignBlobResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignBlobResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.SignBlobResponse)
}
SignBlobResponse::SignBlobResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignBlobResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.SignBlobResponse)
}
SignBlobResponse::SignBlobResponse(const SignBlobResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key_id().size() > 0) {
    key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_id(),
      GetArenaNoVirtual());
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.SignBlobResponse)
}

void SignBlobResponse::SharedCtor() {
  key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SignBlobResponse::~SignBlobResponse() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.SignBlobResponse)
  SharedDtor();
}

void SignBlobResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignBlobResponse::ArenaDtor(void* object) {
  SignBlobResponse* _this = reinterpret_cast< SignBlobResponse* >(object);
  (void)_this;
}
void SignBlobResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SignBlobResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignBlobResponse::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignBlobResponse& SignBlobResponse::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignBlobResponse();
  return *internal_default_instance();
}

SignBlobResponse* SignBlobResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SignBlobResponse>(arena);
}

void SignBlobResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.SignBlobResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  signature_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool SignBlobResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.SignBlobResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key_id().data(), static_cast<int>(this->key_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.SignBlobResponse.key_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes signature = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.SignBlobResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.SignBlobResponse)
  return false;
#undef DO_
}

void SignBlobResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.SignBlobResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_id = 1;
  if (this->key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key_id().data(), static_cast<int>(this->key_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignBlobResponse.key_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_id(), output);
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->signature(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.SignBlobResponse)
}

::google::protobuf::uint8* SignBlobResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.SignBlobResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_id = 1;
  if (this->key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key_id().data(), static_cast<int>(this->key_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignBlobResponse.key_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_id(), target);
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->signature(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.SignBlobResponse)
  return target;
}

size_t SignBlobResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.SignBlobResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key_id = 1;
  if (this->key_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key_id());
  }

  // bytes signature = 2;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignBlobResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.SignBlobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SignBlobResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignBlobResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.SignBlobResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.SignBlobResponse)
    MergeFrom(*source);
  }
}

void SignBlobResponse::MergeFrom(const SignBlobResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.SignBlobResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_id().size() > 0) {
    set_key_id(from.key_id());
  }
  if (from.signature().size() > 0) {
    set_signature(from.signature());
  }
}

void SignBlobResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.SignBlobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignBlobResponse::CopyFrom(const SignBlobResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.SignBlobResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignBlobResponse::IsInitialized() const {
  return true;
}

void SignBlobResponse::Swap(SignBlobResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SignBlobResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SignBlobResponse::UnsafeArenaSwap(SignBlobResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SignBlobResponse::InternalSwap(SignBlobResponse* other) {
  using std::swap;
  key_id_.Swap(&other->key_id_);
  signature_.Swap(&other->signature_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignBlobResponse::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignJwtRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignJwtRequest::kNameFieldNumber;
const int SignJwtRequest::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignJwtRequest::SignJwtRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignJwtRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.SignJwtRequest)
}
SignJwtRequest::SignJwtRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignJwtRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.SignJwtRequest)
}
SignJwtRequest::SignJwtRequest(const SignJwtRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.payload().size() > 0) {
    payload_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.SignJwtRequest)
}

void SignJwtRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SignJwtRequest::~SignJwtRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.SignJwtRequest)
  SharedDtor();
}

void SignJwtRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignJwtRequest::ArenaDtor(void* object) {
  SignJwtRequest* _this = reinterpret_cast< SignJwtRequest* >(object);
  (void)_this;
}
void SignJwtRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SignJwtRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignJwtRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignJwtRequest& SignJwtRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignJwtRequest();
  return *internal_default_instance();
}

SignJwtRequest* SignJwtRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SignJwtRequest>(arena);
}

void SignJwtRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.SignJwtRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  payload_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool SignJwtRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.SignJwtRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.SignJwtRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string payload = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->payload().data(), static_cast<int>(this->payload().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.SignJwtRequest.payload"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.SignJwtRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.SignJwtRequest)
  return false;
#undef DO_
}

void SignJwtRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.SignJwtRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignJwtRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignJwtRequest.payload");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->payload(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.SignJwtRequest)
}

::google::protobuf::uint8* SignJwtRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.SignJwtRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignJwtRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->payload().data(), static_cast<int>(this->payload().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignJwtRequest.payload");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->payload(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.SignJwtRequest)
  return target;
}

size_t SignJwtRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.SignJwtRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string payload = 2;
  if (this->payload().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->payload());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignJwtRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.SignJwtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SignJwtRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignJwtRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.SignJwtRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.SignJwtRequest)
    MergeFrom(*source);
  }
}

void SignJwtRequest::MergeFrom(const SignJwtRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.SignJwtRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.payload().size() > 0) {
    set_payload(from.payload());
  }
}

void SignJwtRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.SignJwtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignJwtRequest::CopyFrom(const SignJwtRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.SignJwtRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignJwtRequest::IsInitialized() const {
  return true;
}

void SignJwtRequest::Swap(SignJwtRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SignJwtRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SignJwtRequest::UnsafeArenaSwap(SignJwtRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SignJwtRequest::InternalSwap(SignJwtRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  payload_.Swap(&other->payload_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignJwtRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignJwtResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignJwtResponse::kKeyIdFieldNumber;
const int SignJwtResponse::kSignedJwtFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignJwtResponse::SignJwtResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignJwtResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.SignJwtResponse)
}
SignJwtResponse::SignJwtResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignJwtResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.SignJwtResponse)
}
SignJwtResponse::SignJwtResponse(const SignJwtResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key_id().size() > 0) {
    key_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_id(),
      GetArenaNoVirtual());
  }
  signed_jwt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signed_jwt().size() > 0) {
    signed_jwt_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signed_jwt(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.SignJwtResponse)
}

void SignJwtResponse::SharedCtor() {
  key_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signed_jwt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SignJwtResponse::~SignJwtResponse() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.SignJwtResponse)
  SharedDtor();
}

void SignJwtResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  key_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signed_jwt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignJwtResponse::ArenaDtor(void* object) {
  SignJwtResponse* _this = reinterpret_cast< SignJwtResponse* >(object);
  (void)_this;
}
void SignJwtResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void SignJwtResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignJwtResponse::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignJwtResponse& SignJwtResponse::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsSignJwtResponse();
  return *internal_default_instance();
}

SignJwtResponse* SignJwtResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<SignJwtResponse>(arena);
}

void SignJwtResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.SignJwtResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  signed_jwt_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool SignJwtResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.SignJwtResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key_id().data(), static_cast<int>(this->key_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.SignJwtResponse.key_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string signed_jwt = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_signed_jwt()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->signed_jwt().data(), static_cast<int>(this->signed_jwt().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.SignJwtResponse.signed_jwt"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.SignJwtResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.SignJwtResponse)
  return false;
#undef DO_
}

void SignJwtResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.SignJwtResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_id = 1;
  if (this->key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key_id().data(), static_cast<int>(this->key_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignJwtResponse.key_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key_id(), output);
  }

  // string signed_jwt = 2;
  if (this->signed_jwt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signed_jwt().data(), static_cast<int>(this->signed_jwt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignJwtResponse.signed_jwt");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->signed_jwt(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.SignJwtResponse)
}

::google::protobuf::uint8* SignJwtResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.SignJwtResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key_id = 1;
  if (this->key_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key_id().data(), static_cast<int>(this->key_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignJwtResponse.key_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key_id(), target);
  }

  // string signed_jwt = 2;
  if (this->signed_jwt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->signed_jwt().data(), static_cast<int>(this->signed_jwt().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.SignJwtResponse.signed_jwt");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->signed_jwt(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.SignJwtResponse)
  return target;
}

size_t SignJwtResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.SignJwtResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key_id = 1;
  if (this->key_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key_id());
  }

  // string signed_jwt = 2;
  if (this->signed_jwt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->signed_jwt());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignJwtResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.SignJwtResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SignJwtResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignJwtResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.SignJwtResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.SignJwtResponse)
    MergeFrom(*source);
  }
}

void SignJwtResponse::MergeFrom(const SignJwtResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.SignJwtResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key_id().size() > 0) {
    set_key_id(from.key_id());
  }
  if (from.signed_jwt().size() > 0) {
    set_signed_jwt(from.signed_jwt());
  }
}

void SignJwtResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.SignJwtResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignJwtResponse::CopyFrom(const SignJwtResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.SignJwtResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignJwtResponse::IsInitialized() const {
  return true;
}

void SignJwtResponse::Swap(SignJwtResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    SignJwtResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void SignJwtResponse::UnsafeArenaSwap(SignJwtResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void SignJwtResponse::InternalSwap(SignJwtResponse* other) {
  using std::swap;
  key_id_.Swap(&other->key_id_);
  signed_jwt_.Swap(&other->signed_jwt_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SignJwtResponse::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Role::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Role::kNameFieldNumber;
const int Role::kTitleFieldNumber;
const int Role::kDescriptionFieldNumber;
const int Role::kIncludedPermissionsFieldNumber;
const int Role::kStageFieldNumber;
const int Role::kEtagFieldNumber;
const int Role::kDeletedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Role::Role()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsRole();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.Role)
}
Role::Role(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  included_permissions_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsRole();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.Role)
}
Role::Role(const Role& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      included_permissions_(from.included_permissions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title(),
      GetArenaNoVirtual());
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description(),
      GetArenaNoVirtual());
  }
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.etag().size() > 0) {
    etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.etag(),
      GetArenaNoVirtual());
  }
  ::memcpy(&stage_, &from.stage_,
    static_cast<size_t>(reinterpret_cast<char*>(&deleted_) -
    reinterpret_cast<char*>(&stage_)) + sizeof(deleted_));
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.Role)
}

void Role::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deleted_) -
      reinterpret_cast<char*>(&stage_)) + sizeof(deleted_));
  _cached_size_ = 0;
}

Role::~Role() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.Role)
  SharedDtor();
}

void Role::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Role::ArenaDtor(void* object) {
  Role* _this = reinterpret_cast< Role* >(object);
  (void)_this;
}
void Role::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Role::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Role::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Role& Role::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsRole();
  return *internal_default_instance();
}

Role* Role::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Role>(arena);
}

void Role::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.Role)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  included_permissions_.Clear();
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  etag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&stage_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deleted_) -
      reinterpret_cast<char*>(&stage_)) + sizeof(deleted_));
  _internal_metadata_.Clear();
}

bool Role::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.Role)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.Role.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.Role.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.Role.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string included_permissions = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_included_permissions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->included_permissions(this->included_permissions_size() - 1).data(),
            static_cast<int>(this->included_permissions(this->included_permissions_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.Role.included_permissions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.admin.v1.Role.RoleLaunchStage stage = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stage(static_cast< ::google::iam::admin::v1::Role_RoleLaunchStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes etag = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_etag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool deleted = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.Role)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.Role)
  return false;
#undef DO_
}

void Role::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.Role)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // repeated string included_permissions = 7;
  for (int i = 0, n = this->included_permissions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->included_permissions(i).data(), static_cast<int>(this->included_permissions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.included_permissions");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->included_permissions(i), output);
  }

  // .google.iam.admin.v1.Role.RoleLaunchStage stage = 8;
  if (this->stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->stage(), output);
  }

  // bytes etag = 9;
  if (this->etag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->etag(), output);
  }

  // bool deleted = 11;
  if (this->deleted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->deleted(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.Role)
}

::google::protobuf::uint8* Role::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.Role)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // repeated string included_permissions = 7;
  for (int i = 0, n = this->included_permissions_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->included_permissions(i).data(), static_cast<int>(this->included_permissions(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Role.included_permissions");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->included_permissions(i), target);
  }

  // .google.iam.admin.v1.Role.RoleLaunchStage stage = 8;
  if (this->stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->stage(), target);
  }

  // bytes etag = 9;
  if (this->etag().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->etag(), target);
  }

  // bool deleted = 11;
  if (this->deleted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->deleted(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.Role)
  return target;
}

size_t Role::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.Role)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string included_permissions = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->included_permissions_size());
  for (int i = 0, n = this->included_permissions_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->included_permissions(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // bytes etag = 9;
  if (this->etag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->etag());
  }

  // .google.iam.admin.v1.Role.RoleLaunchStage stage = 8;
  if (this->stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
  }

  // bool deleted = 11;
  if (this->deleted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Role::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.Role)
  GOOGLE_DCHECK_NE(&from, this);
  const Role* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Role>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.Role)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.Role)
    MergeFrom(*source);
  }
}

void Role::MergeFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.Role)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  included_permissions_.MergeFrom(from.included_permissions_);
  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.title().size() > 0) {
    set_title(from.title());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
  if (from.etag().size() > 0) {
    set_etag(from.etag());
  }
  if (from.stage() != 0) {
    set_stage(from.stage());
  }
  if (from.deleted() != 0) {
    set_deleted(from.deleted());
  }
}

void Role::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Role::CopyFrom(const Role& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.Role)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Role::IsInitialized() const {
  return true;
}

void Role::Swap(Role* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Role* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Role::UnsafeArenaSwap(Role* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Role::InternalSwap(Role* other) {
  using std::swap;
  included_permissions_.InternalSwap(&other->included_permissions_);
  name_.Swap(&other->name_);
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  etag_.Swap(&other->etag_);
  swap(stage_, other->stage_);
  swap(deleted_, other->deleted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Role::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryGrantableRolesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryGrantableRolesRequest::kFullResourceNameFieldNumber;
const int QueryGrantableRolesRequest::kViewFieldNumber;
const int QueryGrantableRolesRequest::kPageSizeFieldNumber;
const int QueryGrantableRolesRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryGrantableRolesRequest::QueryGrantableRolesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryGrantableRolesRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.QueryGrantableRolesRequest)
}
QueryGrantableRolesRequest::QueryGrantableRolesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryGrantableRolesRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.QueryGrantableRolesRequest)
}
QueryGrantableRolesRequest::QueryGrantableRolesRequest(const QueryGrantableRolesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_resource_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.full_resource_name().size() > 0) {
    full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_resource_name(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  ::memcpy(&view_, &from.view_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&view_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.QueryGrantableRolesRequest)
}

void QueryGrantableRolesRequest::SharedCtor() {
  full_resource_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&view_)) + sizeof(page_size_));
  _cached_size_ = 0;
}

QueryGrantableRolesRequest::~QueryGrantableRolesRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.QueryGrantableRolesRequest)
  SharedDtor();
}

void QueryGrantableRolesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  full_resource_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryGrantableRolesRequest::ArenaDtor(void* object) {
  QueryGrantableRolesRequest* _this = reinterpret_cast< QueryGrantableRolesRequest* >(object);
  (void)_this;
}
void QueryGrantableRolesRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void QueryGrantableRolesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGrantableRolesRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryGrantableRolesRequest& QueryGrantableRolesRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryGrantableRolesRequest();
  return *internal_default_instance();
}

QueryGrantableRolesRequest* QueryGrantableRolesRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<QueryGrantableRolesRequest>(arena);
}

void QueryGrantableRolesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_resource_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&view_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&view_)) + sizeof(page_size_));
  _internal_metadata_.Clear();
}

bool QueryGrantableRolesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string full_resource_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_resource_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->full_resource_name().data(), static_cast<int>(this->full_resource_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.admin.v1.RoleView view = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_view(static_cast< ::google::iam::admin::v1::RoleView >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.QueryGrantableRolesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.QueryGrantableRolesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.QueryGrantableRolesRequest)
  return false;
#undef DO_
}

void QueryGrantableRolesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string full_resource_name = 1;
  if (this->full_resource_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_resource_name().data(), static_cast<int>(this->full_resource_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->full_resource_name(), output);
  }

  // .google.iam.admin.v1.RoleView view = 2;
  if (this->view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->view(), output);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->page_size(), output);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryGrantableRolesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.QueryGrantableRolesRequest)
}

::google::protobuf::uint8* QueryGrantableRolesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string full_resource_name = 1;
  if (this->full_resource_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_resource_name().data(), static_cast<int>(this->full_resource_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryGrantableRolesRequest.full_resource_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->full_resource_name(), target);
  }

  // .google.iam.admin.v1.RoleView view = 2;
  if (this->view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->view(), target);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->page_size(), target);
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryGrantableRolesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.QueryGrantableRolesRequest)
  return target;
}

size_t QueryGrantableRolesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string full_resource_name = 1;
  if (this->full_resource_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_resource_name());
  }

  // string page_token = 4;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // .google.iam.admin.v1.RoleView view = 2;
  if (this->view() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->view());
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGrantableRolesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryGrantableRolesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryGrantableRolesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.QueryGrantableRolesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.QueryGrantableRolesRequest)
    MergeFrom(*source);
  }
}

void QueryGrantableRolesRequest::MergeFrom(const QueryGrantableRolesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.full_resource_name().size() > 0) {
    set_full_resource_name(from.full_resource_name());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.view() != 0) {
    set_view(from.view());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void QueryGrantableRolesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGrantableRolesRequest::CopyFrom(const QueryGrantableRolesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.QueryGrantableRolesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGrantableRolesRequest::IsInitialized() const {
  return true;
}

void QueryGrantableRolesRequest::Swap(QueryGrantableRolesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    QueryGrantableRolesRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void QueryGrantableRolesRequest::UnsafeArenaSwap(QueryGrantableRolesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void QueryGrantableRolesRequest::InternalSwap(QueryGrantableRolesRequest* other) {
  using std::swap;
  full_resource_name_.Swap(&other->full_resource_name_);
  page_token_.Swap(&other->page_token_);
  swap(view_, other->view_);
  swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryGrantableRolesRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryGrantableRolesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryGrantableRolesResponse::kRolesFieldNumber;
const int QueryGrantableRolesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryGrantableRolesResponse::QueryGrantableRolesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryGrantableRolesResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.QueryGrantableRolesResponse)
}
QueryGrantableRolesResponse::QueryGrantableRolesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  roles_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryGrantableRolesResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.QueryGrantableRolesResponse)
}
QueryGrantableRolesResponse::QueryGrantableRolesResponse(const QueryGrantableRolesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      roles_(from.roles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.QueryGrantableRolesResponse)
}

void QueryGrantableRolesResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

QueryGrantableRolesResponse::~QueryGrantableRolesResponse() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.QueryGrantableRolesResponse)
  SharedDtor();
}

void QueryGrantableRolesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryGrantableRolesResponse::ArenaDtor(void* object) {
  QueryGrantableRolesResponse* _this = reinterpret_cast< QueryGrantableRolesResponse* >(object);
  (void)_this;
}
void QueryGrantableRolesResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void QueryGrantableRolesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryGrantableRolesResponse::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryGrantableRolesResponse& QueryGrantableRolesResponse::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryGrantableRolesResponse();
  return *internal_default_instance();
}

QueryGrantableRolesResponse* QueryGrantableRolesResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<QueryGrantableRolesResponse>(arena);
}

void QueryGrantableRolesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool QueryGrantableRolesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.iam.admin.v1.Role roles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_roles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.QueryGrantableRolesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.QueryGrantableRolesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.QueryGrantableRolesResponse)
  return false;
#undef DO_
}

void QueryGrantableRolesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.iam.admin.v1.Role roles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roles(static_cast<int>(i)), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryGrantableRolesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.QueryGrantableRolesResponse)
}

::google::protobuf::uint8* QueryGrantableRolesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.iam.admin.v1.Role roles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->roles(static_cast<int>(i)), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryGrantableRolesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.QueryGrantableRolesResponse)
  return target;
}

size_t QueryGrantableRolesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.iam.admin.v1.Role roles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->roles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roles(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryGrantableRolesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryGrantableRolesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryGrantableRolesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.QueryGrantableRolesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.QueryGrantableRolesResponse)
    MergeFrom(*source);
  }
}

void QueryGrantableRolesResponse::MergeFrom(const QueryGrantableRolesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void QueryGrantableRolesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryGrantableRolesResponse::CopyFrom(const QueryGrantableRolesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.QueryGrantableRolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryGrantableRolesResponse::IsInitialized() const {
  return true;
}

void QueryGrantableRolesResponse::Swap(QueryGrantableRolesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    QueryGrantableRolesResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void QueryGrantableRolesResponse::UnsafeArenaSwap(QueryGrantableRolesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void QueryGrantableRolesResponse::InternalSwap(QueryGrantableRolesResponse* other) {
  using std::swap;
  roles_.InternalSwap(&other->roles_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryGrantableRolesResponse::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListRolesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRolesRequest::kParentFieldNumber;
const int ListRolesRequest::kPageSizeFieldNumber;
const int ListRolesRequest::kPageTokenFieldNumber;
const int ListRolesRequest::kViewFieldNumber;
const int ListRolesRequest::kShowDeletedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRolesRequest::ListRolesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListRolesRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ListRolesRequest)
}
ListRolesRequest::ListRolesRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListRolesRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ListRolesRequest)
}
ListRolesRequest::ListRolesRequest(const ListRolesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  ::memcpy(&page_size_, &from.page_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&show_deleted_) -
    reinterpret_cast<char*>(&page_size_)) + sizeof(show_deleted_));
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ListRolesRequest)
}

void ListRolesRequest::SharedCtor() {
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_deleted_) -
      reinterpret_cast<char*>(&page_size_)) + sizeof(show_deleted_));
  _cached_size_ = 0;
}

ListRolesRequest::~ListRolesRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ListRolesRequest)
  SharedDtor();
}

void ListRolesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListRolesRequest::ArenaDtor(void* object) {
  ListRolesRequest* _this = reinterpret_cast< ListRolesRequest* >(object);
  (void)_this;
}
void ListRolesRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListRolesRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRolesRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListRolesRequest& ListRolesRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListRolesRequest();
  return *internal_default_instance();
}

ListRolesRequest* ListRolesRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListRolesRequest>(arena);
}

void ListRolesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ListRolesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&page_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&show_deleted_) -
      reinterpret_cast<char*>(&page_size_)) + sizeof(show_deleted_));
  _internal_metadata_.Clear();
}

bool ListRolesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ListRolesRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ListRolesRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ListRolesRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.admin.v1.RoleView view = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_view(static_cast< ::google::iam::admin::v1::RoleView >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool show_deleted = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &show_deleted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ListRolesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ListRolesRequest)
  return false;
#undef DO_
}

void ListRolesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ListRolesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListRolesRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListRolesRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  // .google.iam.admin.v1.RoleView view = 4;
  if (this->view() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->view(), output);
  }

  // bool show_deleted = 6;
  if (this->show_deleted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->show_deleted(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ListRolesRequest)
}

::google::protobuf::uint8* ListRolesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ListRolesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListRolesRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListRolesRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  // .google.iam.admin.v1.RoleView view = 4;
  if (this->view() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->view(), target);
  }

  // bool show_deleted = 6;
  if (this->show_deleted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->show_deleted(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ListRolesRequest)
  return target;
}

size_t ListRolesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ListRolesRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  // .google.iam.admin.v1.RoleView view = 4;
  if (this->view() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->view());
  }

  // bool show_deleted = 6;
  if (this->show_deleted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRolesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ListRolesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRolesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRolesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ListRolesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ListRolesRequest)
    MergeFrom(*source);
  }
}

void ListRolesRequest::MergeFrom(const ListRolesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ListRolesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {
    set_parent(from.parent());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
  if (from.view() != 0) {
    set_view(from.view());
  }
  if (from.show_deleted() != 0) {
    set_show_deleted(from.show_deleted());
  }
}

void ListRolesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ListRolesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRolesRequest::CopyFrom(const ListRolesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ListRolesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRolesRequest::IsInitialized() const {
  return true;
}

void ListRolesRequest::Swap(ListRolesRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListRolesRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListRolesRequest::UnsafeArenaSwap(ListRolesRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListRolesRequest::InternalSwap(ListRolesRequest* other) {
  using std::swap;
  parent_.Swap(&other->parent_);
  page_token_.Swap(&other->page_token_);
  swap(page_size_, other->page_size_);
  swap(view_, other->view_);
  swap(show_deleted_, other->show_deleted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRolesRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ListRolesResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ListRolesResponse::kRolesFieldNumber;
const int ListRolesResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ListRolesResponse::ListRolesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListRolesResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.ListRolesResponse)
}
ListRolesResponse::ListRolesResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  roles_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListRolesResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.ListRolesResponse)
}
ListRolesResponse::ListRolesResponse(const ListRolesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      roles_(from.roles_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.ListRolesResponse)
}

void ListRolesResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ListRolesResponse::~ListRolesResponse() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.ListRolesResponse)
  SharedDtor();
}

void ListRolesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ListRolesResponse::ArenaDtor(void* object) {
  ListRolesResponse* _this = reinterpret_cast< ListRolesResponse* >(object);
  (void)_this;
}
void ListRolesResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void ListRolesResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ListRolesResponse::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ListRolesResponse& ListRolesResponse::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsListRolesResponse();
  return *internal_default_instance();
}

ListRolesResponse* ListRolesResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<ListRolesResponse>(arena);
}

void ListRolesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.ListRolesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roles_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool ListRolesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.ListRolesResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.iam.admin.v1.Role roles = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_roles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.ListRolesResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.ListRolesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.ListRolesResponse)
  return false;
#undef DO_
}

void ListRolesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.ListRolesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.iam.admin.v1.Role roles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roles(static_cast<int>(i)), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListRolesResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.ListRolesResponse)
}

::google::protobuf::uint8* ListRolesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.ListRolesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.iam.admin.v1.Role roles = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->roles_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->roles(static_cast<int>(i)), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.ListRolesResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.ListRolesResponse)
  return target;
}

size_t ListRolesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.ListRolesResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.iam.admin.v1.Role roles = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->roles_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->roles(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ListRolesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.ListRolesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListRolesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ListRolesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.ListRolesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.ListRolesResponse)
    MergeFrom(*source);
  }
}

void ListRolesResponse::MergeFrom(const ListRolesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.ListRolesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  roles_.MergeFrom(from.roles_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void ListRolesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.ListRolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListRolesResponse::CopyFrom(const ListRolesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.ListRolesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListRolesResponse::IsInitialized() const {
  return true;
}

void ListRolesResponse::Swap(ListRolesResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    ListRolesResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void ListRolesResponse::UnsafeArenaSwap(ListRolesResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void ListRolesResponse::InternalSwap(ListRolesResponse* other) {
  using std::swap;
  roles_.InternalSwap(&other->roles_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ListRolesResponse::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetRoleRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetRoleRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetRoleRequest::GetRoleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsGetRoleRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.GetRoleRequest)
}
GetRoleRequest::GetRoleRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsGetRoleRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.GetRoleRequest)
}
GetRoleRequest::GetRoleRequest(const GetRoleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.GetRoleRequest)
}

void GetRoleRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetRoleRequest::~GetRoleRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.GetRoleRequest)
  SharedDtor();
}

void GetRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetRoleRequest::ArenaDtor(void* object) {
  GetRoleRequest* _this = reinterpret_cast< GetRoleRequest* >(object);
  (void)_this;
}
void GetRoleRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void GetRoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoleRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetRoleRequest& GetRoleRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsGetRoleRequest();
  return *internal_default_instance();
}

GetRoleRequest* GetRoleRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<GetRoleRequest>(arena);
}

void GetRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.GetRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool GetRoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.GetRoleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.GetRoleRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.GetRoleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.GetRoleRequest)
  return false;
#undef DO_
}

void GetRoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.GetRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.GetRoleRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.GetRoleRequest)
}

::google::protobuf::uint8* GetRoleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.GetRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.GetRoleRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.GetRoleRequest)
  return target;
}

size_t GetRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.GetRoleRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.GetRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetRoleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetRoleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.GetRoleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.GetRoleRequest)
    MergeFrom(*source);
  }
}

void GetRoleRequest::MergeFrom(const GetRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.GetRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
}

void GetRoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.GetRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoleRequest::CopyFrom(const GetRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.GetRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoleRequest::IsInitialized() const {
  return true;
}

void GetRoleRequest::Swap(GetRoleRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    GetRoleRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void GetRoleRequest::UnsafeArenaSwap(GetRoleRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void GetRoleRequest::InternalSwap(GetRoleRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetRoleRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CreateRoleRequest::InitAsDefaultInstance() {
  ::google::iam::admin::v1::_CreateRoleRequest_default_instance_._instance.get_mutable()->role_ = const_cast< ::google::iam::admin::v1::Role*>(
      ::google::iam::admin::v1::Role::internal_default_instance());
}
void CreateRoleRequest::_slow_mutable_role() {
  role_ = ::google::protobuf::Arena::CreateMessage< ::google::iam::admin::v1::Role >(
      GetArenaNoVirtual());
}
void CreateRoleRequest::unsafe_arena_set_allocated_role(
    ::google::iam::admin::v1::Role* role) {
  if (GetArenaNoVirtual() == NULL) {
    delete role_;
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.CreateRoleRequest.role)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateRoleRequest::kParentFieldNumber;
const int CreateRoleRequest::kRoleIdFieldNumber;
const int CreateRoleRequest::kRoleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateRoleRequest::CreateRoleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsCreateRoleRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.CreateRoleRequest)
}
CreateRoleRequest::CreateRoleRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsCreateRoleRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.CreateRoleRequest)
}
CreateRoleRequest::CreateRoleRequest(const CreateRoleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.parent().size() > 0) {
    parent_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parent(),
      GetArenaNoVirtual());
  }
  role_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.role_id().size() > 0) {
    role_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.role_id(),
      GetArenaNoVirtual());
  }
  if (from.has_role()) {
    role_ = new ::google::iam::admin::v1::Role(*from.role_);
  } else {
    role_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.CreateRoleRequest)
}

void CreateRoleRequest::SharedCtor() {
  parent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_ = NULL;
  _cached_size_ = 0;
}

CreateRoleRequest::~CreateRoleRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.CreateRoleRequest)
  SharedDtor();
}

void CreateRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  parent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  role_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete role_;
}

void CreateRoleRequest::ArenaDtor(void* object) {
  CreateRoleRequest* _this = reinterpret_cast< CreateRoleRequest* >(object);
  (void)_this;
}
void CreateRoleRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void CreateRoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoleRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateRoleRequest& CreateRoleRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsCreateRoleRequest();
  return *internal_default_instance();
}

CreateRoleRequest* CreateRoleRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<CreateRoleRequest>(arena);
}

void CreateRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.CreateRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  role_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && role_ != NULL) {
    delete role_;
  }
  role_ = NULL;
  _internal_metadata_.Clear();
}

bool CreateRoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.CreateRoleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string parent = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->parent().data(), static_cast<int>(this->parent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.CreateRoleRequest.parent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string role_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_role_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->role_id().data(), static_cast<int>(this->role_id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.CreateRoleRequest.role_id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.admin.v1.Role role = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_role()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.CreateRoleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.CreateRoleRequest)
  return false;
#undef DO_
}

void CreateRoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.CreateRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateRoleRequest.parent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->parent(), output);
  }

  // string role_id = 2;
  if (this->role_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_id().data(), static_cast<int>(this->role_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateRoleRequest.role_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->role_id(), output);
  }

  // .google.iam.admin.v1.Role role = 3;
  if (this->has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->role_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.CreateRoleRequest)
}

::google::protobuf::uint8* CreateRoleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.CreateRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->parent().data(), static_cast<int>(this->parent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateRoleRequest.parent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->parent(), target);
  }

  // string role_id = 2;
  if (this->role_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->role_id().data(), static_cast<int>(this->role_id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.CreateRoleRequest.role_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->role_id(), target);
  }

  // .google.iam.admin.v1.Role role = 3;
  if (this->has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->role_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.CreateRoleRequest)
  return target;
}

size_t CreateRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.CreateRoleRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->parent());
  }

  // string role_id = 2;
  if (this->role_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->role_id());
  }

  // .google.iam.admin.v1.Role role = 3;
  if (this->has_role()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->role_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.CreateRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateRoleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateRoleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.CreateRoleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.CreateRoleRequest)
    MergeFrom(*source);
  }
}

void CreateRoleRequest::MergeFrom(const CreateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.CreateRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {
    set_parent(from.parent());
  }
  if (from.role_id().size() > 0) {
    set_role_id(from.role_id());
  }
  if (from.has_role()) {
    mutable_role()->::google::iam::admin::v1::Role::MergeFrom(from.role());
  }
}

void CreateRoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.CreateRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoleRequest::CopyFrom(const CreateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.CreateRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoleRequest::IsInitialized() const {
  return true;
}

void CreateRoleRequest::Swap(CreateRoleRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    CreateRoleRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void CreateRoleRequest::UnsafeArenaSwap(CreateRoleRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void CreateRoleRequest::InternalSwap(CreateRoleRequest* other) {
  using std::swap;
  parent_.Swap(&other->parent_);
  role_id_.Swap(&other->role_id_);
  swap(role_, other->role_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateRoleRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpdateRoleRequest::InitAsDefaultInstance() {
  ::google::iam::admin::v1::_UpdateRoleRequest_default_instance_._instance.get_mutable()->role_ = const_cast< ::google::iam::admin::v1::Role*>(
      ::google::iam::admin::v1::Role::internal_default_instance());
  ::google::iam::admin::v1::_UpdateRoleRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< ::google::protobuf::FieldMask*>(
      ::google::protobuf::FieldMask::internal_default_instance());
}
void UpdateRoleRequest::_slow_mutable_role() {
  role_ = ::google::protobuf::Arena::CreateMessage< ::google::iam::admin::v1::Role >(
      GetArenaNoVirtual());
}
void UpdateRoleRequest::unsafe_arena_set_allocated_role(
    ::google::iam::admin::v1::Role* role) {
  if (GetArenaNoVirtual() == NULL) {
    delete role_;
  }
  role_ = role;
  if (role) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.UpdateRoleRequest.role)
}
void UpdateRoleRequest::_slow_mutable_update_mask() {
  update_mask_ = ::google::protobuf::Arena::Create< ::google::protobuf::FieldMask >(
      GetArenaNoVirtual());
}
void UpdateRoleRequest::unsafe_arena_set_allocated_update_mask(
    ::google::protobuf::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == NULL) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.iam.admin.v1.UpdateRoleRequest.update_mask)
}
void UpdateRoleRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpdateRoleRequest::kNameFieldNumber;
const int UpdateRoleRequest::kRoleFieldNumber;
const int UpdateRoleRequest::kUpdateMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpdateRoleRequest::UpdateRoleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsUpdateRoleRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.UpdateRoleRequest)
}
UpdateRoleRequest::UpdateRoleRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsUpdateRoleRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.UpdateRoleRequest)
}
UpdateRoleRequest::UpdateRoleRequest(const UpdateRoleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  if (from.has_role()) {
    role_ = new ::google::iam::admin::v1::Role(*from.role_);
  } else {
    role_ = NULL;
  }
  if (from.has_update_mask()) {
    update_mask_ = new ::google::protobuf::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.UpdateRoleRequest)
}

void UpdateRoleRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&role_)) + sizeof(update_mask_));
  _cached_size_ = 0;
}

UpdateRoleRequest::~UpdateRoleRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.UpdateRoleRequest)
  SharedDtor();
}

void UpdateRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete role_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateRoleRequest::ArenaDtor(void* object) {
  UpdateRoleRequest* _this = reinterpret_cast< UpdateRoleRequest* >(object);
  (void)_this;
}
void UpdateRoleRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UpdateRoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRoleRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpdateRoleRequest& UpdateRoleRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsUpdateRoleRequest();
  return *internal_default_instance();
}

UpdateRoleRequest* UpdateRoleRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UpdateRoleRequest>(arena);
}

void UpdateRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.UpdateRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == NULL && role_ != NULL) {
    delete role_;
  }
  role_ = NULL;
  if (GetArenaNoVirtual() == NULL && update_mask_ != NULL) {
    delete update_mask_;
  }
  update_mask_ = NULL;
  _internal_metadata_.Clear();
}

bool UpdateRoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.UpdateRoleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.UpdateRoleRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.admin.v1.Role role = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_role()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.FieldMask update_mask = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_update_mask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.UpdateRoleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.UpdateRoleRequest)
  return false;
#undef DO_
}

void UpdateRoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.UpdateRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.UpdateRoleRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .google.iam.admin.v1.Role role = 2;
  if (this->has_role()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->role_, output);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->update_mask_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.UpdateRoleRequest)
}

::google::protobuf::uint8* UpdateRoleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.UpdateRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.UpdateRoleRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .google.iam.admin.v1.Role role = 2;
  if (this->has_role()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->role_, deterministic, target);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->update_mask_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.UpdateRoleRequest)
  return target;
}

size_t UpdateRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.UpdateRoleRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .google.iam.admin.v1.Role role = 2;
  if (this->has_role()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->role_);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->update_mask_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.UpdateRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateRoleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpdateRoleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.UpdateRoleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.UpdateRoleRequest)
    MergeFrom(*source);
  }
}

void UpdateRoleRequest::MergeFrom(const UpdateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.UpdateRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.has_role()) {
    mutable_role()->::google::iam::admin::v1::Role::MergeFrom(from.role());
  }
  if (from.has_update_mask()) {
    mutable_update_mask()->::google::protobuf::FieldMask::MergeFrom(from.update_mask());
  }
}

void UpdateRoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.UpdateRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRoleRequest::CopyFrom(const UpdateRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.UpdateRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRoleRequest::IsInitialized() const {
  return true;
}

void UpdateRoleRequest::Swap(UpdateRoleRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UpdateRoleRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UpdateRoleRequest::UnsafeArenaSwap(UpdateRoleRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UpdateRoleRequest::InternalSwap(UpdateRoleRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(role_, other->role_);
  swap(update_mask_, other->update_mask_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UpdateRoleRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteRoleRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteRoleRequest::kNameFieldNumber;
const int DeleteRoleRequest::kEtagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteRoleRequest::DeleteRoleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsDeleteRoleRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.DeleteRoleRequest)
}
DeleteRoleRequest::DeleteRoleRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsDeleteRoleRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.DeleteRoleRequest)
}
DeleteRoleRequest::DeleteRoleRequest(const DeleteRoleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.etag().size() > 0) {
    etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.etag(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.DeleteRoleRequest)
}

void DeleteRoleRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteRoleRequest::~DeleteRoleRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.DeleteRoleRequest)
  SharedDtor();
}

void DeleteRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteRoleRequest::ArenaDtor(void* object) {
  DeleteRoleRequest* _this = reinterpret_cast< DeleteRoleRequest* >(object);
  (void)_this;
}
void DeleteRoleRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void DeleteRoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRoleRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteRoleRequest& DeleteRoleRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsDeleteRoleRequest();
  return *internal_default_instance();
}

DeleteRoleRequest* DeleteRoleRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<DeleteRoleRequest>(arena);
}

void DeleteRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.DeleteRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  etag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool DeleteRoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.DeleteRoleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.DeleteRoleRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes etag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_etag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.DeleteRoleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.DeleteRoleRequest)
  return false;
#undef DO_
}

void DeleteRoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.DeleteRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.DeleteRoleRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bytes etag = 2;
  if (this->etag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->etag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.DeleteRoleRequest)
}

::google::protobuf::uint8* DeleteRoleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.DeleteRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.DeleteRoleRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // bytes etag = 2;
  if (this->etag().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->etag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.DeleteRoleRequest)
  return target;
}

size_t DeleteRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.DeleteRoleRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes etag = 2;
  if (this->etag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->etag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.DeleteRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteRoleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteRoleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.DeleteRoleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.DeleteRoleRequest)
    MergeFrom(*source);
  }
}

void DeleteRoleRequest::MergeFrom(const DeleteRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.DeleteRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.etag().size() > 0) {
    set_etag(from.etag());
  }
}

void DeleteRoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.DeleteRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRoleRequest::CopyFrom(const DeleteRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.DeleteRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRoleRequest::IsInitialized() const {
  return true;
}

void DeleteRoleRequest::Swap(DeleteRoleRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    DeleteRoleRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void DeleteRoleRequest::UnsafeArenaSwap(DeleteRoleRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void DeleteRoleRequest::InternalSwap(DeleteRoleRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  etag_.Swap(&other->etag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteRoleRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UndeleteRoleRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UndeleteRoleRequest::kNameFieldNumber;
const int UndeleteRoleRequest::kEtagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UndeleteRoleRequest::UndeleteRoleRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsUndeleteRoleRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.UndeleteRoleRequest)
}
UndeleteRoleRequest::UndeleteRoleRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsUndeleteRoleRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.UndeleteRoleRequest)
}
UndeleteRoleRequest::UndeleteRoleRequest(const UndeleteRoleRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.etag().size() > 0) {
    etag_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.etag(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.UndeleteRoleRequest)
}

void UndeleteRoleRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

UndeleteRoleRequest::~UndeleteRoleRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.UndeleteRoleRequest)
  SharedDtor();
}

void UndeleteRoleRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  etag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UndeleteRoleRequest::ArenaDtor(void* object) {
  UndeleteRoleRequest* _this = reinterpret_cast< UndeleteRoleRequest* >(object);
  (void)_this;
}
void UndeleteRoleRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void UndeleteRoleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UndeleteRoleRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UndeleteRoleRequest& UndeleteRoleRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsUndeleteRoleRequest();
  return *internal_default_instance();
}

UndeleteRoleRequest* UndeleteRoleRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<UndeleteRoleRequest>(arena);
}

void UndeleteRoleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.UndeleteRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  etag_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool UndeleteRoleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.UndeleteRoleRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.UndeleteRoleRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes etag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_etag()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.UndeleteRoleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.UndeleteRoleRequest)
  return false;
#undef DO_
}

void UndeleteRoleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.UndeleteRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.UndeleteRoleRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bytes etag = 2;
  if (this->etag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->etag(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.UndeleteRoleRequest)
}

::google::protobuf::uint8* UndeleteRoleRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.UndeleteRoleRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.UndeleteRoleRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // bytes etag = 2;
  if (this->etag().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->etag(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.UndeleteRoleRequest)
  return target;
}

size_t UndeleteRoleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.UndeleteRoleRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes etag = 2;
  if (this->etag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->etag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UndeleteRoleRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.UndeleteRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UndeleteRoleRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UndeleteRoleRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.UndeleteRoleRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.UndeleteRoleRequest)
    MergeFrom(*source);
  }
}

void UndeleteRoleRequest::MergeFrom(const UndeleteRoleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.UndeleteRoleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.etag().size() > 0) {
    set_etag(from.etag());
  }
}

void UndeleteRoleRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.UndeleteRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UndeleteRoleRequest::CopyFrom(const UndeleteRoleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.UndeleteRoleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UndeleteRoleRequest::IsInitialized() const {
  return true;
}

void UndeleteRoleRequest::Swap(UndeleteRoleRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    UndeleteRoleRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void UndeleteRoleRequest::UnsafeArenaSwap(UndeleteRoleRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void UndeleteRoleRequest::InternalSwap(UndeleteRoleRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  etag_.Swap(&other->etag_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UndeleteRoleRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Permission::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Permission::kNameFieldNumber;
const int Permission::kTitleFieldNumber;
const int Permission::kDescriptionFieldNumber;
const int Permission::kOnlyInPredefinedRolesFieldNumber;
const int Permission::kStageFieldNumber;
const int Permission::kCustomRolesSupportLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Permission::Permission()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsPermission();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.Permission)
}
Permission::Permission(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsPermission();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.Permission)
}
Permission::Permission(const Permission& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name(),
      GetArenaNoVirtual());
  }
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title(),
      GetArenaNoVirtual());
  }
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.description().size() > 0) {
    description_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description(),
      GetArenaNoVirtual());
  }
  ::memcpy(&only_in_predefined_roles_, &from.only_in_predefined_roles_,
    static_cast<size_t>(reinterpret_cast<char*>(&custom_roles_support_level_) -
    reinterpret_cast<char*>(&only_in_predefined_roles_)) + sizeof(custom_roles_support_level_));
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.Permission)
}

void Permission::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&only_in_predefined_roles_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_roles_support_level_) -
      reinterpret_cast<char*>(&only_in_predefined_roles_)) + sizeof(custom_roles_support_level_));
  _cached_size_ = 0;
}

Permission::~Permission() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.Permission)
  SharedDtor();
}

void Permission::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Permission::ArenaDtor(void* object) {
  Permission* _this = reinterpret_cast< Permission* >(object);
  (void)_this;
}
void Permission::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void Permission::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Permission::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Permission& Permission::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsPermission();
  return *internal_default_instance();
}

Permission* Permission::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<Permission>(arena);
}

void Permission::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.Permission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  title_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&only_in_predefined_roles_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&custom_roles_support_level_) -
      reinterpret_cast<char*>(&only_in_predefined_roles_)) + sizeof(custom_roles_support_level_));
  _internal_metadata_.Clear();
}

bool Permission::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.Permission)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.Permission.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), static_cast<int>(this->title().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.Permission.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string description = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), static_cast<int>(this->description().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.Permission.description"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool only_in_predefined_roles = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_in_predefined_roles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.admin.v1.Permission.PermissionLaunchStage stage = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_stage(static_cast< ::google::iam::admin::v1::Permission_PermissionLaunchStage >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.iam.admin.v1.Permission.CustomRolesSupportLevel custom_roles_support_level = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_custom_roles_support_level(static_cast< ::google::iam::admin::v1::Permission_CustomRolesSupportLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.Permission)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.Permission)
  return false;
#undef DO_
}

void Permission::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.Permission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Permission.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Permission.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Permission.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  // bool only_in_predefined_roles = 4;
  if (this->only_in_predefined_roles() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->only_in_predefined_roles(), output);
  }

  // .google.iam.admin.v1.Permission.PermissionLaunchStage stage = 5;
  if (this->stage() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->stage(), output);
  }

  // .google.iam.admin.v1.Permission.CustomRolesSupportLevel custom_roles_support_level = 6;
  if (this->custom_roles_support_level() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->custom_roles_support_level(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.Permission)
}

::google::protobuf::uint8* Permission::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.Permission)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Permission.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), static_cast<int>(this->title().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Permission.title");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), static_cast<int>(this->description().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.Permission.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  // bool only_in_predefined_roles = 4;
  if (this->only_in_predefined_roles() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->only_in_predefined_roles(), target);
  }

  // .google.iam.admin.v1.Permission.PermissionLaunchStage stage = 5;
  if (this->stage() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->stage(), target);
  }

  // .google.iam.admin.v1.Permission.CustomRolesSupportLevel custom_roles_support_level = 6;
  if (this->custom_roles_support_level() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->custom_roles_support_level(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.Permission)
  return target;
}

size_t Permission::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.Permission)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // bool only_in_predefined_roles = 4;
  if (this->only_in_predefined_roles() != 0) {
    total_size += 1 + 1;
  }

  // .google.iam.admin.v1.Permission.PermissionLaunchStage stage = 5;
  if (this->stage() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stage());
  }

  // .google.iam.admin.v1.Permission.CustomRolesSupportLevel custom_roles_support_level = 6;
  if (this->custom_roles_support_level() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->custom_roles_support_level());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Permission::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.Permission)
  GOOGLE_DCHECK_NE(&from, this);
  const Permission* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Permission>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.Permission)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.Permission)
    MergeFrom(*source);
  }
}

void Permission::MergeFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.Permission)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    set_name(from.name());
  }
  if (from.title().size() > 0) {
    set_title(from.title());
  }
  if (from.description().size() > 0) {
    set_description(from.description());
  }
  if (from.only_in_predefined_roles() != 0) {
    set_only_in_predefined_roles(from.only_in_predefined_roles());
  }
  if (from.stage() != 0) {
    set_stage(from.stage());
  }
  if (from.custom_roles_support_level() != 0) {
    set_custom_roles_support_level(from.custom_roles_support_level());
  }
}

void Permission::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Permission::CopyFrom(const Permission& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.Permission)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Permission::IsInitialized() const {
  return true;
}

void Permission::Swap(Permission* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    Permission* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void Permission::UnsafeArenaSwap(Permission* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void Permission::InternalSwap(Permission* other) {
  using std::swap;
  name_.Swap(&other->name_);
  title_.Swap(&other->title_);
  description_.Swap(&other->description_);
  swap(only_in_predefined_roles_, other->only_in_predefined_roles_);
  swap(stage_, other->stage_);
  swap(custom_roles_support_level_, other->custom_roles_support_level_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Permission::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryTestablePermissionsRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryTestablePermissionsRequest::kFullResourceNameFieldNumber;
const int QueryTestablePermissionsRequest::kPageSizeFieldNumber;
const int QueryTestablePermissionsRequest::kPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryTestablePermissionsRequest::QueryTestablePermissionsRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryTestablePermissionsRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.QueryTestablePermissionsRequest)
}
QueryTestablePermissionsRequest::QueryTestablePermissionsRequest(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryTestablePermissionsRequest();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.QueryTestablePermissionsRequest)
}
QueryTestablePermissionsRequest::QueryTestablePermissionsRequest(const QueryTestablePermissionsRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  full_resource_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.full_resource_name().size() > 0) {
    full_resource_name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.full_resource_name(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.page_token().size() > 0) {
    page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.QueryTestablePermissionsRequest)
}

void QueryTestablePermissionsRequest::SharedCtor() {
  full_resource_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
  _cached_size_ = 0;
}

QueryTestablePermissionsRequest::~QueryTestablePermissionsRequest() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.QueryTestablePermissionsRequest)
  SharedDtor();
}

void QueryTestablePermissionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  full_resource_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryTestablePermissionsRequest::ArenaDtor(void* object) {
  QueryTestablePermissionsRequest* _this = reinterpret_cast< QueryTestablePermissionsRequest* >(object);
  (void)_this;
}
void QueryTestablePermissionsRequest::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void QueryTestablePermissionsRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryTestablePermissionsRequest::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryTestablePermissionsRequest& QueryTestablePermissionsRequest::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryTestablePermissionsRequest();
  return *internal_default_instance();
}

QueryTestablePermissionsRequest* QueryTestablePermissionsRequest::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<QueryTestablePermissionsRequest>(arena);
}

void QueryTestablePermissionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.QueryTestablePermissionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  full_resource_name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

bool QueryTestablePermissionsRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.QueryTestablePermissionsRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string full_resource_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_full_resource_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->full_resource_name().data(), static_cast<int>(this->full_resource_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.QueryTestablePermissionsRequest.full_resource_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 page_size = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string page_token = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->page_token().data(), static_cast<int>(this->page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.QueryTestablePermissionsRequest.page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.QueryTestablePermissionsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.QueryTestablePermissionsRequest)
  return false;
#undef DO_
}

void QueryTestablePermissionsRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.QueryTestablePermissionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string full_resource_name = 1;
  if (this->full_resource_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_resource_name().data(), static_cast<int>(this->full_resource_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryTestablePermissionsRequest.full_resource_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->full_resource_name(), output);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page_size(), output);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryTestablePermissionsRequest.page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.QueryTestablePermissionsRequest)
}

::google::protobuf::uint8* QueryTestablePermissionsRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.QueryTestablePermissionsRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string full_resource_name = 1;
  if (this->full_resource_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->full_resource_name().data(), static_cast<int>(this->full_resource_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryTestablePermissionsRequest.full_resource_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->full_resource_name(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->page_token().data(), static_cast<int>(this->page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryTestablePermissionsRequest.page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.QueryTestablePermissionsRequest)
  return target;
}

size_t QueryTestablePermissionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.QueryTestablePermissionsRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string full_resource_name = 1;
  if (this->full_resource_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->full_resource_name());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->page_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryTestablePermissionsRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.QueryTestablePermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryTestablePermissionsRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryTestablePermissionsRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.QueryTestablePermissionsRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.QueryTestablePermissionsRequest)
    MergeFrom(*source);
  }
}

void QueryTestablePermissionsRequest::MergeFrom(const QueryTestablePermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.QueryTestablePermissionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.full_resource_name().size() > 0) {
    set_full_resource_name(from.full_resource_name());
  }
  if (from.page_token().size() > 0) {
    set_page_token(from.page_token());
  }
  if (from.page_size() != 0) {
    set_page_size(from.page_size());
  }
}

void QueryTestablePermissionsRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.QueryTestablePermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryTestablePermissionsRequest::CopyFrom(const QueryTestablePermissionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.QueryTestablePermissionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTestablePermissionsRequest::IsInitialized() const {
  return true;
}

void QueryTestablePermissionsRequest::Swap(QueryTestablePermissionsRequest* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    QueryTestablePermissionsRequest* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void QueryTestablePermissionsRequest::UnsafeArenaSwap(QueryTestablePermissionsRequest* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void QueryTestablePermissionsRequest::InternalSwap(QueryTestablePermissionsRequest* other) {
  using std::swap;
  full_resource_name_.Swap(&other->full_resource_name_);
  page_token_.Swap(&other->page_token_);
  swap(page_size_, other->page_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryTestablePermissionsRequest::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void QueryTestablePermissionsResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QueryTestablePermissionsResponse::kPermissionsFieldNumber;
const int QueryTestablePermissionsResponse::kNextPageTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QueryTestablePermissionsResponse::QueryTestablePermissionsResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryTestablePermissionsResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.iam.admin.v1.QueryTestablePermissionsResponse)
}
QueryTestablePermissionsResponse::QueryTestablePermissionsResponse(::google::protobuf::Arena* arena)
  : ::google::protobuf::Message(),
  _internal_metadata_(arena),
  permissions_(arena) {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryTestablePermissionsResponse();
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.iam.admin.v1.QueryTestablePermissionsResponse)
}
QueryTestablePermissionsResponse::QueryTestablePermissionsResponse(const QueryTestablePermissionsResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      permissions_(from.permissions_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.next_page_token().size() > 0) {
    next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.iam.admin.v1.QueryTestablePermissionsResponse)
}

void QueryTestablePermissionsResponse::SharedCtor() {
  next_page_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

QueryTestablePermissionsResponse::~QueryTestablePermissionsResponse() {
  // @@protoc_insertion_point(destructor:google.iam.admin.v1.QueryTestablePermissionsResponse)
  SharedDtor();
}

void QueryTestablePermissionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == NULL);
  next_page_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void QueryTestablePermissionsResponse::ArenaDtor(void* object) {
  QueryTestablePermissionsResponse* _this = reinterpret_cast< QueryTestablePermissionsResponse* >(object);
  (void)_this;
}
void QueryTestablePermissionsResponse::RegisterArenaDtor(::google::protobuf::Arena* arena) {
}
void QueryTestablePermissionsResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryTestablePermissionsResponse::descriptor() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const QueryTestablePermissionsResponse& QueryTestablePermissionsResponse::default_instance() {
  ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::InitDefaultsQueryTestablePermissionsResponse();
  return *internal_default_instance();
}

QueryTestablePermissionsResponse* QueryTestablePermissionsResponse::New(::google::protobuf::Arena* arena) const {
  return ::google::protobuf::Arena::CreateMessage<QueryTestablePermissionsResponse>(arena);
}

void QueryTestablePermissionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.iam.admin.v1.QueryTestablePermissionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_.Clear();
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

bool QueryTestablePermissionsResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.iam.admin.v1.QueryTestablePermissionsResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.iam.admin.v1.Permission permissions = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_permissions()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string next_page_token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_next_page_token()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.iam.admin.v1.QueryTestablePermissionsResponse.next_page_token"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.iam.admin.v1.QueryTestablePermissionsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.iam.admin.v1.QueryTestablePermissionsResponse)
  return false;
#undef DO_
}

void QueryTestablePermissionsResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.iam.admin.v1.QueryTestablePermissionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.iam.admin.v1.Permission permissions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->permissions_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->permissions(static_cast<int>(i)), output);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryTestablePermissionsResponse.next_page_token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->next_page_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.iam.admin.v1.QueryTestablePermissionsResponse)
}

::google::protobuf::uint8* QueryTestablePermissionsResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.iam.admin.v1.QueryTestablePermissionsResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.iam.admin.v1.Permission permissions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->permissions_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->permissions(static_cast<int>(i)), deterministic, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->next_page_token().data(), static_cast<int>(this->next_page_token().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.iam.admin.v1.QueryTestablePermissionsResponse.next_page_token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->next_page_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.iam.admin.v1.QueryTestablePermissionsResponse)
  return target;
}

size_t QueryTestablePermissionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.iam.admin.v1.QueryTestablePermissionsResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.iam.admin.v1.Permission permissions = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->permissions_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->permissions(static_cast<int>(i)));
    }
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->next_page_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryTestablePermissionsResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.iam.admin.v1.QueryTestablePermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const QueryTestablePermissionsResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const QueryTestablePermissionsResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.iam.admin.v1.QueryTestablePermissionsResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.iam.admin.v1.QueryTestablePermissionsResponse)
    MergeFrom(*source);
  }
}

void QueryTestablePermissionsResponse::MergeFrom(const QueryTestablePermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.iam.admin.v1.QueryTestablePermissionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_.MergeFrom(from.permissions_);
  if (from.next_page_token().size() > 0) {
    set_next_page_token(from.next_page_token());
  }
}

void QueryTestablePermissionsResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.iam.admin.v1.QueryTestablePermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryTestablePermissionsResponse::CopyFrom(const QueryTestablePermissionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.iam.admin.v1.QueryTestablePermissionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryTestablePermissionsResponse::IsInitialized() const {
  return true;
}

void QueryTestablePermissionsResponse::Swap(QueryTestablePermissionsResponse* other) {
  if (other == this) return;
  if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
    InternalSwap(other);
  } else {
    QueryTestablePermissionsResponse* temp = New(GetArenaNoVirtual());
    temp->MergeFrom(*other);
    other->CopyFrom(*this);
    InternalSwap(temp);
    if (GetArenaNoVirtual() == NULL) {
      delete temp;
    }
  }
}
void QueryTestablePermissionsResponse::UnsafeArenaSwap(QueryTestablePermissionsResponse* other) {
  if (other == this) return;
  GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
  InternalSwap(other);
}
void QueryTestablePermissionsResponse::InternalSwap(QueryTestablePermissionsResponse* other) {
  using std::swap;
  permissions_.InternalSwap(&other->permissions_);
  next_page_token_.Swap(&other->next_page_token_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata QueryTestablePermissionsResponse::GetMetadata() const {
  protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fiam_2fadmin_2fv1_2fiam_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace admin
}  // namespace iam
}  // namespace google

// @@protoc_insertion_point(global_scope)
