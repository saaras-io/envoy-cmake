// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/type/http_request.proto

#include "google/logging/type/http_request.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace logging {
namespace type {
class HttpRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<HttpRequest>
      _instance;
} _HttpRequest_default_instance_;
}  // namespace type
}  // namespace logging
}  // namespace google
namespace protobuf_google_2flogging_2ftype_2fhttp_5frequest_2eproto {
void InitDefaultsHttpRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2fduration_2eproto::InitDefaultsDuration();
  {
    void* ptr = &::google::logging::type::_HttpRequest_default_instance_;
    new (ptr) ::google::logging::type::HttpRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::type::HttpRequest::InitAsDefaultInstance();
}

void InitDefaultsHttpRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsHttpRequestImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, request_method_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, request_url_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, request_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, response_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, user_agent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, remote_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, server_ip_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, referer_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, latency_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, cache_lookup_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, cache_hit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, cache_validated_with_origin_server_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, cache_fill_bytes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::logging::type::HttpRequest, protocol_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::logging::type::HttpRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::logging::type::_HttpRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/logging/type/http_request.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n&google/logging/type/http_request.proto"
      "\022\023google.logging.type\032\034google/api/annota"
      "tions.proto\032\036google/protobuf/duration.pr"
      "oto\"\357\002\n\013HttpRequest\022\026\n\016request_method\030\001 "
      "\001(\t\022\023\n\013request_url\030\002 \001(\t\022\024\n\014request_size"
      "\030\003 \001(\003\022\016\n\006status\030\004 \001(\005\022\025\n\rresponse_size\030"
      "\005 \001(\003\022\022\n\nuser_agent\030\006 \001(\t\022\021\n\tremote_ip\030\007"
      " \001(\t\022\021\n\tserver_ip\030\r \001(\t\022\017\n\007referer\030\010 \001(\t"
      "\022*\n\007latency\030\016 \001(\0132\031.google.protobuf.Dura"
      "tion\022\024\n\014cache_lookup\030\013 \001(\010\022\021\n\tcache_hit\030"
      "\t \001(\010\022*\n\"cache_validated_with_origin_ser"
      "ver\030\n \001(\010\022\030\n\020cache_fill_bytes\030\014 \001(\003\022\020\n\010p"
      "rotocol\030\017 \001(\tB\203\001\n\027com.google.logging.typ"
      "eB\020HttpRequestProtoP\001Z8google.golang.org"
      "/genproto/googleapis/logging/type;ltype\252"
      "\002\031Google.Cloud.Logging.Typeb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 635);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/logging/type/http_request.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fduration_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2flogging_2ftype_2fhttp_5frequest_2eproto
namespace google {
namespace logging {
namespace type {

// ===================================================================

void HttpRequest::InitAsDefaultInstance() {
  ::google::logging::type::_HttpRequest_default_instance_._instance.get_mutable()->latency_ = const_cast< ::google::protobuf::Duration*>(
      ::google::protobuf::Duration::internal_default_instance());
}
void HttpRequest::clear_latency() {
  if (GetArenaNoVirtual() == NULL && latency_ != NULL) {
    delete latency_;
  }
  latency_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HttpRequest::kRequestMethodFieldNumber;
const int HttpRequest::kRequestUrlFieldNumber;
const int HttpRequest::kRequestSizeFieldNumber;
const int HttpRequest::kStatusFieldNumber;
const int HttpRequest::kResponseSizeFieldNumber;
const int HttpRequest::kUserAgentFieldNumber;
const int HttpRequest::kRemoteIpFieldNumber;
const int HttpRequest::kServerIpFieldNumber;
const int HttpRequest::kRefererFieldNumber;
const int HttpRequest::kLatencyFieldNumber;
const int HttpRequest::kCacheLookupFieldNumber;
const int HttpRequest::kCacheHitFieldNumber;
const int HttpRequest::kCacheValidatedWithOriginServerFieldNumber;
const int HttpRequest::kCacheFillBytesFieldNumber;
const int HttpRequest::kProtocolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HttpRequest::HttpRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2flogging_2ftype_2fhttp_5frequest_2eproto::InitDefaultsHttpRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.type.HttpRequest)
}
HttpRequest::HttpRequest(const HttpRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_method().size() > 0) {
    request_method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_method_);
  }
  request_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.request_url().size() > 0) {
    request_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_url_);
  }
  user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.user_agent().size() > 0) {
    user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
  }
  remote_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.remote_ip().size() > 0) {
    remote_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_ip_);
  }
  referer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.referer().size() > 0) {
    referer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referer_);
  }
  server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.server_ip().size() > 0) {
    server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.protocol().size() > 0) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.has_latency()) {
    latency_ = new ::google::protobuf::Duration(*from.latency_);
  } else {
    latency_ = NULL;
  }
  ::memcpy(&request_size_, &from.request_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&cache_fill_bytes_) -
    reinterpret_cast<char*>(&request_size_)) + sizeof(cache_fill_bytes_));
  // @@protoc_insertion_point(copy_constructor:google.logging.type.HttpRequest)
}

void HttpRequest::SharedCtor() {
  request_method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_url_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&latency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_fill_bytes_) -
      reinterpret_cast<char*>(&latency_)) + sizeof(cache_fill_bytes_));
  _cached_size_ = 0;
}

HttpRequest::~HttpRequest() {
  // @@protoc_insertion_point(destructor:google.logging.type.HttpRequest)
  SharedDtor();
}

void HttpRequest::SharedDtor() {
  request_method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_url_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete latency_;
}

void HttpRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HttpRequest::descriptor() {
  ::protobuf_google_2flogging_2ftype_2fhttp_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2flogging_2ftype_2fhttp_5frequest_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const HttpRequest& HttpRequest::default_instance() {
  ::protobuf_google_2flogging_2ftype_2fhttp_5frequest_2eproto::InitDefaultsHttpRequest();
  return *internal_default_instance();
}

HttpRequest* HttpRequest::New(::google::protobuf::Arena* arena) const {
  HttpRequest* n = new HttpRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.type.HttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_agent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remote_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  referer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  server_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && latency_ != NULL) {
    delete latency_;
  }
  latency_ = NULL;
  ::memset(&request_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_fill_bytes_) -
      reinterpret_cast<char*>(&request_size_)) + sizeof(cache_fill_bytes_));
  _internal_metadata_.Clear();
}

bool HttpRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.logging.type.HttpRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string request_method = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_method()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_method().data(), static_cast<int>(this->request_method().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.type.HttpRequest.request_method"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string request_url = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_url()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_url().data(), static_cast<int>(this->request_url().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.type.HttpRequest.request_url"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 request_size = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &request_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 response_size = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &response_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string user_agent = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user_agent()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->user_agent().data(), static_cast<int>(this->user_agent().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.type.HttpRequest.user_agent"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string remote_ip = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_remote_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->remote_ip().data(), static_cast<int>(this->remote_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.type.HttpRequest.remote_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string referer = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_referer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->referer().data(), static_cast<int>(this->referer().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.type.HttpRequest.referer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cache_hit = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_hit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cache_validated_with_origin_server = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_validated_with_origin_server_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cache_lookup = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u /* 88 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cache_lookup_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 cache_fill_bytes = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cache_fill_bytes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string server_ip = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_server_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->server_ip().data(), static_cast<int>(this->server_ip().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.type.HttpRequest.server_ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Duration latency = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_latency()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string protocol = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->protocol().data(), static_cast<int>(this->protocol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.logging.type.HttpRequest.protocol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.logging.type.HttpRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.logging.type.HttpRequest)
  return false;
#undef DO_
}

void HttpRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.logging.type.HttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_method = 1;
  if (this->request_method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_method().data(), static_cast<int>(this->request_method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.request_method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->request_method(), output);
  }

  // string request_url = 2;
  if (this->request_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_url().data(), static_cast<int>(this->request_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.request_url");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_url(), output);
  }

  // int64 request_size = 3;
  if (this->request_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->request_size(), output);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status(), output);
  }

  // int64 response_size = 5;
  if (this->response_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->response_size(), output);
  }

  // string user_agent = 6;
  if (this->user_agent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_agent().data(), static_cast<int>(this->user_agent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.user_agent");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->user_agent(), output);
  }

  // string remote_ip = 7;
  if (this->remote_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_ip().data(), static_cast<int>(this->remote_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.remote_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->remote_ip(), output);
  }

  // string referer = 8;
  if (this->referer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referer().data(), static_cast<int>(this->referer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.referer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->referer(), output);
  }

  // bool cache_hit = 9;
  if (this->cache_hit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->cache_hit(), output);
  }

  // bool cache_validated_with_origin_server = 10;
  if (this->cache_validated_with_origin_server() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->cache_validated_with_origin_server(), output);
  }

  // bool cache_lookup = 11;
  if (this->cache_lookup() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->cache_lookup(), output);
  }

  // int64 cache_fill_bytes = 12;
  if (this->cache_fill_bytes() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->cache_fill_bytes(), output);
  }

  // string server_ip = 13;
  if (this->server_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_ip().data(), static_cast<int>(this->server_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.server_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->server_ip(), output);
  }

  // .google.protobuf.Duration latency = 14;
  if (this->has_latency()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->latency_, output);
  }

  // string protocol = 15;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->protocol(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.logging.type.HttpRequest)
}

::google::protobuf::uint8* HttpRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.type.HttpRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_method = 1;
  if (this->request_method().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_method().data(), static_cast<int>(this->request_method().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.request_method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_method(), target);
  }

  // string request_url = 2;
  if (this->request_url().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_url().data(), static_cast<int>(this->request_url().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.request_url");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_url(), target);
  }

  // int64 request_size = 3;
  if (this->request_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->request_size(), target);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->status(), target);
  }

  // int64 response_size = 5;
  if (this->response_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->response_size(), target);
  }

  // string user_agent = 6;
  if (this->user_agent().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->user_agent().data(), static_cast<int>(this->user_agent().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.user_agent");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->user_agent(), target);
  }

  // string remote_ip = 7;
  if (this->remote_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->remote_ip().data(), static_cast<int>(this->remote_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.remote_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->remote_ip(), target);
  }

  // string referer = 8;
  if (this->referer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->referer().data(), static_cast<int>(this->referer().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.referer");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->referer(), target);
  }

  // bool cache_hit = 9;
  if (this->cache_hit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->cache_hit(), target);
  }

  // bool cache_validated_with_origin_server = 10;
  if (this->cache_validated_with_origin_server() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->cache_validated_with_origin_server(), target);
  }

  // bool cache_lookup = 11;
  if (this->cache_lookup() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->cache_lookup(), target);
  }

  // int64 cache_fill_bytes = 12;
  if (this->cache_fill_bytes() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->cache_fill_bytes(), target);
  }

  // string server_ip = 13;
  if (this->server_ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->server_ip().data(), static_cast<int>(this->server_ip().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.server_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->server_ip(), target);
  }

  // .google.protobuf.Duration latency = 14;
  if (this->has_latency()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, *this->latency_, deterministic, target);
  }

  // string protocol = 15;
  if (this->protocol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->protocol().data(), static_cast<int>(this->protocol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->protocol(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.type.HttpRequest)
  return target;
}

size_t HttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.type.HttpRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string request_method = 1;
  if (this->request_method().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_method());
  }

  // string request_url = 2;
  if (this->request_url().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_url());
  }

  // string user_agent = 6;
  if (this->user_agent().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->user_agent());
  }

  // string remote_ip = 7;
  if (this->remote_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->remote_ip());
  }

  // string referer = 8;
  if (this->referer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->referer());
  }

  // string server_ip = 13;
  if (this->server_ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->server_ip());
  }

  // string protocol = 15;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->protocol());
  }

  // .google.protobuf.Duration latency = 14;
  if (this->has_latency()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->latency_);
  }

  // int64 request_size = 3;
  if (this->request_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->request_size());
  }

  // int64 response_size = 5;
  if (this->response_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->response_size());
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // bool cache_lookup = 11;
  if (this->cache_lookup() != 0) {
    total_size += 1 + 1;
  }

  // bool cache_hit = 9;
  if (this->cache_hit() != 0) {
    total_size += 1 + 1;
  }

  // bool cache_validated_with_origin_server = 10;
  if (this->cache_validated_with_origin_server() != 0) {
    total_size += 1 + 1;
  }

  // int64 cache_fill_bytes = 12;
  if (this->cache_fill_bytes() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->cache_fill_bytes());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HttpRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.type.HttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HttpRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.type.HttpRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.type.HttpRequest)
    MergeFrom(*source);
  }
}

void HttpRequest::MergeFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.type.HttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_method().size() > 0) {

    request_method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_method_);
  }
  if (from.request_url().size() > 0) {

    request_url_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_url_);
  }
  if (from.user_agent().size() > 0) {

    user_agent_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
  }
  if (from.remote_ip().size() > 0) {

    remote_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.remote_ip_);
  }
  if (from.referer().size() > 0) {

    referer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.referer_);
  }
  if (from.server_ip().size() > 0) {

    server_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.has_latency()) {
    mutable_latency()->::google::protobuf::Duration::MergeFrom(from.latency());
  }
  if (from.request_size() != 0) {
    set_request_size(from.request_size());
  }
  if (from.response_size() != 0) {
    set_response_size(from.response_size());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.cache_lookup() != 0) {
    set_cache_lookup(from.cache_lookup());
  }
  if (from.cache_hit() != 0) {
    set_cache_hit(from.cache_hit());
  }
  if (from.cache_validated_with_origin_server() != 0) {
    set_cache_validated_with_origin_server(from.cache_validated_with_origin_server());
  }
  if (from.cache_fill_bytes() != 0) {
    set_cache_fill_bytes(from.cache_fill_bytes());
  }
}

void HttpRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.type.HttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpRequest::CopyFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.type.HttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRequest::IsInitialized() const {
  return true;
}

void HttpRequest::Swap(HttpRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HttpRequest::InternalSwap(HttpRequest* other) {
  using std::swap;
  request_method_.Swap(&other->request_method_);
  request_url_.Swap(&other->request_url_);
  user_agent_.Swap(&other->user_agent_);
  remote_ip_.Swap(&other->remote_ip_);
  referer_.Swap(&other->referer_);
  server_ip_.Swap(&other->server_ip_);
  protocol_.Swap(&other->protocol_);
  swap(latency_, other->latency_);
  swap(request_size_, other->request_size_);
  swap(response_size_, other->response_size_);
  swap(status_, other->status_);
  swap(cache_lookup_, other->cache_lookup_);
  swap(cache_hit_, other->cache_hit_);
  swap(cache_validated_with_origin_server_, other->cache_validated_with_origin_server_);
  swap(cache_fill_bytes_, other->cache_fill_bytes_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HttpRequest::GetMetadata() const {
  protobuf_google_2flogging_2ftype_2fhttp_5frequest_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2flogging_2ftype_2fhttp_5frequest_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace logging
}  // namespace google

// @@protoc_insertion_point(global_scope)
