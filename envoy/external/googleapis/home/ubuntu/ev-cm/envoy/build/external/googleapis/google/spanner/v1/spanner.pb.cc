// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/spanner/v1/spanner.proto

#include "google/spanner/v1/spanner.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace google {
namespace spanner {
namespace v1 {
class CreateSessionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CreateSessionRequest>
      _instance;
} _CreateSessionRequest_default_instance_;
class SessionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Session>
      _instance;
} _Session_default_instance_;
class GetSessionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSessionRequest>
      _instance;
} _GetSessionRequest_default_instance_;
class DeleteSessionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeleteSessionRequest>
      _instance;
} _DeleteSessionRequest_default_instance_;
class ExecuteSqlRequest_ParamTypesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteSqlRequest_ParamTypesEntry_DoNotUse>
      _instance;
} _ExecuteSqlRequest_ParamTypesEntry_DoNotUse_default_instance_;
class ExecuteSqlRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExecuteSqlRequest>
      _instance;
} _ExecuteSqlRequest_default_instance_;
class ReadRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReadRequest>
      _instance;
} _ReadRequest_default_instance_;
class BeginTransactionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeginTransactionRequest>
      _instance;
} _BeginTransactionRequest_default_instance_;
class CommitRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommitRequest>
      _instance;
  ::google::protobuf::internal::ArenaStringPtr transaction_id_;
  const ::google::spanner::v1::TransactionOptions* single_use_transaction_;
} _CommitRequest_default_instance_;
class CommitResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CommitResponse>
      _instance;
} _CommitResponse_default_instance_;
class RollbackRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RollbackRequest>
      _instance;
} _RollbackRequest_default_instance_;
}  // namespace v1
}  // namespace spanner
}  // namespace google
namespace protobuf_google_2fspanner_2fv1_2fspanner_2eproto {
void InitDefaultsCreateSessionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::spanner::v1::_CreateSessionRequest_default_instance_;
    new (ptr) ::google::spanner::v1::CreateSessionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::spanner::v1::CreateSessionRequest::InitAsDefaultInstance();
}

void InitDefaultsCreateSessionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCreateSessionRequestImpl);
}

void InitDefaultsSessionImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::spanner::v1::_Session_default_instance_;
    new (ptr) ::google::spanner::v1::Session();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::spanner::v1::Session::InitAsDefaultInstance();
}

void InitDefaultsSession() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsSessionImpl);
}

void InitDefaultsGetSessionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::spanner::v1::_GetSessionRequest_default_instance_;
    new (ptr) ::google::spanner::v1::GetSessionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::spanner::v1::GetSessionRequest::InitAsDefaultInstance();
}

void InitDefaultsGetSessionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGetSessionRequestImpl);
}

void InitDefaultsDeleteSessionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::spanner::v1::_DeleteSessionRequest_default_instance_;
    new (ptr) ::google::spanner::v1::DeleteSessionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::spanner::v1::DeleteSessionRequest::InitAsDefaultInstance();
}

void InitDefaultsDeleteSessionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsDeleteSessionRequestImpl);
}

void InitDefaultsExecuteSqlRequest_ParamTypesEntry_DoNotUseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fspanner_2fv1_2ftype_2eproto::InitDefaultsStructType();
  {
    void* ptr = &::google::spanner::v1::_ExecuteSqlRequest_ParamTypesEntry_DoNotUse_default_instance_;
    new (ptr) ::google::spanner::v1::ExecuteSqlRequest_ParamTypesEntry_DoNotUse();
  }
  ::google::spanner::v1::ExecuteSqlRequest_ParamTypesEntry_DoNotUse::InitAsDefaultInstance();
}

void InitDefaultsExecuteSqlRequest_ParamTypesEntry_DoNotUse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExecuteSqlRequest_ParamTypesEntry_DoNotUseImpl);
}

void InitDefaultsExecuteSqlRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::InitDefaultsTransactionSelector();
  protobuf_google_2fprotobuf_2fstruct_2eproto::InitDefaultsListValue();
  protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsExecuteSqlRequest_ParamTypesEntry_DoNotUse();
  {
    void* ptr = &::google::spanner::v1::_ExecuteSqlRequest_default_instance_;
    new (ptr) ::google::spanner::v1::ExecuteSqlRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::spanner::v1::ExecuteSqlRequest::InitAsDefaultInstance();
}

void InitDefaultsExecuteSqlRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsExecuteSqlRequestImpl);
}

void InitDefaultsReadRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::InitDefaultsTransactionSelector();
  protobuf_google_2fspanner_2fv1_2fkeys_2eproto::InitDefaultsKeySet();
  {
    void* ptr = &::google::spanner::v1::_ReadRequest_default_instance_;
    new (ptr) ::google::spanner::v1::ReadRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::spanner::v1::ReadRequest::InitAsDefaultInstance();
}

void InitDefaultsReadRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsReadRequestImpl);
}

void InitDefaultsBeginTransactionRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::InitDefaultsTransactionOptions();
  {
    void* ptr = &::google::spanner::v1::_BeginTransactionRequest_default_instance_;
    new (ptr) ::google::spanner::v1::BeginTransactionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::spanner::v1::BeginTransactionRequest::InitAsDefaultInstance();
}

void InitDefaultsBeginTransactionRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBeginTransactionRequestImpl);
}

void InitDefaultsCommitRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::InitDefaultsTransactionOptions();
  protobuf_google_2fspanner_2fv1_2fmutation_2eproto::InitDefaultsMutation();
  {
    void* ptr = &::google::spanner::v1::_CommitRequest_default_instance_;
    new (ptr) ::google::spanner::v1::CommitRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::spanner::v1::CommitRequest::InitAsDefaultInstance();
}

void InitDefaultsCommitRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommitRequestImpl);
}

void InitDefaultsCommitResponseImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_google_2fprotobuf_2ftimestamp_2eproto::InitDefaultsTimestamp();
  {
    void* ptr = &::google::spanner::v1::_CommitResponse_default_instance_;
    new (ptr) ::google::spanner::v1::CommitResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::spanner::v1::CommitResponse::InitAsDefaultInstance();
}

void InitDefaultsCommitResponse() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCommitResponseImpl);
}

void InitDefaultsRollbackRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::google::spanner::v1::_RollbackRequest_default_instance_;
    new (ptr) ::google::spanner::v1::RollbackRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::spanner::v1::RollbackRequest::InitAsDefaultInstance();
}

void InitDefaultsRollbackRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRollbackRequestImpl);
}

::google::protobuf::Metadata file_level_metadata[11];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::CreateSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::CreateSessionRequest, database_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::Session, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::Session, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::GetSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::GetSessionRequest, name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::DeleteSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::DeleteSessionRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ExecuteSqlRequest_ParamTypesEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ExecuteSqlRequest_ParamTypesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ExecuteSqlRequest_ParamTypesEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ExecuteSqlRequest_ParamTypesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ExecuteSqlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ExecuteSqlRequest, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ExecuteSqlRequest, transaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ExecuteSqlRequest, sql_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ExecuteSqlRequest, params_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ExecuteSqlRequest, param_types_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ExecuteSqlRequest, resume_token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ExecuteSqlRequest, query_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ReadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ReadRequest, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ReadRequest, transaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ReadRequest, table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ReadRequest, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ReadRequest, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ReadRequest, key_set_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ReadRequest, limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::ReadRequest, resume_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::BeginTransactionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::BeginTransactionRequest, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::BeginTransactionRequest, options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::CommitRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::CommitRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::CommitRequest, session_),
  offsetof(::google::spanner::v1::CommitRequestDefaultTypeInternal, transaction_id_),
  offsetof(::google::spanner::v1::CommitRequestDefaultTypeInternal, single_use_transaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::CommitRequest, mutations_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::CommitRequest, transaction_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::CommitResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::CommitResponse, commit_timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::RollbackRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::RollbackRequest, session_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::google::spanner::v1::RollbackRequest, transaction_id_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::spanner::v1::CreateSessionRequest)},
  { 6, -1, sizeof(::google::spanner::v1::Session)},
  { 12, -1, sizeof(::google::spanner::v1::GetSessionRequest)},
  { 18, -1, sizeof(::google::spanner::v1::DeleteSessionRequest)},
  { 24, 31, sizeof(::google::spanner::v1::ExecuteSqlRequest_ParamTypesEntry_DoNotUse)},
  { 33, -1, sizeof(::google::spanner::v1::ExecuteSqlRequest)},
  { 45, -1, sizeof(::google::spanner::v1::ReadRequest)},
  { 58, -1, sizeof(::google::spanner::v1::BeginTransactionRequest)},
  { 65, -1, sizeof(::google::spanner::v1::CommitRequest)},
  { 75, -1, sizeof(::google::spanner::v1::CommitResponse)},
  { 81, -1, sizeof(::google::spanner::v1::RollbackRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::spanner::v1::_CreateSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::spanner::v1::_Session_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::spanner::v1::_GetSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::spanner::v1::_DeleteSessionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::spanner::v1::_ExecuteSqlRequest_ParamTypesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::spanner::v1::_ExecuteSqlRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::spanner::v1::_ReadRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::spanner::v1::_BeginTransactionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::spanner::v1::_CommitRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::spanner::v1::_CommitResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::google::spanner::v1::_RollbackRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "google/spanner/v1/spanner.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 11);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\037google/spanner/v1/spanner.proto\022\021googl"
      "e.spanner.v1\032\034google/api/annotations.pro"
      "to\032\025google/api/auth.proto\032\033google/protob"
      "uf/empty.proto\032\034google/protobuf/struct.p"
      "roto\032\037google/protobuf/timestamp.proto\032\034g"
      "oogle/spanner/v1/keys.proto\032 google/span"
      "ner/v1/mutation.proto\032\"google/spanner/v1"
      "/result_set.proto\032#google/spanner/v1/tra"
      "nsaction.proto\032\034google/spanner/v1/type.p"
      "roto\"(\n\024CreateSessionRequest\022\020\n\010database"
      "\030\001 \001(\t\"\027\n\007Session\022\014\n\004name\030\001 \001(\t\"!\n\021GetSe"
      "ssionRequest\022\014\n\004name\030\001 \001(\t\"$\n\024DeleteSess"
      "ionRequest\022\014\n\004name\030\001 \001(\t\"\270\003\n\021ExecuteSqlR"
      "equest\022\017\n\007session\030\001 \001(\t\022;\n\013transaction\030\002"
      " \001(\0132&.google.spanner.v1.TransactionSele"
      "ctor\022\013\n\003sql\030\003 \001(\t\022\'\n\006params\030\004 \001(\0132\027.goog"
      "le.protobuf.Struct\022I\n\013param_types\030\005 \003(\0132"
      "4.google.spanner.v1.ExecuteSqlRequest.Pa"
      "ramTypesEntry\022\024\n\014resume_token\030\006 \001(\014\022B\n\nq"
      "uery_mode\030\007 \001(\0162..google.spanner.v1.Exec"
      "uteSqlRequest.QueryMode\032J\n\017ParamTypesEnt"
      "ry\022\013\n\003key\030\001 \001(\t\022&\n\005value\030\002 \001(\0132\027.google."
      "spanner.v1.Type:\0028\001\".\n\tQueryMode\022\n\n\006NORM"
      "AL\020\000\022\010\n\004PLAN\020\001\022\013\n\007PROFILE\020\002\"\333\001\n\013ReadRequ"
      "est\022\017\n\007session\030\001 \001(\t\022;\n\013transaction\030\002 \001("
      "\0132&.google.spanner.v1.TransactionSelecto"
      "r\022\r\n\005table\030\003 \001(\t\022\r\n\005index\030\004 \001(\t\022\017\n\007colum"
      "ns\030\005 \003(\t\022*\n\007key_set\030\006 \001(\0132\031.google.spann"
      "er.v1.KeySet\022\r\n\005limit\030\010 \001(\003\022\024\n\014resume_to"
      "ken\030\t \001(\014\"b\n\027BeginTransactionRequest\022\017\n\007"
      "session\030\001 \001(\t\0226\n\007options\030\002 \001(\0132%.google."
      "spanner.v1.TransactionOptions\"\302\001\n\rCommit"
      "Request\022\017\n\007session\030\001 \001(\t\022\030\n\016transaction_"
      "id\030\002 \001(\014H\000\022G\n\026single_use_transaction\030\003 \001"
      "(\0132%.google.spanner.v1.TransactionOption"
      "sH\000\022.\n\tmutations\030\004 \003(\0132\033.google.spanner."
      "v1.MutationB\r\n\013transaction\"F\n\016CommitResp"
      "onse\0224\n\020commit_timestamp\030\001 \001(\0132\032.google."
      "protobuf.Timestamp\":\n\017RollbackRequest\022\017\n"
      "\007session\030\001 \001(\t\022\026\n\016transaction_id\030\002 \001(\0142\351"
      "\014\n\007Spanner\022\230\001\n\rCreateSession\022\'.google.sp"
      "anner.v1.CreateSessionRequest\032\032.google.s"
      "panner.v1.Session\"B\202\323\344\223\002<\":/v1/{database"
      "=projects/*/instances/*/databases/*}/ses"
      "sions\022\220\001\n\nGetSession\022$.google.spanner.v1"
      ".GetSessionRequest\032\032.google.spanner.v1.S"
      "ession\"@\202\323\344\223\002:\0228/v1/{name=projects/*/ins"
      "tances/*/databases/*/sessions/*}\022\222\001\n\rDel"
      "eteSession\022\'.google.spanner.v1.DeleteSes"
      "sionRequest\032\026.google.protobuf.Empty\"@\202\323\344"
      "\223\002:*8/v1/{name=projects/*/instances/*/da"
      "tabases/*/sessions/*}\022\243\001\n\nExecuteSql\022$.g"
      "oogle.spanner.v1.ExecuteSqlRequest\032\034.goo"
      "gle.spanner.v1.ResultSet\"Q\202\323\344\223\002K\"F/v1/{s"
      "ession=projects/*/instances/*/databases/"
      "*/sessions/*}:executeSql:\001*\022\276\001\n\023ExecuteS"
      "treamingSql\022$.google.spanner.v1.ExecuteS"
      "qlRequest\032#.google.spanner.v1.PartialRes"
      "ultSet\"Z\202\323\344\223\002T\"O/v1/{session=projects/*/"
      "instances/*/databases/*/sessions/*}:exec"
      "uteStreamingSql:\001*0\001\022\221\001\n\004Read\022\036.google.s"
      "panner.v1.ReadRequest\032\034.google.spanner.v"
      "1.ResultSet\"K\202\323\344\223\002E\"@/v1/{session=projec"
      "ts/*/instances/*/databases/*/sessions/*}"
      ":read:\001*\022\254\001\n\rStreamingRead\022\036.google.span"
      "ner.v1.ReadRequest\032#.google.spanner.v1.P"
      "artialResultSet\"T\202\323\344\223\002N\"I/v1/{session=pr"
      "ojects/*/instances/*/databases/*/session"
      "s/*}:streamingRead:\001*0\001\022\267\001\n\020BeginTransac"
      "tion\022*.google.spanner.v1.BeginTransactio"
      "nRequest\032\036.google.spanner.v1.Transaction"
      "\"W\202\323\344\223\002Q\"L/v1/{session=projects/*/instan"
      "ces/*/databases/*/sessions/*}:beginTrans"
      "action:\001*\022\234\001\n\006Commit\022 .google.spanner.v1"
      ".CommitRequest\032!.google.spanner.v1.Commi"
      "tResponse\"M\202\323\344\223\002G\"B/v1/{session=projects"
      "/*/instances/*/databases/*/sessions/*}:c"
      "ommit:\001*\022\227\001\n\010Rollback\022\".google.spanner.v"
      "1.RollbackRequest\032\026.google.protobuf.Empt"
      "y\"O\202\323\344\223\002I\"D/v1/{session=projects/*/insta"
      "nces/*/databases/*/sessions/*}:rollback:"
      "\001*B{\n\025com.google.spanner.v1B\014SpannerProt"
      "oP\001Z8google.golang.org/genproto/googleap"
      "is/spanner/v1;spanner\252\002\027Google.Cloud.Spa"
      "nner.V1b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3375);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "google/spanner/v1/spanner.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fapi_2fannotations_2eproto::AddDescriptors();
  ::protobuf_google_2fapi_2fauth_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fempty_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fstruct_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2ftimestamp_2eproto::AddDescriptors();
  ::protobuf_google_2fspanner_2fv1_2fkeys_2eproto::AddDescriptors();
  ::protobuf_google_2fspanner_2fv1_2fmutation_2eproto::AddDescriptors();
  ::protobuf_google_2fspanner_2fv1_2fresult_5fset_2eproto::AddDescriptors();
  ::protobuf_google_2fspanner_2fv1_2ftransaction_2eproto::AddDescriptors();
  ::protobuf_google_2fspanner_2fv1_2ftype_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_google_2fspanner_2fv1_2fspanner_2eproto
namespace google {
namespace spanner {
namespace v1 {
const ::google::protobuf::EnumDescriptor* ExecuteSqlRequest_QueryMode_descriptor() {
  protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_enum_descriptors[0];
}
bool ExecuteSqlRequest_QueryMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ExecuteSqlRequest_QueryMode ExecuteSqlRequest::NORMAL;
const ExecuteSqlRequest_QueryMode ExecuteSqlRequest::PLAN;
const ExecuteSqlRequest_QueryMode ExecuteSqlRequest::PROFILE;
const ExecuteSqlRequest_QueryMode ExecuteSqlRequest::QueryMode_MIN;
const ExecuteSqlRequest_QueryMode ExecuteSqlRequest::QueryMode_MAX;
const int ExecuteSqlRequest::QueryMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CreateSessionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateSessionRequest::kDatabaseFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateSessionRequest::CreateSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsCreateSessionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.CreateSessionRequest)
}
CreateSessionRequest::CreateSessionRequest(const CreateSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.database().size() > 0) {
    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.CreateSessionRequest)
}

void CreateSessionRequest::SharedCtor() {
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CreateSessionRequest::~CreateSessionRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.CreateSessionRequest)
  SharedDtor();
}

void CreateSessionRequest::SharedDtor() {
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateSessionRequest::descriptor() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CreateSessionRequest& CreateSessionRequest::default_instance() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsCreateSessionRequest();
  return *internal_default_instance();
}

CreateSessionRequest* CreateSessionRequest::New(::google::protobuf::Arena* arena) const {
  CreateSessionRequest* n = new CreateSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.CreateSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool CreateSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.CreateSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string database = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->database().data(), static_cast<int>(this->database().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.CreateSessionRequest.database"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.CreateSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.CreateSessionRequest)
  return false;
#undef DO_
}

void CreateSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.CreateSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.CreateSessionRequest.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->database(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.spanner.v1.CreateSessionRequest)
}

::google::protobuf::uint8* CreateSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.CreateSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string database = 1;
  if (this->database().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->database().data(), static_cast<int>(this->database().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.CreateSessionRequest.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->database(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.CreateSessionRequest)
  return target;
}

size_t CreateSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.CreateSessionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string database = 1;
  if (this->database().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->database());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.CreateSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CreateSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.CreateSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.CreateSessionRequest)
    MergeFrom(*source);
  }
}

void CreateSessionRequest::MergeFrom(const CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.CreateSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.database().size() > 0) {

    database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
  }
}

void CreateSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSessionRequest::CopyFrom(const CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionRequest::IsInitialized() const {
  return true;
}

void CreateSessionRequest::Swap(CreateSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateSessionRequest::InternalSwap(CreateSessionRequest* other) {
  using std::swap;
  database_.Swap(&other->database_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CreateSessionRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Session::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Session::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Session::Session()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsSession();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.Session)
}
Session::Session(const Session& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.Session)
}

void Session::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.Session)
  SharedDtor();
}

void Session::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Session::descriptor() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Session& Session::default_instance() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsSession();
  return *internal_default_instance();
}

Session* Session::New(::google::protobuf::Arena* arena) const {
  Session* n = new Session;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.Session.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.Session)
  return false;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.Session.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.spanner.v1.Session)
}

::google::protobuf::uint8* Session::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.Session)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.Session.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.Session)
  return target;
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.Session)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.Session)
  GOOGLE_DCHECK_NE(&from, this);
  const Session* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Session>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.Session)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.Session)
    MergeFrom(*source);
  }
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void Session::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::Swap(Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Session::InternalSwap(Session* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Session::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSessionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSessionRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSessionRequest::GetSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsGetSessionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.GetSessionRequest)
}
GetSessionRequest::GetSessionRequest(const GetSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.GetSessionRequest)
}

void GetSessionRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

GetSessionRequest::~GetSessionRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.GetSessionRequest)
  SharedDtor();
}

void GetSessionRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetSessionRequest::descriptor() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSessionRequest& GetSessionRequest::default_instance() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsGetSessionRequest();
  return *internal_default_instance();
}

GetSessionRequest* GetSessionRequest::New(::google::protobuf::Arena* arena) const {
  GetSessionRequest* n = new GetSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GetSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.GetSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool GetSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.GetSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.GetSessionRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.GetSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.GetSessionRequest)
  return false;
#undef DO_
}

void GetSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.GetSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.GetSessionRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.spanner.v1.GetSessionRequest)
}

::google::protobuf::uint8* GetSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.GetSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.GetSessionRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.GetSessionRequest)
  return target;
}

size_t GetSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.GetSessionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.GetSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.GetSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.GetSessionRequest)
    MergeFrom(*source);
  }
}

void GetSessionRequest::MergeFrom(const GetSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.GetSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void GetSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.GetSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSessionRequest::CopyFrom(const GetSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.GetSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSessionRequest::IsInitialized() const {
  return true;
}

void GetSessionRequest::Swap(GetSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSessionRequest::InternalSwap(GetSessionRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GetSessionRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DeleteSessionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeleteSessionRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeleteSessionRequest::DeleteSessionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsDeleteSessionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.DeleteSessionRequest)
}
DeleteSessionRequest::DeleteSessionRequest(const DeleteSessionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.DeleteSessionRequest)
}

void DeleteSessionRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DeleteSessionRequest::~DeleteSessionRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.DeleteSessionRequest)
  SharedDtor();
}

void DeleteSessionRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DeleteSessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteSessionRequest::descriptor() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DeleteSessionRequest& DeleteSessionRequest::default_instance() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsDeleteSessionRequest();
  return *internal_default_instance();
}

DeleteSessionRequest* DeleteSessionRequest::New(::google::protobuf::Arena* arena) const {
  DeleteSessionRequest* n = new DeleteSessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeleteSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.DeleteSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool DeleteSessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.DeleteSessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.DeleteSessionRequest.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.DeleteSessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.DeleteSessionRequest)
  return false;
#undef DO_
}

void DeleteSessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.DeleteSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.DeleteSessionRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.spanner.v1.DeleteSessionRequest)
}

::google::protobuf::uint8* DeleteSessionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.DeleteSessionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.DeleteSessionRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.DeleteSessionRequest)
  return target;
}

size_t DeleteSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.DeleteSessionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteSessionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.DeleteSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSessionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DeleteSessionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.DeleteSessionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.DeleteSessionRequest)
    MergeFrom(*source);
  }
}

void DeleteSessionRequest::MergeFrom(const DeleteSessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.DeleteSessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void DeleteSessionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.DeleteSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSessionRequest::CopyFrom(const DeleteSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.DeleteSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSessionRequest::IsInitialized() const {
  return true;
}

void DeleteSessionRequest::Swap(DeleteSessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeleteSessionRequest::InternalSwap(DeleteSessionRequest* other) {
  using std::swap;
  name_.Swap(&other->name_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeleteSessionRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

ExecuteSqlRequest_ParamTypesEntry_DoNotUse::ExecuteSqlRequest_ParamTypesEntry_DoNotUse() {}
ExecuteSqlRequest_ParamTypesEntry_DoNotUse::ExecuteSqlRequest_ParamTypesEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void ExecuteSqlRequest_ParamTypesEntry_DoNotUse::MergeFrom(const ExecuteSqlRequest_ParamTypesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata ExecuteSqlRequest_ParamTypesEntry_DoNotUse::GetMetadata() const {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[4];
}
void ExecuteSqlRequest_ParamTypesEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void ExecuteSqlRequest::InitAsDefaultInstance() {
  ::google::spanner::v1::_ExecuteSqlRequest_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::google::spanner::v1::TransactionSelector*>(
      ::google::spanner::v1::TransactionSelector::internal_default_instance());
  ::google::spanner::v1::_ExecuteSqlRequest_default_instance_._instance.get_mutable()->params_ = const_cast< ::google::protobuf::Struct*>(
      ::google::protobuf::Struct::internal_default_instance());
}
void ExecuteSqlRequest::clear_transaction() {
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) {
    delete transaction_;
  }
  transaction_ = NULL;
}
void ExecuteSqlRequest::clear_params() {
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
}
void ExecuteSqlRequest::clear_param_types() {
  param_types_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExecuteSqlRequest::kSessionFieldNumber;
const int ExecuteSqlRequest::kTransactionFieldNumber;
const int ExecuteSqlRequest::kSqlFieldNumber;
const int ExecuteSqlRequest::kParamsFieldNumber;
const int ExecuteSqlRequest::kParamTypesFieldNumber;
const int ExecuteSqlRequest::kResumeTokenFieldNumber;
const int ExecuteSqlRequest::kQueryModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExecuteSqlRequest::ExecuteSqlRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsExecuteSqlRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.ExecuteSqlRequest)
}
ExecuteSqlRequest::ExecuteSqlRequest(const ExecuteSqlRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  param_types_.MergeFrom(from.param_types_);
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session().size() > 0) {
    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sql().size() > 0) {
    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  resume_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resume_token().size() > 0) {
    resume_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resume_token_);
  }
  if (from.has_transaction()) {
    transaction_ = new ::google::spanner::v1::TransactionSelector(*from.transaction_);
  } else {
    transaction_ = NULL;
  }
  if (from.has_params()) {
    params_ = new ::google::protobuf::Struct(*from.params_);
  } else {
    params_ = NULL;
  }
  query_mode_ = from.query_mode_;
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.ExecuteSqlRequest)
}

void ExecuteSqlRequest::SharedCtor() {
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resume_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&query_mode_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(query_mode_));
  _cached_size_ = 0;
}

ExecuteSqlRequest::~ExecuteSqlRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.ExecuteSqlRequest)
  SharedDtor();
}

void ExecuteSqlRequest::SharedDtor() {
  session_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sql_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resume_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete params_;
}

void ExecuteSqlRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecuteSqlRequest::descriptor() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExecuteSqlRequest& ExecuteSqlRequest::default_instance() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsExecuteSqlRequest();
  return *internal_default_instance();
}

ExecuteSqlRequest* ExecuteSqlRequest::New(::google::protobuf::Arena* arena) const {
  ExecuteSqlRequest* n = new ExecuteSqlRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ExecuteSqlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.ExecuteSqlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_types_.Clear();
  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resume_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) {
    delete transaction_;
  }
  transaction_ = NULL;
  if (GetArenaNoVirtual() == NULL && params_ != NULL) {
    delete params_;
  }
  params_ = NULL;
  query_mode_ = 0;
  _internal_metadata_.Clear();
}

bool ExecuteSqlRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.ExecuteSqlRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session().data(), static_cast<int>(this->session().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.ExecuteSqlRequest.session"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.v1.TransactionSelector transaction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sql = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sql().data(), static_cast<int>(this->sql().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.ExecuteSqlRequest.sql"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.Struct params = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_params()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .google.spanner.v1.Type> param_types = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          ExecuteSqlRequest_ParamTypesEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              ExecuteSqlRequest_ParamTypesEntry_DoNotUse,
              ::std::string, ::google::spanner::v1::Type,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::google::spanner::v1::Type > > parser(&param_types_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.ExecuteSqlRequest.ParamTypesEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes resume_token = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resume_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.v1.ExecuteSqlRequest.QueryMode query_mode = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_query_mode(static_cast< ::google::spanner::v1::ExecuteSqlRequest_QueryMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.ExecuteSqlRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.ExecuteSqlRequest)
  return false;
#undef DO_
}

void ExecuteSqlRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.ExecuteSqlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.ExecuteSqlRequest.session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session(), output);
  }

  // .google.spanner.v1.TransactionSelector transaction = 2;
  if (this->has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->transaction_, output);
  }

  // string sql = 3;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.ExecuteSqlRequest.sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sql(), output);
  }

  // .google.protobuf.Struct params = 4;
  if (this->has_params()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->params_, output);
  }

  // map<string, .google.spanner.v1.Type> param_types = 5;
  if (!this->param_types().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::spanner::v1::Type >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.spanner.v1.ExecuteSqlRequest.ParamTypesEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->param_types().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->param_types().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::spanner::v1::Type >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::spanner::v1::Type >::const_iterator
          it = this->param_types().begin();
          it != this->param_types().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ExecuteSqlRequest_ParamTypesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(param_types_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecuteSqlRequest_ParamTypesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::spanner::v1::Type >::const_iterator
          it = this->param_types().begin();
          it != this->param_types().end(); ++it) {
        entry.reset(param_types_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // bytes resume_token = 6;
  if (this->resume_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->resume_token(), output);
  }

  // .google.spanner.v1.ExecuteSqlRequest.QueryMode query_mode = 7;
  if (this->query_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->query_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.spanner.v1.ExecuteSqlRequest)
}

::google::protobuf::uint8* ExecuteSqlRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.ExecuteSqlRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.ExecuteSqlRequest.session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session(), target);
  }

  // .google.spanner.v1.TransactionSelector transaction = 2;
  if (this->has_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->transaction_, deterministic, target);
  }

  // string sql = 3;
  if (this->sql().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.ExecuteSqlRequest.sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sql(), target);
  }

  // .google.protobuf.Struct params = 4;
  if (this->has_params()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, *this->params_, deterministic, target);
  }

  // map<string, .google.spanner.v1.Type> param_types = 5;
  if (!this->param_types().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::google::spanner::v1::Type >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "google.spanner.v1.ExecuteSqlRequest.ParamTypesEntry.key");
      }
    };

    if (deterministic &&
        this->param_types().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->param_types().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::google::spanner::v1::Type >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::google::spanner::v1::Type >::const_iterator
          it = this->param_types().begin();
          it != this->param_types().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<ExecuteSqlRequest_ParamTypesEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(param_types_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<ExecuteSqlRequest_ParamTypesEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, ::google::spanner::v1::Type >::const_iterator
          it = this->param_types().begin();
          it != this->param_types().end(); ++it) {
        entry.reset(param_types_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // bytes resume_token = 6;
  if (this->resume_token().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->resume_token(), target);
  }

  // .google.spanner.v1.ExecuteSqlRequest.QueryMode query_mode = 7;
  if (this->query_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->query_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.ExecuteSqlRequest)
  return target;
}

size_t ExecuteSqlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.ExecuteSqlRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .google.spanner.v1.Type> param_types = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->param_types_size());
  {
    ::google::protobuf::scoped_ptr<ExecuteSqlRequest_ParamTypesEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, ::google::spanner::v1::Type >::const_iterator
        it = this->param_types().begin();
        it != this->param_types().end(); ++it) {
      entry.reset(param_types_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session());
  }

  // string sql = 3;
  if (this->sql().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sql());
  }

  // bytes resume_token = 6;
  if (this->resume_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->resume_token());
  }

  // .google.spanner.v1.TransactionSelector transaction = 2;
  if (this->has_transaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transaction_);
  }

  // .google.protobuf.Struct params = 4;
  if (this->has_params()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->params_);
  }

  // .google.spanner.v1.ExecuteSqlRequest.QueryMode query_mode = 7;
  if (this->query_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->query_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecuteSqlRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.ExecuteSqlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ExecuteSqlRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExecuteSqlRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.ExecuteSqlRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.ExecuteSqlRequest)
    MergeFrom(*source);
  }
}

void ExecuteSqlRequest::MergeFrom(const ExecuteSqlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.ExecuteSqlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  param_types_.MergeFrom(from.param_types_);
  if (from.session().size() > 0) {

    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  if (from.sql().size() > 0) {

    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  if (from.resume_token().size() > 0) {

    resume_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resume_token_);
  }
  if (from.has_transaction()) {
    mutable_transaction()->::google::spanner::v1::TransactionSelector::MergeFrom(from.transaction());
  }
  if (from.has_params()) {
    mutable_params()->::google::protobuf::Struct::MergeFrom(from.params());
  }
  if (from.query_mode() != 0) {
    set_query_mode(from.query_mode());
  }
}

void ExecuteSqlRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.ExecuteSqlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecuteSqlRequest::CopyFrom(const ExecuteSqlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.ExecuteSqlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecuteSqlRequest::IsInitialized() const {
  return true;
}

void ExecuteSqlRequest::Swap(ExecuteSqlRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExecuteSqlRequest::InternalSwap(ExecuteSqlRequest* other) {
  using std::swap;
  param_types_.Swap(&other->param_types_);
  session_.Swap(&other->session_);
  sql_.Swap(&other->sql_);
  resume_token_.Swap(&other->resume_token_);
  swap(transaction_, other->transaction_);
  swap(params_, other->params_);
  swap(query_mode_, other->query_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ExecuteSqlRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ReadRequest::InitAsDefaultInstance() {
  ::google::spanner::v1::_ReadRequest_default_instance_._instance.get_mutable()->transaction_ = const_cast< ::google::spanner::v1::TransactionSelector*>(
      ::google::spanner::v1::TransactionSelector::internal_default_instance());
  ::google::spanner::v1::_ReadRequest_default_instance_._instance.get_mutable()->key_set_ = const_cast< ::google::spanner::v1::KeySet*>(
      ::google::spanner::v1::KeySet::internal_default_instance());
}
void ReadRequest::clear_transaction() {
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) {
    delete transaction_;
  }
  transaction_ = NULL;
}
void ReadRequest::clear_key_set() {
  if (GetArenaNoVirtual() == NULL && key_set_ != NULL) {
    delete key_set_;
  }
  key_set_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReadRequest::kSessionFieldNumber;
const int ReadRequest::kTransactionFieldNumber;
const int ReadRequest::kTableFieldNumber;
const int ReadRequest::kIndexFieldNumber;
const int ReadRequest::kColumnsFieldNumber;
const int ReadRequest::kKeySetFieldNumber;
const int ReadRequest::kLimitFieldNumber;
const int ReadRequest::kResumeTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReadRequest::ReadRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsReadRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.ReadRequest)
}
ReadRequest::ReadRequest(const ReadRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      columns_(from.columns_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session().size() > 0) {
    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.table().size() > 0) {
    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  index_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.index().size() > 0) {
    index_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_);
  }
  resume_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.resume_token().size() > 0) {
    resume_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resume_token_);
  }
  if (from.has_transaction()) {
    transaction_ = new ::google::spanner::v1::TransactionSelector(*from.transaction_);
  } else {
    transaction_ = NULL;
  }
  if (from.has_key_set()) {
    key_set_ = new ::google::spanner::v1::KeySet(*from.key_set_);
  } else {
    key_set_ = NULL;
  }
  limit_ = from.limit_;
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.ReadRequest)
}

void ReadRequest::SharedCtor() {
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resume_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&transaction_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&limit_) -
      reinterpret_cast<char*>(&transaction_)) + sizeof(limit_));
  _cached_size_ = 0;
}

ReadRequest::~ReadRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.ReadRequest)
  SharedDtor();
}

void ReadRequest::SharedDtor() {
  session_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resume_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_;
  if (this != internal_default_instance()) delete key_set_;
}

void ReadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadRequest::descriptor() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ReadRequest& ReadRequest::default_instance() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsReadRequest();
  return *internal_default_instance();
}

ReadRequest* ReadRequest::New(::google::protobuf::Arena* arena) const {
  ReadRequest* n = new ReadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ReadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.ReadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resume_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && transaction_ != NULL) {
    delete transaction_;
  }
  transaction_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_set_ != NULL) {
    delete key_set_;
  }
  key_set_ = NULL;
  limit_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool ReadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.ReadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session().data(), static_cast<int>(this->session().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.ReadRequest.session"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.v1.TransactionSelector transaction = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string table = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->table().data(), static_cast<int>(this->table().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.ReadRequest.table"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string index = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->index().data(), static_cast<int>(this->index().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.ReadRequest.index"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string columns = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_columns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->columns(this->columns_size() - 1).data(),
            static_cast<int>(this->columns(this->columns_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.ReadRequest.columns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.v1.KeySet key_set = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_key_set()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 limit = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes resume_token = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_resume_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.ReadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.ReadRequest)
  return false;
#undef DO_
}

void ReadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.ReadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.ReadRequest.session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session(), output);
  }

  // .google.spanner.v1.TransactionSelector transaction = 2;
  if (this->has_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->transaction_, output);
  }

  // string table = 3;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.ReadRequest.table");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->table(), output);
  }

  // string index = 4;
  if (this->index().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->index().data(), static_cast<int>(this->index().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.ReadRequest.index");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->index(), output);
  }

  // repeated string columns = 5;
  for (int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->columns(i).data(), static_cast<int>(this->columns(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.ReadRequest.columns");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->columns(i), output);
  }

  // .google.spanner.v1.KeySet key_set = 6;
  if (this->has_key_set()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->key_set_, output);
  }

  // int64 limit = 8;
  if (this->limit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->limit(), output);
  }

  // bytes resume_token = 9;
  if (this->resume_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      9, this->resume_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.spanner.v1.ReadRequest)
}

::google::protobuf::uint8* ReadRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.ReadRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.ReadRequest.session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session(), target);
  }

  // .google.spanner.v1.TransactionSelector transaction = 2;
  if (this->has_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->transaction_, deterministic, target);
  }

  // string table = 3;
  if (this->table().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->table().data(), static_cast<int>(this->table().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.ReadRequest.table");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->table(), target);
  }

  // string index = 4;
  if (this->index().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->index().data(), static_cast<int>(this->index().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.ReadRequest.index");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->index(), target);
  }

  // repeated string columns = 5;
  for (int i = 0, n = this->columns_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->columns(i).data(), static_cast<int>(this->columns(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.ReadRequest.columns");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->columns(i), target);
  }

  // .google.spanner.v1.KeySet key_set = 6;
  if (this->has_key_set()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->key_set_, deterministic, target);
  }

  // int64 limit = 8;
  if (this->limit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->limit(), target);
  }

  // bytes resume_token = 9;
  if (this->resume_token().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->resume_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.ReadRequest)
  return target;
}

size_t ReadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.ReadRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string columns = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->columns_size());
  for (int i = 0, n = this->columns_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->columns(i));
  }

  // string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session());
  }

  // string table = 3;
  if (this->table().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table());
  }

  // string index = 4;
  if (this->index().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->index());
  }

  // bytes resume_token = 9;
  if (this->resume_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->resume_token());
  }

  // .google.spanner.v1.TransactionSelector transaction = 2;
  if (this->has_transaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->transaction_);
  }

  // .google.spanner.v1.KeySet key_set = 6;
  if (this->has_key_set()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->key_set_);
  }

  // int64 limit = 8;
  if (this->limit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReadRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ReadRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.ReadRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.ReadRequest)
    MergeFrom(*source);
  }
}

void ReadRequest::MergeFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.ReadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  if (from.session().size() > 0) {

    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  if (from.table().size() > 0) {

    table_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_);
  }
  if (from.index().size() > 0) {

    index_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_);
  }
  if (from.resume_token().size() > 0) {

    resume_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resume_token_);
  }
  if (from.has_transaction()) {
    mutable_transaction()->::google::spanner::v1::TransactionSelector::MergeFrom(from.transaction());
  }
  if (from.has_key_set()) {
    mutable_key_set()->::google::spanner::v1::KeySet::MergeFrom(from.key_set());
  }
  if (from.limit() != 0) {
    set_limit(from.limit());
  }
}

void ReadRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadRequest::CopyFrom(const ReadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.ReadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadRequest::IsInitialized() const {
  return true;
}

void ReadRequest::Swap(ReadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReadRequest::InternalSwap(ReadRequest* other) {
  using std::swap;
  columns_.InternalSwap(&other->columns_);
  session_.Swap(&other->session_);
  table_.Swap(&other->table_);
  index_.Swap(&other->index_);
  resume_token_.Swap(&other->resume_token_);
  swap(transaction_, other->transaction_);
  swap(key_set_, other->key_set_);
  swap(limit_, other->limit_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ReadRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BeginTransactionRequest::InitAsDefaultInstance() {
  ::google::spanner::v1::_BeginTransactionRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::google::spanner::v1::TransactionOptions*>(
      ::google::spanner::v1::TransactionOptions::internal_default_instance());
}
void BeginTransactionRequest::clear_options() {
  if (GetArenaNoVirtual() == NULL && options_ != NULL) {
    delete options_;
  }
  options_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginTransactionRequest::kSessionFieldNumber;
const int BeginTransactionRequest::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginTransactionRequest::BeginTransactionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsBeginTransactionRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.BeginTransactionRequest)
}
BeginTransactionRequest::BeginTransactionRequest(const BeginTransactionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session().size() > 0) {
    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  if (from.has_options()) {
    options_ = new ::google::spanner::v1::TransactionOptions(*from.options_);
  } else {
    options_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.BeginTransactionRequest)
}

void BeginTransactionRequest::SharedCtor() {
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  options_ = NULL;
  _cached_size_ = 0;
}

BeginTransactionRequest::~BeginTransactionRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.BeginTransactionRequest)
  SharedDtor();
}

void BeginTransactionRequest::SharedDtor() {
  session_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void BeginTransactionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginTransactionRequest::descriptor() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BeginTransactionRequest& BeginTransactionRequest::default_instance() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsBeginTransactionRequest();
  return *internal_default_instance();
}

BeginTransactionRequest* BeginTransactionRequest::New(::google::protobuf::Arena* arena) const {
  BeginTransactionRequest* n = new BeginTransactionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginTransactionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.BeginTransactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && options_ != NULL) {
    delete options_;
  }
  options_ = NULL;
  _internal_metadata_.Clear();
}

bool BeginTransactionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.BeginTransactionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session().data(), static_cast<int>(this->session().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.BeginTransactionRequest.session"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.v1.TransactionOptions options = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.BeginTransactionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.BeginTransactionRequest)
  return false;
#undef DO_
}

void BeginTransactionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.BeginTransactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.BeginTransactionRequest.session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session(), output);
  }

  // .google.spanner.v1.TransactionOptions options = 2;
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->options_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.spanner.v1.BeginTransactionRequest)
}

::google::protobuf::uint8* BeginTransactionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.BeginTransactionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.BeginTransactionRequest.session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session(), target);
  }

  // .google.spanner.v1.TransactionOptions options = 2;
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, *this->options_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.BeginTransactionRequest)
  return target;
}

size_t BeginTransactionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.BeginTransactionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session());
  }

  // .google.spanner.v1.TransactionOptions options = 2;
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->options_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginTransactionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.BeginTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BeginTransactionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BeginTransactionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.BeginTransactionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.BeginTransactionRequest)
    MergeFrom(*source);
  }
}

void BeginTransactionRequest::MergeFrom(const BeginTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.BeginTransactionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session().size() > 0) {

    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  if (from.has_options()) {
    mutable_options()->::google::spanner::v1::TransactionOptions::MergeFrom(from.options());
  }
}

void BeginTransactionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.BeginTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginTransactionRequest::CopyFrom(const BeginTransactionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.BeginTransactionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginTransactionRequest::IsInitialized() const {
  return true;
}

void BeginTransactionRequest::Swap(BeginTransactionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginTransactionRequest::InternalSwap(BeginTransactionRequest* other) {
  using std::swap;
  session_.Swap(&other->session_);
  swap(options_, other->options_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeginTransactionRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommitRequest::InitAsDefaultInstance() {
  ::google::spanner::v1::_CommitRequest_default_instance_.transaction_id_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::google::spanner::v1::_CommitRequest_default_instance_.single_use_transaction_ = const_cast< ::google::spanner::v1::TransactionOptions*>(
      ::google::spanner::v1::TransactionOptions::internal_default_instance());
}
void CommitRequest::set_allocated_single_use_transaction(::google::spanner::v1::TransactionOptions* single_use_transaction) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_transaction();
  if (single_use_transaction) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      single_use_transaction = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, single_use_transaction, submessage_arena);
    }
    set_has_single_use_transaction();
    transaction_.single_use_transaction_ = single_use_transaction;
  }
  // @@protoc_insertion_point(field_set_allocated:google.spanner.v1.CommitRequest.single_use_transaction)
}
void CommitRequest::clear_single_use_transaction() {
  if (has_single_use_transaction()) {
    delete transaction_.single_use_transaction_;
    clear_has_transaction();
  }
}
void CommitRequest::clear_mutations() {
  mutations_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitRequest::kSessionFieldNumber;
const int CommitRequest::kTransactionIdFieldNumber;
const int CommitRequest::kSingleUseTransactionFieldNumber;
const int CommitRequest::kMutationsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitRequest::CommitRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsCommitRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.CommitRequest)
}
CommitRequest::CommitRequest(const CommitRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      mutations_(from.mutations_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session().size() > 0) {
    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  clear_has_transaction();
  switch (from.transaction_case()) {
    case kTransactionId: {
      set_transaction_id(from.transaction_id());
      break;
    }
    case kSingleUseTransaction: {
      mutable_single_use_transaction()->::google::spanner::v1::TransactionOptions::MergeFrom(from.single_use_transaction());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.CommitRequest)
}

void CommitRequest::SharedCtor() {
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_transaction();
  _cached_size_ = 0;
}

CommitRequest::~CommitRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.CommitRequest)
  SharedDtor();
}

void CommitRequest::SharedDtor() {
  session_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_transaction()) {
    clear_transaction();
  }
}

void CommitRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitRequest::descriptor() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommitRequest& CommitRequest::default_instance() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsCommitRequest();
  return *internal_default_instance();
}

CommitRequest* CommitRequest::New(::google::protobuf::Arena* arena) const {
  CommitRequest* n = new CommitRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitRequest::clear_transaction() {
// @@protoc_insertion_point(one_of_clear_start:google.spanner.v1.CommitRequest)
  switch (transaction_case()) {
    case kTransactionId: {
      transaction_.transaction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kSingleUseTransaction: {
      delete transaction_.single_use_transaction_;
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TRANSACTION_NOT_SET;
}


void CommitRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.CommitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mutations_.Clear();
  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_transaction();
  _internal_metadata_.Clear();
}

bool CommitRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.CommitRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session().data(), static_cast<int>(this->session().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.CommitRequest.session"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.spanner.v1.TransactionOptions single_use_transaction = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_single_use_transaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.spanner.v1.Mutation mutations = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_mutations()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.CommitRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.CommitRequest)
  return false;
#undef DO_
}

void CommitRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.CommitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.CommitRequest.session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session(), output);
  }

  // bytes transaction_id = 2;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->transaction_id(), output);
  }

  // .google.spanner.v1.TransactionOptions single_use_transaction = 3;
  if (has_single_use_transaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *transaction_.single_use_transaction_, output);
  }

  // repeated .google.spanner.v1.Mutation mutations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mutations_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->mutations(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.spanner.v1.CommitRequest)
}

::google::protobuf::uint8* CommitRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.CommitRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.CommitRequest.session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session(), target);
  }

  // bytes transaction_id = 2;
  if (has_transaction_id()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->transaction_id(), target);
  }

  // .google.spanner.v1.TransactionOptions single_use_transaction = 3;
  if (has_single_use_transaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *transaction_.single_use_transaction_, deterministic, target);
  }

  // repeated .google.spanner.v1.Mutation mutations = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mutations_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->mutations(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.CommitRequest)
  return target;
}

size_t CommitRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.CommitRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .google.spanner.v1.Mutation mutations = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->mutations_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mutations(static_cast<int>(i)));
    }
  }

  // string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session());
  }

  switch (transaction_case()) {
    // bytes transaction_id = 2;
    case kTransactionId: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->transaction_id());
      break;
    }
    // .google.spanner.v1.TransactionOptions single_use_transaction = 3;
    case kSingleUseTransaction: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *transaction_.single_use_transaction_);
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.CommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.CommitRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.CommitRequest)
    MergeFrom(*source);
  }
}

void CommitRequest::MergeFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.CommitRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mutations_.MergeFrom(from.mutations_);
  if (from.session().size() > 0) {

    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  switch (from.transaction_case()) {
    case kTransactionId: {
      set_transaction_id(from.transaction_id());
      break;
    }
    case kSingleUseTransaction: {
      mutable_single_use_transaction()->::google::spanner::v1::TransactionOptions::MergeFrom(from.single_use_transaction());
      break;
    }
    case TRANSACTION_NOT_SET: {
      break;
    }
  }
}

void CommitRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitRequest::CopyFrom(const CommitRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.CommitRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitRequest::IsInitialized() const {
  return true;
}

void CommitRequest::Swap(CommitRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitRequest::InternalSwap(CommitRequest* other) {
  using std::swap;
  mutations_.InternalSwap(&other->mutations_);
  session_.Swap(&other->session_);
  swap(transaction_, other->transaction_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CommitResponse::InitAsDefaultInstance() {
  ::google::spanner::v1::_CommitResponse_default_instance_._instance.get_mutable()->commit_timestamp_ = const_cast< ::google::protobuf::Timestamp*>(
      ::google::protobuf::Timestamp::internal_default_instance());
}
void CommitResponse::clear_commit_timestamp() {
  if (GetArenaNoVirtual() == NULL && commit_timestamp_ != NULL) {
    delete commit_timestamp_;
  }
  commit_timestamp_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CommitResponse::kCommitTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CommitResponse::CommitResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsCommitResponse();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.CommitResponse)
}
CommitResponse::CommitResponse(const CommitResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_commit_timestamp()) {
    commit_timestamp_ = new ::google::protobuf::Timestamp(*from.commit_timestamp_);
  } else {
    commit_timestamp_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.CommitResponse)
}

void CommitResponse::SharedCtor() {
  commit_timestamp_ = NULL;
  _cached_size_ = 0;
}

CommitResponse::~CommitResponse() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.CommitResponse)
  SharedDtor();
}

void CommitResponse::SharedDtor() {
  if (this != internal_default_instance()) delete commit_timestamp_;
}

void CommitResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommitResponse::descriptor() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CommitResponse& CommitResponse::default_instance() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsCommitResponse();
  return *internal_default_instance();
}

CommitResponse* CommitResponse::New(::google::protobuf::Arena* arena) const {
  CommitResponse* n = new CommitResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CommitResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.CommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && commit_timestamp_ != NULL) {
    delete commit_timestamp_;
  }
  commit_timestamp_ = NULL;
  _internal_metadata_.Clear();
}

bool CommitResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.CommitResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .google.protobuf.Timestamp commit_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_commit_timestamp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.CommitResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.CommitResponse)
  return false;
#undef DO_
}

void CommitResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.CommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp commit_timestamp = 1;
  if (this->has_commit_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->commit_timestamp_, output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.spanner.v1.CommitResponse)
}

::google::protobuf::uint8* CommitResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.CommitResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp commit_timestamp = 1;
  if (this->has_commit_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->commit_timestamp_, deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.CommitResponse)
  return target;
}

size_t CommitResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.CommitResponse)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .google.protobuf.Timestamp commit_timestamp = 1;
  if (this->has_commit_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->commit_timestamp_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommitResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CommitResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CommitResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.CommitResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.CommitResponse)
    MergeFrom(*source);
  }
}

void CommitResponse::MergeFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.CommitResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_commit_timestamp()) {
    mutable_commit_timestamp()->::google::protobuf::Timestamp::MergeFrom(from.commit_timestamp());
  }
}

void CommitResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommitResponse::CopyFrom(const CommitResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.CommitResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitResponse::IsInitialized() const {
  return true;
}

void CommitResponse::Swap(CommitResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CommitResponse::InternalSwap(CommitResponse* other) {
  using std::swap;
  swap(commit_timestamp_, other->commit_timestamp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CommitResponse::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RollbackRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RollbackRequest::kSessionFieldNumber;
const int RollbackRequest::kTransactionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RollbackRequest::RollbackRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsRollbackRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.spanner.v1.RollbackRequest)
}
RollbackRequest::RollbackRequest(const RollbackRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session().size() > 0) {
    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.transaction_id().size() > 0) {
    transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
  // @@protoc_insertion_point(copy_constructor:google.spanner.v1.RollbackRequest)
}

void RollbackRequest::SharedCtor() {
  session_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RollbackRequest::~RollbackRequest() {
  // @@protoc_insertion_point(destructor:google.spanner.v1.RollbackRequest)
  SharedDtor();
}

void RollbackRequest::SharedDtor() {
  session_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RollbackRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RollbackRequest::descriptor() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RollbackRequest& RollbackRequest::default_instance() {
  ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::InitDefaultsRollbackRequest();
  return *internal_default_instance();
}

RollbackRequest* RollbackRequest::New(::google::protobuf::Arena* arena) const {
  RollbackRequest* n = new RollbackRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RollbackRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.spanner.v1.RollbackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  transaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool RollbackRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:google.spanner.v1.RollbackRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string session = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_session()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->session().data(), static_cast<int>(this->session().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "google.spanner.v1.RollbackRequest.session"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes transaction_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_transaction_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:google.spanner.v1.RollbackRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:google.spanner.v1.RollbackRequest)
  return false;
#undef DO_
}

void RollbackRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:google.spanner.v1.RollbackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.RollbackRequest.session");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->session(), output);
  }

  // bytes transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->transaction_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:google.spanner.v1.RollbackRequest)
}

::google::protobuf::uint8* RollbackRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:google.spanner.v1.RollbackRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string session = 1;
  if (this->session().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->session().data(), static_cast<int>(this->session().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "google.spanner.v1.RollbackRequest.session");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->session(), target);
  }

  // bytes transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->transaction_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.spanner.v1.RollbackRequest)
  return target;
}

size_t RollbackRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.spanner.v1.RollbackRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string session = 1;
  if (this->session().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->session());
  }

  // bytes transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->transaction_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RollbackRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.spanner.v1.RollbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RollbackRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RollbackRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.spanner.v1.RollbackRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.spanner.v1.RollbackRequest)
    MergeFrom(*source);
  }
}

void RollbackRequest::MergeFrom(const RollbackRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.spanner.v1.RollbackRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session().size() > 0) {

    session_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_);
  }
  if (from.transaction_id().size() > 0) {

    transaction_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.transaction_id_);
  }
}

void RollbackRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.spanner.v1.RollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RollbackRequest::CopyFrom(const RollbackRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.spanner.v1.RollbackRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollbackRequest::IsInitialized() const {
  return true;
}

void RollbackRequest::Swap(RollbackRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RollbackRequest::InternalSwap(RollbackRequest* other) {
  using std::swap;
  session_.Swap(&other->session_);
  transaction_id_.Swap(&other->transaction_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RollbackRequest::GetMetadata() const {
  protobuf_google_2fspanner_2fv1_2fspanner_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_google_2fspanner_2fv1_2fspanner_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace spanner
}  // namespace google

// @@protoc_insertion_point(global_scope)
