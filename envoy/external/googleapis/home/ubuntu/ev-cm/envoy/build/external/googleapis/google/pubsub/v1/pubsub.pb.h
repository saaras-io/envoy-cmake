// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto

#ifndef PROTOBUF_google_2fpubsub_2fv1_2fpubsub_2eproto__INCLUDED
#define PROTOBUF_google_2fpubsub_2fv1_2fpubsub_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[39];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTopic_LabelsEntry_DoNotUseImpl();
void InitDefaultsTopic_LabelsEntry_DoNotUse();
void InitDefaultsTopicImpl();
void InitDefaultsTopic();
void InitDefaultsPubsubMessage_AttributesEntry_DoNotUseImpl();
void InitDefaultsPubsubMessage_AttributesEntry_DoNotUse();
void InitDefaultsPubsubMessageImpl();
void InitDefaultsPubsubMessage();
void InitDefaultsGetTopicRequestImpl();
void InitDefaultsGetTopicRequest();
void InitDefaultsUpdateTopicRequestImpl();
void InitDefaultsUpdateTopicRequest();
void InitDefaultsPublishRequestImpl();
void InitDefaultsPublishRequest();
void InitDefaultsPublishResponseImpl();
void InitDefaultsPublishResponse();
void InitDefaultsListTopicsRequestImpl();
void InitDefaultsListTopicsRequest();
void InitDefaultsListTopicsResponseImpl();
void InitDefaultsListTopicsResponse();
void InitDefaultsListTopicSubscriptionsRequestImpl();
void InitDefaultsListTopicSubscriptionsRequest();
void InitDefaultsListTopicSubscriptionsResponseImpl();
void InitDefaultsListTopicSubscriptionsResponse();
void InitDefaultsDeleteTopicRequestImpl();
void InitDefaultsDeleteTopicRequest();
void InitDefaultsSubscription_LabelsEntry_DoNotUseImpl();
void InitDefaultsSubscription_LabelsEntry_DoNotUse();
void InitDefaultsSubscriptionImpl();
void InitDefaultsSubscription();
void InitDefaultsPushConfig_AttributesEntry_DoNotUseImpl();
void InitDefaultsPushConfig_AttributesEntry_DoNotUse();
void InitDefaultsPushConfigImpl();
void InitDefaultsPushConfig();
void InitDefaultsReceivedMessageImpl();
void InitDefaultsReceivedMessage();
void InitDefaultsGetSubscriptionRequestImpl();
void InitDefaultsGetSubscriptionRequest();
void InitDefaultsUpdateSubscriptionRequestImpl();
void InitDefaultsUpdateSubscriptionRequest();
void InitDefaultsListSubscriptionsRequestImpl();
void InitDefaultsListSubscriptionsRequest();
void InitDefaultsListSubscriptionsResponseImpl();
void InitDefaultsListSubscriptionsResponse();
void InitDefaultsDeleteSubscriptionRequestImpl();
void InitDefaultsDeleteSubscriptionRequest();
void InitDefaultsModifyPushConfigRequestImpl();
void InitDefaultsModifyPushConfigRequest();
void InitDefaultsPullRequestImpl();
void InitDefaultsPullRequest();
void InitDefaultsPullResponseImpl();
void InitDefaultsPullResponse();
void InitDefaultsModifyAckDeadlineRequestImpl();
void InitDefaultsModifyAckDeadlineRequest();
void InitDefaultsAcknowledgeRequestImpl();
void InitDefaultsAcknowledgeRequest();
void InitDefaultsStreamingPullRequestImpl();
void InitDefaultsStreamingPullRequest();
void InitDefaultsStreamingPullResponseImpl();
void InitDefaultsStreamingPullResponse();
void InitDefaultsCreateSnapshotRequestImpl();
void InitDefaultsCreateSnapshotRequest();
void InitDefaultsUpdateSnapshotRequestImpl();
void InitDefaultsUpdateSnapshotRequest();
void InitDefaultsSnapshot_LabelsEntry_DoNotUseImpl();
void InitDefaultsSnapshot_LabelsEntry_DoNotUse();
void InitDefaultsSnapshotImpl();
void InitDefaultsSnapshot();
void InitDefaultsListSnapshotsRequestImpl();
void InitDefaultsListSnapshotsRequest();
void InitDefaultsListSnapshotsResponseImpl();
void InitDefaultsListSnapshotsResponse();
void InitDefaultsDeleteSnapshotRequestImpl();
void InitDefaultsDeleteSnapshotRequest();
void InitDefaultsSeekRequestImpl();
void InitDefaultsSeekRequest();
void InitDefaultsSeekResponseImpl();
void InitDefaultsSeekResponse();
inline void InitDefaults() {
  InitDefaultsTopic_LabelsEntry_DoNotUse();
  InitDefaultsTopic();
  InitDefaultsPubsubMessage_AttributesEntry_DoNotUse();
  InitDefaultsPubsubMessage();
  InitDefaultsGetTopicRequest();
  InitDefaultsUpdateTopicRequest();
  InitDefaultsPublishRequest();
  InitDefaultsPublishResponse();
  InitDefaultsListTopicsRequest();
  InitDefaultsListTopicsResponse();
  InitDefaultsListTopicSubscriptionsRequest();
  InitDefaultsListTopicSubscriptionsResponse();
  InitDefaultsDeleteTopicRequest();
  InitDefaultsSubscription_LabelsEntry_DoNotUse();
  InitDefaultsSubscription();
  InitDefaultsPushConfig_AttributesEntry_DoNotUse();
  InitDefaultsPushConfig();
  InitDefaultsReceivedMessage();
  InitDefaultsGetSubscriptionRequest();
  InitDefaultsUpdateSubscriptionRequest();
  InitDefaultsListSubscriptionsRequest();
  InitDefaultsListSubscriptionsResponse();
  InitDefaultsDeleteSubscriptionRequest();
  InitDefaultsModifyPushConfigRequest();
  InitDefaultsPullRequest();
  InitDefaultsPullResponse();
  InitDefaultsModifyAckDeadlineRequest();
  InitDefaultsAcknowledgeRequest();
  InitDefaultsStreamingPullRequest();
  InitDefaultsStreamingPullResponse();
  InitDefaultsCreateSnapshotRequest();
  InitDefaultsUpdateSnapshotRequest();
  InitDefaultsSnapshot_LabelsEntry_DoNotUse();
  InitDefaultsSnapshot();
  InitDefaultsListSnapshotsRequest();
  InitDefaultsListSnapshotsResponse();
  InitDefaultsDeleteSnapshotRequest();
  InitDefaultsSeekRequest();
  InitDefaultsSeekResponse();
}
}  // namespace protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto
namespace google {
namespace pubsub {
namespace v1 {
class AcknowledgeRequest;
class AcknowledgeRequestDefaultTypeInternal;
extern AcknowledgeRequestDefaultTypeInternal _AcknowledgeRequest_default_instance_;
class CreateSnapshotRequest;
class CreateSnapshotRequestDefaultTypeInternal;
extern CreateSnapshotRequestDefaultTypeInternal _CreateSnapshotRequest_default_instance_;
class DeleteSnapshotRequest;
class DeleteSnapshotRequestDefaultTypeInternal;
extern DeleteSnapshotRequestDefaultTypeInternal _DeleteSnapshotRequest_default_instance_;
class DeleteSubscriptionRequest;
class DeleteSubscriptionRequestDefaultTypeInternal;
extern DeleteSubscriptionRequestDefaultTypeInternal _DeleteSubscriptionRequest_default_instance_;
class DeleteTopicRequest;
class DeleteTopicRequestDefaultTypeInternal;
extern DeleteTopicRequestDefaultTypeInternal _DeleteTopicRequest_default_instance_;
class GetSubscriptionRequest;
class GetSubscriptionRequestDefaultTypeInternal;
extern GetSubscriptionRequestDefaultTypeInternal _GetSubscriptionRequest_default_instance_;
class GetTopicRequest;
class GetTopicRequestDefaultTypeInternal;
extern GetTopicRequestDefaultTypeInternal _GetTopicRequest_default_instance_;
class ListSnapshotsRequest;
class ListSnapshotsRequestDefaultTypeInternal;
extern ListSnapshotsRequestDefaultTypeInternal _ListSnapshotsRequest_default_instance_;
class ListSnapshotsResponse;
class ListSnapshotsResponseDefaultTypeInternal;
extern ListSnapshotsResponseDefaultTypeInternal _ListSnapshotsResponse_default_instance_;
class ListSubscriptionsRequest;
class ListSubscriptionsRequestDefaultTypeInternal;
extern ListSubscriptionsRequestDefaultTypeInternal _ListSubscriptionsRequest_default_instance_;
class ListSubscriptionsResponse;
class ListSubscriptionsResponseDefaultTypeInternal;
extern ListSubscriptionsResponseDefaultTypeInternal _ListSubscriptionsResponse_default_instance_;
class ListTopicSubscriptionsRequest;
class ListTopicSubscriptionsRequestDefaultTypeInternal;
extern ListTopicSubscriptionsRequestDefaultTypeInternal _ListTopicSubscriptionsRequest_default_instance_;
class ListTopicSubscriptionsResponse;
class ListTopicSubscriptionsResponseDefaultTypeInternal;
extern ListTopicSubscriptionsResponseDefaultTypeInternal _ListTopicSubscriptionsResponse_default_instance_;
class ListTopicsRequest;
class ListTopicsRequestDefaultTypeInternal;
extern ListTopicsRequestDefaultTypeInternal _ListTopicsRequest_default_instance_;
class ListTopicsResponse;
class ListTopicsResponseDefaultTypeInternal;
extern ListTopicsResponseDefaultTypeInternal _ListTopicsResponse_default_instance_;
class ModifyAckDeadlineRequest;
class ModifyAckDeadlineRequestDefaultTypeInternal;
extern ModifyAckDeadlineRequestDefaultTypeInternal _ModifyAckDeadlineRequest_default_instance_;
class ModifyPushConfigRequest;
class ModifyPushConfigRequestDefaultTypeInternal;
extern ModifyPushConfigRequestDefaultTypeInternal _ModifyPushConfigRequest_default_instance_;
class PublishRequest;
class PublishRequestDefaultTypeInternal;
extern PublishRequestDefaultTypeInternal _PublishRequest_default_instance_;
class PublishResponse;
class PublishResponseDefaultTypeInternal;
extern PublishResponseDefaultTypeInternal _PublishResponse_default_instance_;
class PubsubMessage;
class PubsubMessageDefaultTypeInternal;
extern PubsubMessageDefaultTypeInternal _PubsubMessage_default_instance_;
class PubsubMessage_AttributesEntry_DoNotUse;
class PubsubMessage_AttributesEntry_DoNotUseDefaultTypeInternal;
extern PubsubMessage_AttributesEntry_DoNotUseDefaultTypeInternal _PubsubMessage_AttributesEntry_DoNotUse_default_instance_;
class PullRequest;
class PullRequestDefaultTypeInternal;
extern PullRequestDefaultTypeInternal _PullRequest_default_instance_;
class PullResponse;
class PullResponseDefaultTypeInternal;
extern PullResponseDefaultTypeInternal _PullResponse_default_instance_;
class PushConfig;
class PushConfigDefaultTypeInternal;
extern PushConfigDefaultTypeInternal _PushConfig_default_instance_;
class PushConfig_AttributesEntry_DoNotUse;
class PushConfig_AttributesEntry_DoNotUseDefaultTypeInternal;
extern PushConfig_AttributesEntry_DoNotUseDefaultTypeInternal _PushConfig_AttributesEntry_DoNotUse_default_instance_;
class ReceivedMessage;
class ReceivedMessageDefaultTypeInternal;
extern ReceivedMessageDefaultTypeInternal _ReceivedMessage_default_instance_;
class SeekRequest;
class SeekRequestDefaultTypeInternal;
extern SeekRequestDefaultTypeInternal _SeekRequest_default_instance_;
class SeekResponse;
class SeekResponseDefaultTypeInternal;
extern SeekResponseDefaultTypeInternal _SeekResponse_default_instance_;
class Snapshot;
class SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
class Snapshot_LabelsEntry_DoNotUse;
class Snapshot_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Snapshot_LabelsEntry_DoNotUseDefaultTypeInternal _Snapshot_LabelsEntry_DoNotUse_default_instance_;
class StreamingPullRequest;
class StreamingPullRequestDefaultTypeInternal;
extern StreamingPullRequestDefaultTypeInternal _StreamingPullRequest_default_instance_;
class StreamingPullResponse;
class StreamingPullResponseDefaultTypeInternal;
extern StreamingPullResponseDefaultTypeInternal _StreamingPullResponse_default_instance_;
class Subscription;
class SubscriptionDefaultTypeInternal;
extern SubscriptionDefaultTypeInternal _Subscription_default_instance_;
class Subscription_LabelsEntry_DoNotUse;
class Subscription_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Subscription_LabelsEntry_DoNotUseDefaultTypeInternal _Subscription_LabelsEntry_DoNotUse_default_instance_;
class Topic;
class TopicDefaultTypeInternal;
extern TopicDefaultTypeInternal _Topic_default_instance_;
class Topic_LabelsEntry_DoNotUse;
class Topic_LabelsEntry_DoNotUseDefaultTypeInternal;
extern Topic_LabelsEntry_DoNotUseDefaultTypeInternal _Topic_LabelsEntry_DoNotUse_default_instance_;
class UpdateSnapshotRequest;
class UpdateSnapshotRequestDefaultTypeInternal;
extern UpdateSnapshotRequestDefaultTypeInternal _UpdateSnapshotRequest_default_instance_;
class UpdateSubscriptionRequest;
class UpdateSubscriptionRequestDefaultTypeInternal;
extern UpdateSubscriptionRequestDefaultTypeInternal _UpdateSubscriptionRequest_default_instance_;
class UpdateTopicRequest;
class UpdateTopicRequestDefaultTypeInternal;
extern UpdateTopicRequestDefaultTypeInternal _UpdateTopicRequest_default_instance_;
}  // namespace v1
}  // namespace pubsub
}  // namespace google
namespace google {
namespace pubsub {
namespace v1 {

// ===================================================================

class Topic_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Topic_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Topic_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Topic_LabelsEntry_DoNotUse();
  Topic_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Topic_LabelsEntry_DoNotUse& other);
  static const Topic_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Topic_LabelsEntry_DoNotUse*>(&_Topic_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Topic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.Topic) */ {
 public:
  Topic();
  virtual ~Topic();

  Topic(const Topic& from);

  inline Topic& operator=(const Topic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Topic(Topic&& from) noexcept
    : Topic() {
    *this = ::std::move(from);
  }

  inline Topic& operator=(Topic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Topic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Topic* internal_default_instance() {
    return reinterpret_cast<const Topic*>(
               &_Topic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void UnsafeArenaSwap(Topic* other);
  void Swap(Topic* other);
  friend void swap(Topic& a, Topic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Topic* New() const PROTOBUF_FINAL { return New(NULL); }

  Topic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Topic& from);
  void MergeFrom(const Topic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Topic* other);
  protected:
  explicit Topic(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 2;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.Topic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      Topic_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsTopicImpl();
};
// -------------------------------------------------------------------

class PubsubMessage_AttributesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PubsubMessage_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PubsubMessage_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PubsubMessage_AttributesEntry_DoNotUse();
  PubsubMessage_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PubsubMessage_AttributesEntry_DoNotUse& other);
  static const PubsubMessage_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PubsubMessage_AttributesEntry_DoNotUse*>(&_PubsubMessage_AttributesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PubsubMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PubsubMessage) */ {
 public:
  PubsubMessage();
  virtual ~PubsubMessage();

  PubsubMessage(const PubsubMessage& from);

  inline PubsubMessage& operator=(const PubsubMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PubsubMessage(PubsubMessage&& from) noexcept
    : PubsubMessage() {
    *this = ::std::move(from);
  }

  inline PubsubMessage& operator=(PubsubMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PubsubMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubsubMessage* internal_default_instance() {
    return reinterpret_cast<const PubsubMessage*>(
               &_PubsubMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void UnsafeArenaSwap(PubsubMessage* other);
  void Swap(PubsubMessage* other);
  friend void swap(PubsubMessage& a, PubsubMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PubsubMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  PubsubMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PubsubMessage& from);
  void MergeFrom(const PubsubMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PubsubMessage* other);
  protected:
  explicit PubsubMessage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> attributes = 2;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      attributes() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_attributes();

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_data();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      ::std::string* data);

  // string message_id = 3;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 3;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_message_id(::std::string&& value);
  #endif
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_message_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message_id(
      ::std::string* message_id);

  // .google.protobuf.Timestamp publish_time = 4;
  bool has_publish_time() const;
  void clear_publish_time();
  static const int kPublishTimeFieldNumber = 4;
  private:
  void _slow_mutable_publish_time();
  public:
  const ::google::protobuf::Timestamp& publish_time() const;
  ::google::protobuf::Timestamp* release_publish_time();
  ::google::protobuf::Timestamp* mutable_publish_time();
  void set_allocated_publish_time(::google::protobuf::Timestamp* publish_time);
  void unsafe_arena_set_allocated_publish_time(
      ::google::protobuf::Timestamp* publish_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_publish_time();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PubsubMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      PubsubMessage_AttributesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > attributes_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  ::google::protobuf::Timestamp* publish_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPubsubMessageImpl();
};
// -------------------------------------------------------------------

class GetTopicRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.GetTopicRequest) */ {
 public:
  GetTopicRequest();
  virtual ~GetTopicRequest();

  GetTopicRequest(const GetTopicRequest& from);

  inline GetTopicRequest& operator=(const GetTopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTopicRequest(GetTopicRequest&& from) noexcept
    : GetTopicRequest() {
    *this = ::std::move(from);
  }

  inline GetTopicRequest& operator=(GetTopicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTopicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTopicRequest* internal_default_instance() {
    return reinterpret_cast<const GetTopicRequest*>(
               &_GetTopicRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void UnsafeArenaSwap(GetTopicRequest* other);
  void Swap(GetTopicRequest* other);
  friend void swap(GetTopicRequest& a, GetTopicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTopicRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTopicRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTopicRequest& from);
  void MergeFrom(const GetTopicRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTopicRequest* other);
  protected:
  explicit GetTopicRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_topic();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      ::std::string* topic);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.GetTopicRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsGetTopicRequestImpl();
};
// -------------------------------------------------------------------

class UpdateTopicRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.UpdateTopicRequest) */ {
 public:
  UpdateTopicRequest();
  virtual ~UpdateTopicRequest();

  UpdateTopicRequest(const UpdateTopicRequest& from);

  inline UpdateTopicRequest& operator=(const UpdateTopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTopicRequest(UpdateTopicRequest&& from) noexcept
    : UpdateTopicRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTopicRequest& operator=(UpdateTopicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateTopicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTopicRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTopicRequest*>(
               &_UpdateTopicRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void UnsafeArenaSwap(UpdateTopicRequest* other);
  void Swap(UpdateTopicRequest* other);
  friend void swap(UpdateTopicRequest& a, UpdateTopicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTopicRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateTopicRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateTopicRequest& from);
  void MergeFrom(const UpdateTopicRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateTopicRequest* other);
  protected:
  explicit UpdateTopicRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.pubsub.v1.Topic topic = 1;
  bool has_topic() const;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  private:
  void _slow_mutable_topic();
  public:
  const ::google::pubsub::v1::Topic& topic() const;
  ::google::pubsub::v1::Topic* release_topic();
  ::google::pubsub::v1::Topic* mutable_topic();
  void set_allocated_topic(::google::pubsub::v1::Topic* topic);
  void unsafe_arena_set_allocated_topic(
      ::google::pubsub::v1::Topic* topic);
  ::google::pubsub::v1::Topic* unsafe_arena_release_topic();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  private:
  void _slow_mutable_update_mask();
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);
  void unsafe_arena_set_allocated_update_mask(
      ::google::protobuf::FieldMask* update_mask);
  ::google::protobuf::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.UpdateTopicRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::pubsub::v1::Topic* topic_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsUpdateTopicRequestImpl();
};
// -------------------------------------------------------------------

class PublishRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PublishRequest) */ {
 public:
  PublishRequest();
  virtual ~PublishRequest();

  PublishRequest(const PublishRequest& from);

  inline PublishRequest& operator=(const PublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishRequest(PublishRequest&& from) noexcept
    : PublishRequest() {
    *this = ::std::move(from);
  }

  inline PublishRequest& operator=(PublishRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRequest*>(
               &_PublishRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void UnsafeArenaSwap(PublishRequest* other);
  void Swap(PublishRequest* other);
  friend void swap(PublishRequest& a, PublishRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishRequest& from);
  void MergeFrom(const PublishRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishRequest* other);
  protected:
  explicit PublishRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1.PubsubMessage messages = 2;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 2;
  const ::google::pubsub::v1::PubsubMessage& messages(int index) const;
  ::google::pubsub::v1::PubsubMessage* mutable_messages(int index);
  ::google::pubsub::v1::PubsubMessage* add_messages();
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >&
      messages() const;

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_topic();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      ::std::string* topic);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PublishRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage > messages_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPublishRequestImpl();
};
// -------------------------------------------------------------------

class PublishResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PublishResponse) */ {
 public:
  PublishResponse();
  virtual ~PublishResponse();

  PublishResponse(const PublishResponse& from);

  inline PublishResponse& operator=(const PublishResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishResponse(PublishResponse&& from) noexcept
    : PublishResponse() {
    *this = ::std::move(from);
  }

  inline PublishResponse& operator=(PublishResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishResponse* internal_default_instance() {
    return reinterpret_cast<const PublishResponse*>(
               &_PublishResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void UnsafeArenaSwap(PublishResponse* other);
  void Swap(PublishResponse* other);
  friend void swap(PublishResponse& a, PublishResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishResponse& from);
  void MergeFrom(const PublishResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishResponse* other);
  protected:
  explicit PublishResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string message_ids = 1;
  int message_ids_size() const;
  void clear_message_ids();
  static const int kMessageIdsFieldNumber = 1;
  const ::std::string& message_ids(int index) const;
  ::std::string* mutable_message_ids(int index);
  void set_message_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_message_ids(int index, ::std::string&& value);
  #endif
  void set_message_ids(int index, const char* value);
  void set_message_ids(int index, const char* value, size_t size);
  ::std::string* add_message_ids();
  void add_message_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_message_ids(::std::string&& value);
  #endif
  void add_message_ids(const char* value);
  void add_message_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& message_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_message_ids();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PublishResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> message_ids_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPublishResponseImpl();
};
// -------------------------------------------------------------------

class ListTopicsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicsRequest) */ {
 public:
  ListTopicsRequest();
  virtual ~ListTopicsRequest();

  ListTopicsRequest(const ListTopicsRequest& from);

  inline ListTopicsRequest& operator=(const ListTopicsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicsRequest(ListTopicsRequest&& from) noexcept
    : ListTopicsRequest() {
    *this = ::std::move(from);
  }

  inline ListTopicsRequest& operator=(ListTopicsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTopicsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTopicsRequest*>(
               &_ListTopicsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void UnsafeArenaSwap(ListTopicsRequest* other);
  void Swap(ListTopicsRequest* other);
  friend void swap(ListTopicsRequest& a, ListTopicsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListTopicsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListTopicsRequest& from);
  void MergeFrom(const ListTopicsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListTopicsRequest* other);
  protected:
  explicit ListTopicsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_project();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project(
      ::std::string* project);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicsRequestImpl();
};
// -------------------------------------------------------------------

class ListTopicsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicsResponse) */ {
 public:
  ListTopicsResponse();
  virtual ~ListTopicsResponse();

  ListTopicsResponse(const ListTopicsResponse& from);

  inline ListTopicsResponse& operator=(const ListTopicsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicsResponse(ListTopicsResponse&& from) noexcept
    : ListTopicsResponse() {
    *this = ::std::move(from);
  }

  inline ListTopicsResponse& operator=(ListTopicsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTopicsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTopicsResponse*>(
               &_ListTopicsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void UnsafeArenaSwap(ListTopicsResponse* other);
  void Swap(ListTopicsResponse* other);
  friend void swap(ListTopicsResponse& a, ListTopicsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListTopicsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListTopicsResponse& from);
  void MergeFrom(const ListTopicsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListTopicsResponse* other);
  protected:
  explicit ListTopicsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1.Topic topics = 1;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 1;
  const ::google::pubsub::v1::Topic& topics(int index) const;
  ::google::pubsub::v1::Topic* mutable_topics(int index);
  ::google::pubsub::v1::Topic* add_topics();
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Topic >*
      mutable_topics();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Topic >&
      topics() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Topic > topics_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicsResponseImpl();
};
// -------------------------------------------------------------------

class ListTopicSubscriptionsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicSubscriptionsRequest) */ {
 public:
  ListTopicSubscriptionsRequest();
  virtual ~ListTopicSubscriptionsRequest();

  ListTopicSubscriptionsRequest(const ListTopicSubscriptionsRequest& from);

  inline ListTopicSubscriptionsRequest& operator=(const ListTopicSubscriptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicSubscriptionsRequest(ListTopicSubscriptionsRequest&& from) noexcept
    : ListTopicSubscriptionsRequest() {
    *this = ::std::move(from);
  }

  inline ListTopicSubscriptionsRequest& operator=(ListTopicSubscriptionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTopicSubscriptionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicSubscriptionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTopicSubscriptionsRequest*>(
               &_ListTopicSubscriptionsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void UnsafeArenaSwap(ListTopicSubscriptionsRequest* other);
  void Swap(ListTopicSubscriptionsRequest* other);
  friend void swap(ListTopicSubscriptionsRequest& a, ListTopicSubscriptionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicSubscriptionsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListTopicSubscriptionsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListTopicSubscriptionsRequest& from);
  void MergeFrom(const ListTopicSubscriptionsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListTopicSubscriptionsRequest* other);
  protected:
  explicit ListTopicSubscriptionsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_topic();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      ::std::string* topic);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicSubscriptionsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicSubscriptionsRequestImpl();
};
// -------------------------------------------------------------------

class ListTopicSubscriptionsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListTopicSubscriptionsResponse) */ {
 public:
  ListTopicSubscriptionsResponse();
  virtual ~ListTopicSubscriptionsResponse();

  ListTopicSubscriptionsResponse(const ListTopicSubscriptionsResponse& from);

  inline ListTopicSubscriptionsResponse& operator=(const ListTopicSubscriptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicSubscriptionsResponse(ListTopicSubscriptionsResponse&& from) noexcept
    : ListTopicSubscriptionsResponse() {
    *this = ::std::move(from);
  }

  inline ListTopicSubscriptionsResponse& operator=(ListTopicSubscriptionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTopicSubscriptionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicSubscriptionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTopicSubscriptionsResponse*>(
               &_ListTopicSubscriptionsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void UnsafeArenaSwap(ListTopicSubscriptionsResponse* other);
  void Swap(ListTopicSubscriptionsResponse* other);
  friend void swap(ListTopicSubscriptionsResponse& a, ListTopicSubscriptionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicSubscriptionsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListTopicSubscriptionsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListTopicSubscriptionsResponse& from);
  void MergeFrom(const ListTopicSubscriptionsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListTopicSubscriptionsResponse* other);
  protected:
  explicit ListTopicSubscriptionsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string subscriptions = 1;
  int subscriptions_size() const;
  void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  const ::std::string& subscriptions(int index) const;
  ::std::string* mutable_subscriptions(int index);
  void set_subscriptions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subscriptions(int index, ::std::string&& value);
  #endif
  void set_subscriptions(int index, const char* value);
  void set_subscriptions(int index, const char* value, size_t size);
  ::std::string* add_subscriptions();
  void add_subscriptions(const ::std::string& value);
  #if LANG_CXX11
  void add_subscriptions(::std::string&& value);
  #endif
  void add_subscriptions(const char* value);
  void add_subscriptions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& subscriptions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subscriptions();

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListTopicSubscriptionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subscriptions_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListTopicSubscriptionsResponseImpl();
};
// -------------------------------------------------------------------

class DeleteTopicRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DeleteTopicRequest) */ {
 public:
  DeleteTopicRequest();
  virtual ~DeleteTopicRequest();

  DeleteTopicRequest(const DeleteTopicRequest& from);

  inline DeleteTopicRequest& operator=(const DeleteTopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTopicRequest(DeleteTopicRequest&& from) noexcept
    : DeleteTopicRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTopicRequest& operator=(DeleteTopicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTopicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTopicRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTopicRequest*>(
               &_DeleteTopicRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void UnsafeArenaSwap(DeleteTopicRequest* other);
  void Swap(DeleteTopicRequest* other);
  friend void swap(DeleteTopicRequest& a, DeleteTopicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTopicRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteTopicRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteTopicRequest& from);
  void MergeFrom(const DeleteTopicRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteTopicRequest* other);
  protected:
  explicit DeleteTopicRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_topic();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      ::std::string* topic);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DeleteTopicRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsDeleteTopicRequestImpl();
};
// -------------------------------------------------------------------

class Subscription_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Subscription_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Subscription_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Subscription_LabelsEntry_DoNotUse();
  Subscription_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Subscription_LabelsEntry_DoNotUse& other);
  static const Subscription_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Subscription_LabelsEntry_DoNotUse*>(&_Subscription_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Subscription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.Subscription) */ {
 public:
  Subscription();
  virtual ~Subscription();

  Subscription(const Subscription& from);

  inline Subscription& operator=(const Subscription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Subscription(Subscription&& from) noexcept
    : Subscription() {
    *this = ::std::move(from);
  }

  inline Subscription& operator=(Subscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Subscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subscription* internal_default_instance() {
    return reinterpret_cast<const Subscription*>(
               &_Subscription_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void UnsafeArenaSwap(Subscription* other);
  void Swap(Subscription* other);
  friend void swap(Subscription& a, Subscription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Subscription* New() const PROTOBUF_FINAL { return New(NULL); }

  Subscription* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Subscription& from);
  void MergeFrom(const Subscription& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Subscription* other);
  protected:
  explicit Subscription(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 9;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 9;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_topic();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      ::std::string* topic);

  // .google.pubsub.v1.PushConfig push_config = 4;
  bool has_push_config() const;
  void clear_push_config();
  static const int kPushConfigFieldNumber = 4;
  private:
  void _slow_mutable_push_config();
  public:
  const ::google::pubsub::v1::PushConfig& push_config() const;
  ::google::pubsub::v1::PushConfig* release_push_config();
  ::google::pubsub::v1::PushConfig* mutable_push_config();
  void set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config);
  void unsafe_arena_set_allocated_push_config(
      ::google::pubsub::v1::PushConfig* push_config);
  ::google::pubsub::v1::PushConfig* unsafe_arena_release_push_config();

  // .google.protobuf.Duration message_retention_duration = 8;
  bool has_message_retention_duration() const;
  void clear_message_retention_duration();
  static const int kMessageRetentionDurationFieldNumber = 8;
  private:
  void _slow_mutable_message_retention_duration();
  public:
  const ::google::protobuf::Duration& message_retention_duration() const;
  ::google::protobuf::Duration* release_message_retention_duration();
  ::google::protobuf::Duration* mutable_message_retention_duration();
  void set_allocated_message_retention_duration(::google::protobuf::Duration* message_retention_duration);
  void unsafe_arena_set_allocated_message_retention_duration(
      ::google::protobuf::Duration* message_retention_duration);
  ::google::protobuf::Duration* unsafe_arena_release_message_retention_duration();

  // int32 ack_deadline_seconds = 5;
  void clear_ack_deadline_seconds();
  static const int kAckDeadlineSecondsFieldNumber = 5;
  ::google::protobuf::int32 ack_deadline_seconds() const;
  void set_ack_deadline_seconds(::google::protobuf::int32 value);

  // bool retain_acked_messages = 7;
  void clear_retain_acked_messages();
  static const int kRetainAckedMessagesFieldNumber = 7;
  bool retain_acked_messages() const;
  void set_retain_acked_messages(bool value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.Subscription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      Subscription_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::pubsub::v1::PushConfig* push_config_;
  ::google::protobuf::Duration* message_retention_duration_;
  ::google::protobuf::int32 ack_deadline_seconds_;
  bool retain_acked_messages_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSubscriptionImpl();
};
// -------------------------------------------------------------------

class PushConfig_AttributesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PushConfig_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PushConfig_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PushConfig_AttributesEntry_DoNotUse();
  PushConfig_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PushConfig_AttributesEntry_DoNotUse& other);
  static const PushConfig_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PushConfig_AttributesEntry_DoNotUse*>(&_PushConfig_AttributesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PushConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PushConfig) */ {
 public:
  PushConfig();
  virtual ~PushConfig();

  PushConfig(const PushConfig& from);

  inline PushConfig& operator=(const PushConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushConfig(PushConfig&& from) noexcept
    : PushConfig() {
    *this = ::std::move(from);
  }

  inline PushConfig& operator=(PushConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PushConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushConfig* internal_default_instance() {
    return reinterpret_cast<const PushConfig*>(
               &_PushConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void UnsafeArenaSwap(PushConfig* other);
  void Swap(PushConfig* other);
  friend void swap(PushConfig& a, PushConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  PushConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PushConfig& from);
  void MergeFrom(const PushConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PushConfig* other);
  protected:
  explicit PushConfig(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> attributes = 2;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      attributes() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_attributes();

  // string push_endpoint = 1;
  void clear_push_endpoint();
  static const int kPushEndpointFieldNumber = 1;
  const ::std::string& push_endpoint() const;
  void set_push_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_push_endpoint(::std::string&& value);
  #endif
  void set_push_endpoint(const char* value);
  void set_push_endpoint(const char* value, size_t size);
  ::std::string* mutable_push_endpoint();
  ::std::string* release_push_endpoint();
  void set_allocated_push_endpoint(::std::string* push_endpoint);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_push_endpoint();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_push_endpoint(
      ::std::string* push_endpoint);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PushConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      PushConfig_AttributesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > attributes_;
  ::google::protobuf::internal::ArenaStringPtr push_endpoint_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPushConfigImpl();
};
// -------------------------------------------------------------------

class ReceivedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ReceivedMessage) */ {
 public:
  ReceivedMessage();
  virtual ~ReceivedMessage();

  ReceivedMessage(const ReceivedMessage& from);

  inline ReceivedMessage& operator=(const ReceivedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReceivedMessage(ReceivedMessage&& from) noexcept
    : ReceivedMessage() {
    *this = ::std::move(from);
  }

  inline ReceivedMessage& operator=(ReceivedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceivedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceivedMessage* internal_default_instance() {
    return reinterpret_cast<const ReceivedMessage*>(
               &_ReceivedMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void UnsafeArenaSwap(ReceivedMessage* other);
  void Swap(ReceivedMessage* other);
  friend void swap(ReceivedMessage& a, ReceivedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReceivedMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ReceivedMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReceivedMessage& from);
  void MergeFrom(const ReceivedMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReceivedMessage* other);
  protected:
  explicit ReceivedMessage(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ack_id = 1;
  void clear_ack_id();
  static const int kAckIdFieldNumber = 1;
  const ::std::string& ack_id() const;
  void set_ack_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ack_id(::std::string&& value);
  #endif
  void set_ack_id(const char* value);
  void set_ack_id(const char* value, size_t size);
  ::std::string* mutable_ack_id();
  ::std::string* release_ack_id();
  void set_allocated_ack_id(::std::string* ack_id);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_ack_id();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ack_id(
      ::std::string* ack_id);

  // .google.pubsub.v1.PubsubMessage message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  private:
  void _slow_mutable_message();
  public:
  const ::google::pubsub::v1::PubsubMessage& message() const;
  ::google::pubsub::v1::PubsubMessage* release_message();
  ::google::pubsub::v1::PubsubMessage* mutable_message();
  void set_allocated_message(::google::pubsub::v1::PubsubMessage* message);
  void unsafe_arena_set_allocated_message(
      ::google::pubsub::v1::PubsubMessage* message);
  ::google::pubsub::v1::PubsubMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ReceivedMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr ack_id_;
  ::google::pubsub::v1::PubsubMessage* message_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsReceivedMessageImpl();
};
// -------------------------------------------------------------------

class GetSubscriptionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.GetSubscriptionRequest) */ {
 public:
  GetSubscriptionRequest();
  virtual ~GetSubscriptionRequest();

  GetSubscriptionRequest(const GetSubscriptionRequest& from);

  inline GetSubscriptionRequest& operator=(const GetSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSubscriptionRequest(GetSubscriptionRequest&& from) noexcept
    : GetSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline GetSubscriptionRequest& operator=(GetSubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const GetSubscriptionRequest*>(
               &_GetSubscriptionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void UnsafeArenaSwap(GetSubscriptionRequest* other);
  void Swap(GetSubscriptionRequest* other);
  friend void swap(GetSubscriptionRequest& a, GetSubscriptionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSubscriptionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetSubscriptionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetSubscriptionRequest& from);
  void MergeFrom(const GetSubscriptionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetSubscriptionRequest* other);
  protected:
  explicit GetSubscriptionRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.GetSubscriptionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsGetSubscriptionRequestImpl();
};
// -------------------------------------------------------------------

class UpdateSubscriptionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.UpdateSubscriptionRequest) */ {
 public:
  UpdateSubscriptionRequest();
  virtual ~UpdateSubscriptionRequest();

  UpdateSubscriptionRequest(const UpdateSubscriptionRequest& from);

  inline UpdateSubscriptionRequest& operator=(const UpdateSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateSubscriptionRequest(UpdateSubscriptionRequest&& from) noexcept
    : UpdateSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSubscriptionRequest& operator=(UpdateSubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSubscriptionRequest*>(
               &_UpdateSubscriptionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void UnsafeArenaSwap(UpdateSubscriptionRequest* other);
  void Swap(UpdateSubscriptionRequest* other);
  friend void swap(UpdateSubscriptionRequest& a, UpdateSubscriptionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateSubscriptionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateSubscriptionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateSubscriptionRequest& from);
  void MergeFrom(const UpdateSubscriptionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateSubscriptionRequest* other);
  protected:
  explicit UpdateSubscriptionRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.pubsub.v1.Subscription subscription = 1;
  bool has_subscription() const;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  private:
  void _slow_mutable_subscription();
  public:
  const ::google::pubsub::v1::Subscription& subscription() const;
  ::google::pubsub::v1::Subscription* release_subscription();
  ::google::pubsub::v1::Subscription* mutable_subscription();
  void set_allocated_subscription(::google::pubsub::v1::Subscription* subscription);
  void unsafe_arena_set_allocated_subscription(
      ::google::pubsub::v1::Subscription* subscription);
  ::google::pubsub::v1::Subscription* unsafe_arena_release_subscription();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  private:
  void _slow_mutable_update_mask();
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);
  void unsafe_arena_set_allocated_update_mask(
      ::google::protobuf::FieldMask* update_mask);
  ::google::protobuf::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.UpdateSubscriptionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::pubsub::v1::Subscription* subscription_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsUpdateSubscriptionRequestImpl();
};
// -------------------------------------------------------------------

class ListSubscriptionsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSubscriptionsRequest) */ {
 public:
  ListSubscriptionsRequest();
  virtual ~ListSubscriptionsRequest();

  ListSubscriptionsRequest(const ListSubscriptionsRequest& from);

  inline ListSubscriptionsRequest& operator=(const ListSubscriptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListSubscriptionsRequest(ListSubscriptionsRequest&& from) noexcept
    : ListSubscriptionsRequest() {
    *this = ::std::move(from);
  }

  inline ListSubscriptionsRequest& operator=(ListSubscriptionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSubscriptionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSubscriptionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSubscriptionsRequest*>(
               &_ListSubscriptionsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void UnsafeArenaSwap(ListSubscriptionsRequest* other);
  void Swap(ListSubscriptionsRequest* other);
  friend void swap(ListSubscriptionsRequest& a, ListSubscriptionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListSubscriptionsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListSubscriptionsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListSubscriptionsRequest& from);
  void MergeFrom(const ListSubscriptionsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListSubscriptionsRequest* other);
  protected:
  explicit ListSubscriptionsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_project();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project(
      ::std::string* project);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSubscriptionsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSubscriptionsRequestImpl();
};
// -------------------------------------------------------------------

class ListSubscriptionsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSubscriptionsResponse) */ {
 public:
  ListSubscriptionsResponse();
  virtual ~ListSubscriptionsResponse();

  ListSubscriptionsResponse(const ListSubscriptionsResponse& from);

  inline ListSubscriptionsResponse& operator=(const ListSubscriptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListSubscriptionsResponse(ListSubscriptionsResponse&& from) noexcept
    : ListSubscriptionsResponse() {
    *this = ::std::move(from);
  }

  inline ListSubscriptionsResponse& operator=(ListSubscriptionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSubscriptionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSubscriptionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSubscriptionsResponse*>(
               &_ListSubscriptionsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void UnsafeArenaSwap(ListSubscriptionsResponse* other);
  void Swap(ListSubscriptionsResponse* other);
  friend void swap(ListSubscriptionsResponse& a, ListSubscriptionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListSubscriptionsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListSubscriptionsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListSubscriptionsResponse& from);
  void MergeFrom(const ListSubscriptionsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListSubscriptionsResponse* other);
  protected:
  explicit ListSubscriptionsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  int subscriptions_size() const;
  void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  const ::google::pubsub::v1::Subscription& subscriptions(int index) const;
  ::google::pubsub::v1::Subscription* mutable_subscriptions(int index);
  ::google::pubsub::v1::Subscription* add_subscriptions();
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Subscription >*
      mutable_subscriptions();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Subscription >&
      subscriptions() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSubscriptionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Subscription > subscriptions_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSubscriptionsResponseImpl();
};
// -------------------------------------------------------------------

class DeleteSubscriptionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DeleteSubscriptionRequest) */ {
 public:
  DeleteSubscriptionRequest();
  virtual ~DeleteSubscriptionRequest();

  DeleteSubscriptionRequest(const DeleteSubscriptionRequest& from);

  inline DeleteSubscriptionRequest& operator=(const DeleteSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteSubscriptionRequest(DeleteSubscriptionRequest&& from) noexcept
    : DeleteSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSubscriptionRequest& operator=(DeleteSubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSubscriptionRequest*>(
               &_DeleteSubscriptionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void UnsafeArenaSwap(DeleteSubscriptionRequest* other);
  void Swap(DeleteSubscriptionRequest* other);
  friend void swap(DeleteSubscriptionRequest& a, DeleteSubscriptionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteSubscriptionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteSubscriptionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteSubscriptionRequest& from);
  void MergeFrom(const DeleteSubscriptionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteSubscriptionRequest* other);
  protected:
  explicit DeleteSubscriptionRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DeleteSubscriptionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsDeleteSubscriptionRequestImpl();
};
// -------------------------------------------------------------------

class ModifyPushConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ModifyPushConfigRequest) */ {
 public:
  ModifyPushConfigRequest();
  virtual ~ModifyPushConfigRequest();

  ModifyPushConfigRequest(const ModifyPushConfigRequest& from);

  inline ModifyPushConfigRequest& operator=(const ModifyPushConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModifyPushConfigRequest(ModifyPushConfigRequest&& from) noexcept
    : ModifyPushConfigRequest() {
    *this = ::std::move(from);
  }

  inline ModifyPushConfigRequest& operator=(ModifyPushConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyPushConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyPushConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyPushConfigRequest*>(
               &_ModifyPushConfigRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void UnsafeArenaSwap(ModifyPushConfigRequest* other);
  void Swap(ModifyPushConfigRequest* other);
  friend void swap(ModifyPushConfigRequest& a, ModifyPushConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModifyPushConfigRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ModifyPushConfigRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModifyPushConfigRequest& from);
  void MergeFrom(const ModifyPushConfigRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModifyPushConfigRequest* other);
  protected:
  explicit ModifyPushConfigRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // .google.pubsub.v1.PushConfig push_config = 2;
  bool has_push_config() const;
  void clear_push_config();
  static const int kPushConfigFieldNumber = 2;
  private:
  void _slow_mutable_push_config();
  public:
  const ::google::pubsub::v1::PushConfig& push_config() const;
  ::google::pubsub::v1::PushConfig* release_push_config();
  ::google::pubsub::v1::PushConfig* mutable_push_config();
  void set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config);
  void unsafe_arena_set_allocated_push_config(
      ::google::pubsub::v1::PushConfig* push_config);
  ::google::pubsub::v1::PushConfig* unsafe_arena_release_push_config();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ModifyPushConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  ::google::pubsub::v1::PushConfig* push_config_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsModifyPushConfigRequestImpl();
};
// -------------------------------------------------------------------

class PullRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PullRequest) */ {
 public:
  PullRequest();
  virtual ~PullRequest();

  PullRequest(const PullRequest& from);

  inline PullRequest& operator=(const PullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PullRequest(PullRequest&& from) noexcept
    : PullRequest() {
    *this = ::std::move(from);
  }

  inline PullRequest& operator=(PullRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PullRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullRequest* internal_default_instance() {
    return reinterpret_cast<const PullRequest*>(
               &_PullRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void UnsafeArenaSwap(PullRequest* other);
  void Swap(PullRequest* other);
  friend void swap(PullRequest& a, PullRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PullRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PullRequest& from);
  void MergeFrom(const PullRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PullRequest* other);
  protected:
  explicit PullRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // bool return_immediately = 2;
  void clear_return_immediately();
  static const int kReturnImmediatelyFieldNumber = 2;
  bool return_immediately() const;
  void set_return_immediately(bool value);

  // int32 max_messages = 3;
  void clear_max_messages();
  static const int kMaxMessagesFieldNumber = 3;
  ::google::protobuf::int32 max_messages() const;
  void set_max_messages(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PullRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  bool return_immediately_;
  ::google::protobuf::int32 max_messages_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPullRequestImpl();
};
// -------------------------------------------------------------------

class PullResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.PullResponse) */ {
 public:
  PullResponse();
  virtual ~PullResponse();

  PullResponse(const PullResponse& from);

  inline PullResponse& operator=(const PullResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PullResponse(PullResponse&& from) noexcept
    : PullResponse() {
    *this = ::std::move(from);
  }

  inline PullResponse& operator=(PullResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const PullResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullResponse* internal_default_instance() {
    return reinterpret_cast<const PullResponse*>(
               &_PullResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void UnsafeArenaSwap(PullResponse* other);
  void Swap(PullResponse* other);
  friend void swap(PullResponse& a, PullResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PullResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PullResponse& from);
  void MergeFrom(const PullResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PullResponse* other);
  protected:
  explicit PullResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  int received_messages_size() const;
  void clear_received_messages();
  static const int kReceivedMessagesFieldNumber = 1;
  const ::google::pubsub::v1::ReceivedMessage& received_messages(int index) const;
  ::google::pubsub::v1::ReceivedMessage* mutable_received_messages(int index);
  ::google::pubsub::v1::ReceivedMessage* add_received_messages();
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
      mutable_received_messages();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
      received_messages() const;

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.PullResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage > received_messages_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsPullResponseImpl();
};
// -------------------------------------------------------------------

class ModifyAckDeadlineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ModifyAckDeadlineRequest) */ {
 public:
  ModifyAckDeadlineRequest();
  virtual ~ModifyAckDeadlineRequest();

  ModifyAckDeadlineRequest(const ModifyAckDeadlineRequest& from);

  inline ModifyAckDeadlineRequest& operator=(const ModifyAckDeadlineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModifyAckDeadlineRequest(ModifyAckDeadlineRequest&& from) noexcept
    : ModifyAckDeadlineRequest() {
    *this = ::std::move(from);
  }

  inline ModifyAckDeadlineRequest& operator=(ModifyAckDeadlineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyAckDeadlineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyAckDeadlineRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyAckDeadlineRequest*>(
               &_ModifyAckDeadlineRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void UnsafeArenaSwap(ModifyAckDeadlineRequest* other);
  void Swap(ModifyAckDeadlineRequest* other);
  friend void swap(ModifyAckDeadlineRequest& a, ModifyAckDeadlineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModifyAckDeadlineRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ModifyAckDeadlineRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModifyAckDeadlineRequest& from);
  void MergeFrom(const ModifyAckDeadlineRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModifyAckDeadlineRequest* other);
  protected:
  explicit ModifyAckDeadlineRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ack_ids = 4;
  int ack_ids_size() const;
  void clear_ack_ids();
  static const int kAckIdsFieldNumber = 4;
  const ::std::string& ack_ids(int index) const;
  ::std::string* mutable_ack_ids(int index);
  void set_ack_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ack_ids(int index, ::std::string&& value);
  #endif
  void set_ack_ids(int index, const char* value);
  void set_ack_ids(int index, const char* value, size_t size);
  ::std::string* add_ack_ids();
  void add_ack_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_ack_ids(::std::string&& value);
  #endif
  void add_ack_ids(const char* value);
  void add_ack_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ack_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ack_ids();

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // int32 ack_deadline_seconds = 3;
  void clear_ack_deadline_seconds();
  static const int kAckDeadlineSecondsFieldNumber = 3;
  ::google::protobuf::int32 ack_deadline_seconds() const;
  void set_ack_deadline_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ModifyAckDeadlineRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ack_ids_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  ::google::protobuf::int32 ack_deadline_seconds_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsModifyAckDeadlineRequestImpl();
};
// -------------------------------------------------------------------

class AcknowledgeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.AcknowledgeRequest) */ {
 public:
  AcknowledgeRequest();
  virtual ~AcknowledgeRequest();

  AcknowledgeRequest(const AcknowledgeRequest& from);

  inline AcknowledgeRequest& operator=(const AcknowledgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcknowledgeRequest(AcknowledgeRequest&& from) noexcept
    : AcknowledgeRequest() {
    *this = ::std::move(from);
  }

  inline AcknowledgeRequest& operator=(AcknowledgeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcknowledgeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcknowledgeRequest* internal_default_instance() {
    return reinterpret_cast<const AcknowledgeRequest*>(
               &_AcknowledgeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void UnsafeArenaSwap(AcknowledgeRequest* other);
  void Swap(AcknowledgeRequest* other);
  friend void swap(AcknowledgeRequest& a, AcknowledgeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcknowledgeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AcknowledgeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcknowledgeRequest& from);
  void MergeFrom(const AcknowledgeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcknowledgeRequest* other);
  protected:
  explicit AcknowledgeRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ack_ids = 2;
  int ack_ids_size() const;
  void clear_ack_ids();
  static const int kAckIdsFieldNumber = 2;
  const ::std::string& ack_ids(int index) const;
  ::std::string* mutable_ack_ids(int index);
  void set_ack_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ack_ids(int index, ::std::string&& value);
  #endif
  void set_ack_ids(int index, const char* value);
  void set_ack_ids(int index, const char* value, size_t size);
  ::std::string* add_ack_ids();
  void add_ack_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_ack_ids(::std::string&& value);
  #endif
  void add_ack_ids(const char* value);
  void add_ack_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ack_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ack_ids();

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.AcknowledgeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ack_ids_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsAcknowledgeRequestImpl();
};
// -------------------------------------------------------------------

class StreamingPullRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.StreamingPullRequest) */ {
 public:
  StreamingPullRequest();
  virtual ~StreamingPullRequest();

  StreamingPullRequest(const StreamingPullRequest& from);

  inline StreamingPullRequest& operator=(const StreamingPullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamingPullRequest(StreamingPullRequest&& from) noexcept
    : StreamingPullRequest() {
    *this = ::std::move(from);
  }

  inline StreamingPullRequest& operator=(StreamingPullRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamingPullRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingPullRequest* internal_default_instance() {
    return reinterpret_cast<const StreamingPullRequest*>(
               &_StreamingPullRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void UnsafeArenaSwap(StreamingPullRequest* other);
  void Swap(StreamingPullRequest* other);
  friend void swap(StreamingPullRequest& a, StreamingPullRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamingPullRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamingPullRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamingPullRequest& from);
  void MergeFrom(const StreamingPullRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamingPullRequest* other);
  protected:
  explicit StreamingPullRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ack_ids = 2;
  int ack_ids_size() const;
  void clear_ack_ids();
  static const int kAckIdsFieldNumber = 2;
  const ::std::string& ack_ids(int index) const;
  ::std::string* mutable_ack_ids(int index);
  void set_ack_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ack_ids(int index, ::std::string&& value);
  #endif
  void set_ack_ids(int index, const char* value);
  void set_ack_ids(int index, const char* value, size_t size);
  ::std::string* add_ack_ids();
  void add_ack_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_ack_ids(::std::string&& value);
  #endif
  void add_ack_ids(const char* value);
  void add_ack_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ack_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ack_ids();

  // repeated int32 modify_deadline_seconds = 3;
  int modify_deadline_seconds_size() const;
  void clear_modify_deadline_seconds();
  static const int kModifyDeadlineSecondsFieldNumber = 3;
  ::google::protobuf::int32 modify_deadline_seconds(int index) const;
  void set_modify_deadline_seconds(int index, ::google::protobuf::int32 value);
  void add_modify_deadline_seconds(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      modify_deadline_seconds() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_modify_deadline_seconds();

  // repeated string modify_deadline_ack_ids = 4;
  int modify_deadline_ack_ids_size() const;
  void clear_modify_deadline_ack_ids();
  static const int kModifyDeadlineAckIdsFieldNumber = 4;
  const ::std::string& modify_deadline_ack_ids(int index) const;
  ::std::string* mutable_modify_deadline_ack_ids(int index);
  void set_modify_deadline_ack_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_modify_deadline_ack_ids(int index, ::std::string&& value);
  #endif
  void set_modify_deadline_ack_ids(int index, const char* value);
  void set_modify_deadline_ack_ids(int index, const char* value, size_t size);
  ::std::string* add_modify_deadline_ack_ids();
  void add_modify_deadline_ack_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_modify_deadline_ack_ids(::std::string&& value);
  #endif
  void add_modify_deadline_ack_ids(const char* value);
  void add_modify_deadline_ack_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& modify_deadline_ack_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_modify_deadline_ack_ids();

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // int32 stream_ack_deadline_seconds = 5;
  void clear_stream_ack_deadline_seconds();
  static const int kStreamAckDeadlineSecondsFieldNumber = 5;
  ::google::protobuf::int32 stream_ack_deadline_seconds() const;
  void set_stream_ack_deadline_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.StreamingPullRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ack_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > modify_deadline_seconds_;
  mutable int _modify_deadline_seconds_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> modify_deadline_ack_ids_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  ::google::protobuf::int32 stream_ack_deadline_seconds_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsStreamingPullRequestImpl();
};
// -------------------------------------------------------------------

class StreamingPullResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.StreamingPullResponse) */ {
 public:
  StreamingPullResponse();
  virtual ~StreamingPullResponse();

  StreamingPullResponse(const StreamingPullResponse& from);

  inline StreamingPullResponse& operator=(const StreamingPullResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StreamingPullResponse(StreamingPullResponse&& from) noexcept
    : StreamingPullResponse() {
    *this = ::std::move(from);
  }

  inline StreamingPullResponse& operator=(StreamingPullResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamingPullResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StreamingPullResponse* internal_default_instance() {
    return reinterpret_cast<const StreamingPullResponse*>(
               &_StreamingPullResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void UnsafeArenaSwap(StreamingPullResponse* other);
  void Swap(StreamingPullResponse* other);
  friend void swap(StreamingPullResponse& a, StreamingPullResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StreamingPullResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  StreamingPullResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StreamingPullResponse& from);
  void MergeFrom(const StreamingPullResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StreamingPullResponse* other);
  protected:
  explicit StreamingPullResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  int received_messages_size() const;
  void clear_received_messages();
  static const int kReceivedMessagesFieldNumber = 1;
  const ::google::pubsub::v1::ReceivedMessage& received_messages(int index) const;
  ::google::pubsub::v1::ReceivedMessage* mutable_received_messages(int index);
  ::google::pubsub::v1::ReceivedMessage* add_received_messages();
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
      mutable_received_messages();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
      received_messages() const;

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.StreamingPullResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage > received_messages_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsStreamingPullResponseImpl();
};
// -------------------------------------------------------------------

class CreateSnapshotRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.CreateSnapshotRequest) */ {
 public:
  CreateSnapshotRequest();
  virtual ~CreateSnapshotRequest();

  CreateSnapshotRequest(const CreateSnapshotRequest& from);

  inline CreateSnapshotRequest& operator=(const CreateSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateSnapshotRequest(CreateSnapshotRequest&& from) noexcept
    : CreateSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline CreateSnapshotRequest& operator=(CreateSnapshotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSnapshotRequest*>(
               &_CreateSnapshotRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void UnsafeArenaSwap(CreateSnapshotRequest* other);
  void Swap(CreateSnapshotRequest* other);
  friend void swap(CreateSnapshotRequest& a, CreateSnapshotRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateSnapshotRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  CreateSnapshotRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CreateSnapshotRequest& from);
  void MergeFrom(const CreateSnapshotRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CreateSnapshotRequest* other);
  protected:
  explicit CreateSnapshotRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string subscription = 2;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 2;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.CreateSnapshotRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsCreateSnapshotRequestImpl();
};
// -------------------------------------------------------------------

class UpdateSnapshotRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.UpdateSnapshotRequest) */ {
 public:
  UpdateSnapshotRequest();
  virtual ~UpdateSnapshotRequest();

  UpdateSnapshotRequest(const UpdateSnapshotRequest& from);

  inline UpdateSnapshotRequest& operator=(const UpdateSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateSnapshotRequest(UpdateSnapshotRequest&& from) noexcept
    : UpdateSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSnapshotRequest& operator=(UpdateSnapshotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSnapshotRequest*>(
               &_UpdateSnapshotRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void UnsafeArenaSwap(UpdateSnapshotRequest* other);
  void Swap(UpdateSnapshotRequest* other);
  friend void swap(UpdateSnapshotRequest& a, UpdateSnapshotRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateSnapshotRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  UpdateSnapshotRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const UpdateSnapshotRequest& from);
  void MergeFrom(const UpdateSnapshotRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(UpdateSnapshotRequest* other);
  protected:
  explicit UpdateSnapshotRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.pubsub.v1.Snapshot snapshot = 1;
  bool has_snapshot() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 1;
  private:
  void _slow_mutable_snapshot();
  public:
  const ::google::pubsub::v1::Snapshot& snapshot() const;
  ::google::pubsub::v1::Snapshot* release_snapshot();
  ::google::pubsub::v1::Snapshot* mutable_snapshot();
  void set_allocated_snapshot(::google::pubsub::v1::Snapshot* snapshot);
  void unsafe_arena_set_allocated_snapshot(
      ::google::pubsub::v1::Snapshot* snapshot);
  ::google::pubsub::v1::Snapshot* unsafe_arena_release_snapshot();

  // .google.protobuf.FieldMask update_mask = 2;
  bool has_update_mask() const;
  void clear_update_mask();
  static const int kUpdateMaskFieldNumber = 2;
  private:
  void _slow_mutable_update_mask();
  public:
  const ::google::protobuf::FieldMask& update_mask() const;
  ::google::protobuf::FieldMask* release_update_mask();
  ::google::protobuf::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::google::protobuf::FieldMask* update_mask);
  void unsafe_arena_set_allocated_update_mask(
      ::google::protobuf::FieldMask* update_mask);
  ::google::protobuf::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.UpdateSnapshotRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::pubsub::v1::Snapshot* snapshot_;
  ::google::protobuf::FieldMask* update_mask_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsUpdateSnapshotRequestImpl();
};
// -------------------------------------------------------------------

class Snapshot_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Snapshot_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<Snapshot_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Snapshot_LabelsEntry_DoNotUse();
  Snapshot_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Snapshot_LabelsEntry_DoNotUse& other);
  static const Snapshot_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Snapshot_LabelsEntry_DoNotUse*>(&_Snapshot_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Snapshot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.Snapshot) */ {
 public:
  Snapshot();
  virtual ~Snapshot();

  Snapshot(const Snapshot& from);

  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Snapshot(Snapshot&& from) noexcept
    : Snapshot() {
    *this = ::std::move(from);
  }

  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const Snapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
               &_Snapshot_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void UnsafeArenaSwap(Snapshot* other);
  void Swap(Snapshot* other);
  friend void swap(Snapshot& a, Snapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Snapshot* New() const PROTOBUF_FINAL { return New(NULL); }

  Snapshot* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Snapshot& from);
  void MergeFrom(const Snapshot& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Snapshot* other);
  protected:
  explicit Snapshot(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> labels = 4;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_name();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      ::std::string* name);

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_topic();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_topic(
      ::std::string* topic);

  // .google.protobuf.Timestamp expire_time = 3;
  bool has_expire_time() const;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 3;
  private:
  void _slow_mutable_expire_time();
  public:
  const ::google::protobuf::Timestamp& expire_time() const;
  ::google::protobuf::Timestamp* release_expire_time();
  ::google::protobuf::Timestamp* mutable_expire_time();
  void set_allocated_expire_time(::google::protobuf::Timestamp* expire_time);
  void unsafe_arena_set_allocated_expire_time(
      ::google::protobuf::Timestamp* expire_time);
  ::google::protobuf::Timestamp* unsafe_arena_release_expire_time();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.Snapshot)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::MapField<
      Snapshot_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::Timestamp* expire_time_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSnapshotImpl();
};
// -------------------------------------------------------------------

class ListSnapshotsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSnapshotsRequest) */ {
 public:
  ListSnapshotsRequest();
  virtual ~ListSnapshotsRequest();

  ListSnapshotsRequest(const ListSnapshotsRequest& from);

  inline ListSnapshotsRequest& operator=(const ListSnapshotsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListSnapshotsRequest(ListSnapshotsRequest&& from) noexcept
    : ListSnapshotsRequest() {
    *this = ::std::move(from);
  }

  inline ListSnapshotsRequest& operator=(ListSnapshotsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSnapshotsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSnapshotsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSnapshotsRequest*>(
               &_ListSnapshotsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void UnsafeArenaSwap(ListSnapshotsRequest* other);
  void Swap(ListSnapshotsRequest* other);
  friend void swap(ListSnapshotsRequest& a, ListSnapshotsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListSnapshotsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListSnapshotsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListSnapshotsRequest& from);
  void MergeFrom(const ListSnapshotsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListSnapshotsRequest* other);
  protected:
  explicit ListSnapshotsRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_project();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_project(
      ::std::string* project);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      ::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSnapshotsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSnapshotsRequestImpl();
};
// -------------------------------------------------------------------

class ListSnapshotsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.ListSnapshotsResponse) */ {
 public:
  ListSnapshotsResponse();
  virtual ~ListSnapshotsResponse();

  ListSnapshotsResponse(const ListSnapshotsResponse& from);

  inline ListSnapshotsResponse& operator=(const ListSnapshotsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListSnapshotsResponse(ListSnapshotsResponse&& from) noexcept
    : ListSnapshotsResponse() {
    *this = ::std::move(from);
  }

  inline ListSnapshotsResponse& operator=(ListSnapshotsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSnapshotsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSnapshotsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSnapshotsResponse*>(
               &_ListSnapshotsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void UnsafeArenaSwap(ListSnapshotsResponse* other);
  void Swap(ListSnapshotsResponse* other);
  friend void swap(ListSnapshotsResponse& a, ListSnapshotsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListSnapshotsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListSnapshotsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListSnapshotsResponse& from);
  void MergeFrom(const ListSnapshotsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListSnapshotsResponse* other);
  protected:
  explicit ListSnapshotsResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1.Snapshot snapshots = 1;
  int snapshots_size() const;
  void clear_snapshots();
  static const int kSnapshotsFieldNumber = 1;
  const ::google::pubsub::v1::Snapshot& snapshots(int index) const;
  ::google::pubsub::v1::Snapshot* mutable_snapshots(int index);
  ::google::pubsub::v1::Snapshot* add_snapshots();
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Snapshot >*
      mutable_snapshots();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Snapshot >&
      snapshots() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_next_page_token();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      ::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.ListSnapshotsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Snapshot > snapshots_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsListSnapshotsResponseImpl();
};
// -------------------------------------------------------------------

class DeleteSnapshotRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.DeleteSnapshotRequest) */ {
 public:
  DeleteSnapshotRequest();
  virtual ~DeleteSnapshotRequest();

  DeleteSnapshotRequest(const DeleteSnapshotRequest& from);

  inline DeleteSnapshotRequest& operator=(const DeleteSnapshotRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteSnapshotRequest(DeleteSnapshotRequest&& from) noexcept
    : DeleteSnapshotRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSnapshotRequest& operator=(DeleteSnapshotRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSnapshotRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSnapshotRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSnapshotRequest*>(
               &_DeleteSnapshotRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void UnsafeArenaSwap(DeleteSnapshotRequest* other);
  void Swap(DeleteSnapshotRequest* other);
  friend void swap(DeleteSnapshotRequest& a, DeleteSnapshotRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteSnapshotRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteSnapshotRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteSnapshotRequest& from);
  void MergeFrom(const DeleteSnapshotRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteSnapshotRequest* other);
  protected:
  explicit DeleteSnapshotRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string snapshot = 1;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 1;
  const ::std::string& snapshot() const;
  void set_snapshot(const ::std::string& value);
  #if LANG_CXX11
  void set_snapshot(::std::string&& value);
  #endif
  void set_snapshot(const char* value);
  void set_snapshot(const char* value, size_t size);
  ::std::string* mutable_snapshot();
  ::std::string* release_snapshot();
  void set_allocated_snapshot(::std::string* snapshot);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_snapshot();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snapshot(
      ::std::string* snapshot);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.DeleteSnapshotRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr snapshot_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsDeleteSnapshotRequestImpl();
};
// -------------------------------------------------------------------

class SeekRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.SeekRequest) */ {
 public:
  SeekRequest();
  virtual ~SeekRequest();

  SeekRequest(const SeekRequest& from);

  inline SeekRequest& operator=(const SeekRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeekRequest(SeekRequest&& from) noexcept
    : SeekRequest() {
    *this = ::std::move(from);
  }

  inline SeekRequest& operator=(SeekRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeekRequest& default_instance();

  enum TargetCase {
    kTime = 2,
    kSnapshot = 3,
    TARGET_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeekRequest* internal_default_instance() {
    return reinterpret_cast<const SeekRequest*>(
               &_SeekRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void UnsafeArenaSwap(SeekRequest* other);
  void Swap(SeekRequest* other);
  friend void swap(SeekRequest& a, SeekRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeekRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  SeekRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeekRequest& from);
  void MergeFrom(const SeekRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeekRequest* other);
  protected:
  explicit SeekRequest(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_subscription();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_subscription(
      ::std::string* subscription);

  // .google.protobuf.Timestamp time = 2;
  bool has_time() const;
  void clear_time();
  static const int kTimeFieldNumber = 2;
  private:
  void _slow_mutable_time();
  public:
  const ::google::protobuf::Timestamp& time() const;
  ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* time);
  void unsafe_arena_set_allocated_time(
      ::google::protobuf::Timestamp* time);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  // string snapshot = 3;
  private:
  bool has_snapshot() const;
  public:
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 3;
  const ::std::string& snapshot() const;
  void set_snapshot(const ::std::string& value);
  #if LANG_CXX11
  void set_snapshot(::std::string&& value);
  #endif
  void set_snapshot(const char* value);
  void set_snapshot(const char* value, size_t size);
  ::std::string* mutable_snapshot();
  ::std::string* release_snapshot();
  void set_allocated_snapshot(::std::string* snapshot);
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  ::std::string* unsafe_arena_release_snapshot();
  PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_snapshot(
      ::std::string* snapshot);

  TargetCase target_case() const;
  // @@protoc_insertion_point(class_scope:google.pubsub.v1.SeekRequest)
 private:
  void set_has_time();
  void set_has_snapshot();

  inline bool has_target() const;
  void clear_target();
  inline void clear_has_target();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  union TargetUnion {
    TargetUnion() {}
    ::google::protobuf::Timestamp* time_;
    ::google::protobuf::internal::ArenaStringPtr snapshot_;
  } target_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSeekRequestImpl();
};
// -------------------------------------------------------------------

class SeekResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1.SeekResponse) */ {
 public:
  SeekResponse();
  virtual ~SeekResponse();

  SeekResponse(const SeekResponse& from);

  inline SeekResponse& operator=(const SeekResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SeekResponse(SeekResponse&& from) noexcept
    : SeekResponse() {
    *this = ::std::move(from);
  }

  inline SeekResponse& operator=(SeekResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline ::google::protobuf::Arena* GetArena() const PROTOBUF_FINAL {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const PROTOBUF_FINAL {
    return MaybeArenaPtr();
  }
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeekResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SeekResponse* internal_default_instance() {
    return reinterpret_cast<const SeekResponse*>(
               &_SeekResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void UnsafeArenaSwap(SeekResponse* other);
  void Swap(SeekResponse* other);
  friend void swap(SeekResponse& a, SeekResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SeekResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  SeekResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const SeekResponse& from);
  void MergeFrom(const SeekResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(SeekResponse* other);
  protected:
  explicit SeekResponse(::google::protobuf::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::google::protobuf::Arena* arena);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.pubsub.v1.SeekResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1_2fpubsub_2eproto::InitDefaultsSeekResponseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Topic

// string name = 1;
inline void Topic::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Topic::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Topic.name)
  return name_.Get();
}
inline void Topic::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Topic.name)
}
#if LANG_CXX11
inline void Topic::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.Topic.name)
}
#endif
inline void Topic::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Topic.name)
}
inline void Topic::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Topic.name)
}
inline ::std::string* Topic::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Topic.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Topic::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Topic.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Topic::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Topic.name)
}
inline ::std::string* Topic::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Topic.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Topic::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Topic.name)
}

// map<string, string> labels = 2;
inline int Topic::labels_size() const {
  return labels_.size();
}
inline void Topic::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Topic::labels() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.Topic.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Topic::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.Topic.labels)
  return labels_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PubsubMessage

// bytes data = 1;
inline void PubsubMessage::clear_data() {
  data_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PubsubMessage::data() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.data)
  return data_.Get();
}
inline void PubsubMessage::set_data(const ::std::string& value) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PubsubMessage.data)
}
#if LANG_CXX11
inline void PubsubMessage::set_data(::std::string&& value) {
  
  data_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.PubsubMessage.data)
}
#endif
inline void PubsubMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PubsubMessage.data)
}
inline void PubsubMessage::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PubsubMessage.data)
}
inline ::std::string* PubsubMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.data)
  return data_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PubsubMessage::release_data() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.data)
  
  return data_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PubsubMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.data)
}
inline ::std::string* PubsubMessage::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PubsubMessage.data)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return data_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PubsubMessage::unsafe_arena_set_allocated_data(
    ::std::string* data) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (data != NULL) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      data, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PubsubMessage.data)
}

// map<string, string> attributes = 2;
inline int PubsubMessage::attributes_size() const {
  return attributes_.size();
}
inline void PubsubMessage::clear_attributes() {
  attributes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
PubsubMessage::attributes() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.PubsubMessage.attributes)
  return attributes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
PubsubMessage::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.PubsubMessage.attributes)
  return attributes_.MutableMap();
}

// string message_id = 3;
inline void PubsubMessage::clear_message_id() {
  message_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PubsubMessage::message_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.message_id)
  return message_id_.Get();
}
inline void PubsubMessage::set_message_id(const ::std::string& value) {
  
  message_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PubsubMessage.message_id)
}
#if LANG_CXX11
inline void PubsubMessage::set_message_id(::std::string&& value) {
  
  message_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.PubsubMessage.message_id)
}
#endif
inline void PubsubMessage::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PubsubMessage.message_id)
}
inline void PubsubMessage::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PubsubMessage.message_id)
}
inline ::std::string* PubsubMessage::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.message_id)
  return message_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PubsubMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.message_id)
  
  return message_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PubsubMessage::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.message_id)
}
inline ::std::string* PubsubMessage::unsafe_arena_release_message_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PubsubMessage.message_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return message_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PubsubMessage::unsafe_arena_set_allocated_message_id(
    ::std::string* message_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      message_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PubsubMessage.message_id)
}

// .google.protobuf.Timestamp publish_time = 4;
inline bool PubsubMessage::has_publish_time() const {
  return this != internal_default_instance() && publish_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& PubsubMessage::publish_time() const {
  const ::google::protobuf::Timestamp* p = publish_time_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PubsubMessage.publish_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* PubsubMessage::release_publish_time() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PubsubMessage.publish_time)
  
  ::google::protobuf::Timestamp* temp = publish_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  publish_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PubsubMessage::unsafe_arena_release_publish_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PubsubMessage.publish_time)
  
  ::google::protobuf::Timestamp* temp = publish_time_;
  publish_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* PubsubMessage::mutable_publish_time() {
  
  if (publish_time_ == NULL) {
    _slow_mutable_publish_time();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PubsubMessage.publish_time)
  return publish_time_;
}
inline void PubsubMessage::set_allocated_publish_time(::google::protobuf::Timestamp* publish_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(publish_time_);
  }
  if (publish_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(publish_time)->GetArena();
    if (message_arena != submessage_arena) {
      publish_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, publish_time, submessage_arena);
    }
    
  } else {
    
  }
  publish_time_ = publish_time;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PubsubMessage.publish_time)
}

// -------------------------------------------------------------------

// GetTopicRequest

// string topic = 1;
inline void GetTopicRequest::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetTopicRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.GetTopicRequest.topic)
  return topic_.Get();
}
inline void GetTopicRequest::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.GetTopicRequest.topic)
}
#if LANG_CXX11
inline void GetTopicRequest::set_topic(::std::string&& value) {
  
  topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.GetTopicRequest.topic)
}
#endif
inline void GetTopicRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.GetTopicRequest.topic)
}
inline void GetTopicRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.GetTopicRequest.topic)
}
inline ::std::string* GetTopicRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.GetTopicRequest.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetTopicRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.GetTopicRequest.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetTopicRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.GetTopicRequest.topic)
}
inline ::std::string* GetTopicRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.GetTopicRequest.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetTopicRequest::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.GetTopicRequest.topic)
}

// -------------------------------------------------------------------

// UpdateTopicRequest

// .google.pubsub.v1.Topic topic = 1;
inline bool UpdateTopicRequest::has_topic() const {
  return this != internal_default_instance() && topic_ != NULL;
}
inline void UpdateTopicRequest::clear_topic() {
  if (GetArenaNoVirtual() == NULL && topic_ != NULL) {
    delete topic_;
  }
  topic_ = NULL;
}
inline const ::google::pubsub::v1::Topic& UpdateTopicRequest::topic() const {
  const ::google::pubsub::v1::Topic* p = topic_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateTopicRequest.topic)
  return p != NULL ? *p : *reinterpret_cast<const ::google::pubsub::v1::Topic*>(
      &::google::pubsub::v1::_Topic_default_instance_);
}
inline ::google::pubsub::v1::Topic* UpdateTopicRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateTopicRequest.topic)
  
  ::google::pubsub::v1::Topic* temp = topic_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  topic_ = NULL;
  return temp;
}
inline ::google::pubsub::v1::Topic* UpdateTopicRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.UpdateTopicRequest.topic)
  
  ::google::pubsub::v1::Topic* temp = topic_;
  topic_ = NULL;
  return temp;
}
inline ::google::pubsub::v1::Topic* UpdateTopicRequest::mutable_topic() {
  
  if (topic_ == NULL) {
    _slow_mutable_topic();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateTopicRequest.topic)
  return topic_;
}
inline void UpdateTopicRequest::set_allocated_topic(::google::pubsub::v1::Topic* topic) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete topic_;
  }
  if (topic) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(topic);
    if (message_arena != submessage_arena) {
      topic = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, topic, submessage_arena);
    }
    
  } else {
    
  }
  topic_ = topic;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateTopicRequest.topic)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateTopicRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateTopicRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateTopicRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateTopicRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateTopicRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateTopicRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.UpdateTopicRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateTopicRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    _slow_mutable_update_mask();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateTopicRequest.update_mask)
  return update_mask_;
}
inline void UpdateTopicRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateTopicRequest.update_mask)
}

// -------------------------------------------------------------------

// PublishRequest

// string topic = 1;
inline void PublishRequest::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PublishRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PublishRequest.topic)
  return topic_.Get();
}
inline void PublishRequest::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PublishRequest.topic)
}
#if LANG_CXX11
inline void PublishRequest::set_topic(::std::string&& value) {
  
  topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.PublishRequest.topic)
}
#endif
inline void PublishRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PublishRequest.topic)
}
inline void PublishRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PublishRequest.topic)
}
inline ::std::string* PublishRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PublishRequest.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PublishRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PublishRequest.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PublishRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PublishRequest.topic)
}
inline ::std::string* PublishRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PublishRequest.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PublishRequest::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PublishRequest.topic)
}

// repeated .google.pubsub.v1.PubsubMessage messages = 2;
inline int PublishRequest::messages_size() const {
  return messages_.size();
}
inline void PublishRequest::clear_messages() {
  messages_.Clear();
}
inline const ::google::pubsub::v1::PubsubMessage& PublishRequest::messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PublishRequest.messages)
  return messages_.Get(index);
}
inline ::google::pubsub::v1::PubsubMessage* PublishRequest::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PublishRequest.messages)
  return messages_.Mutable(index);
}
inline ::google::pubsub::v1::PubsubMessage* PublishRequest::add_messages() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PublishRequest.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >*
PublishRequest::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.PublishRequest.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::PubsubMessage >&
PublishRequest::messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.PublishRequest.messages)
  return messages_;
}

// -------------------------------------------------------------------

// PublishResponse

// repeated string message_ids = 1;
inline int PublishResponse::message_ids_size() const {
  return message_ids_.size();
}
inline void PublishResponse::clear_message_ids() {
  message_ids_.Clear();
}
inline const ::std::string& PublishResponse::message_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PublishResponse.message_ids)
  return message_ids_.Get(index);
}
inline ::std::string* PublishResponse::mutable_message_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PublishResponse.message_ids)
  return message_ids_.Mutable(index);
}
inline void PublishResponse::set_message_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PublishResponse.message_ids)
  message_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PublishResponse::set_message_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PublishResponse.message_ids)
  message_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PublishResponse::set_message_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  message_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PublishResponse.message_ids)
}
inline void PublishResponse::set_message_ids(int index, const char* value, size_t size) {
  message_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PublishResponse.message_ids)
}
inline ::std::string* PublishResponse::add_message_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.PublishResponse.message_ids)
  return message_ids_.Add();
}
inline void PublishResponse::add_message_ids(const ::std::string& value) {
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PublishResponse.message_ids)
}
#if LANG_CXX11
inline void PublishResponse::add_message_ids(::std::string&& value) {
  message_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PublishResponse.message_ids)
}
#endif
inline void PublishResponse::add_message_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.PublishResponse.message_ids)
}
inline void PublishResponse::add_message_ids(const char* value, size_t size) {
  message_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.PublishResponse.message_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PublishResponse::message_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.PublishResponse.message_ids)
  return message_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PublishResponse::mutable_message_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.PublishResponse.message_ids)
  return &message_ids_;
}

// -------------------------------------------------------------------

// ListTopicsRequest

// string project = 1;
inline void ListTopicsRequest::clear_project() {
  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicsRequest::project() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsRequest.project)
  return project_.Get();
}
inline void ListTopicsRequest::set_project(const ::std::string& value) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsRequest.project)
}
#if LANG_CXX11
inline void ListTopicsRequest::set_project(::std::string&& value) {
  
  project_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicsRequest.project)
}
#endif
inline void ListTopicsRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicsRequest.project)
}
inline void ListTopicsRequest::set_project(const char* value,
    size_t size) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicsRequest.project)
}
inline ::std::string* ListTopicsRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsRequest.project)
  return project_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicsRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicsRequest.project)
  
  return project_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicsRequest::set_allocated_project(::std::string* project) {
  if (project != NULL) {
    
  } else {
    
  }
  project_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicsRequest.project)
}
inline ::std::string* ListTopicsRequest::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicsRequest.project)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicsRequest::unsafe_arena_set_allocated_project(
    ::std::string* project) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project != NULL) {
    
  } else {
    
  }
  project_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicsRequest.project)
}

// int32 page_size = 2;
inline void ListTopicsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListTopicsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsRequest.page_size)
  return page_size_;
}
inline void ListTopicsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsRequest.page_size)
}

// string page_token = 3;
inline void ListTopicsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsRequest.page_token)
  return page_token_.Get();
}
inline void ListTopicsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsRequest.page_token)
}
#if LANG_CXX11
inline void ListTopicsRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicsRequest.page_token)
}
#endif
inline void ListTopicsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicsRequest.page_token)
}
inline void ListTopicsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicsRequest.page_token)
}
inline ::std::string* ListTopicsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicsRequest.page_token)
}
inline ::std::string* ListTopicsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicsRequest.page_token)
}

// -------------------------------------------------------------------

// ListTopicsResponse

// repeated .google.pubsub.v1.Topic topics = 1;
inline int ListTopicsResponse::topics_size() const {
  return topics_.size();
}
inline void ListTopicsResponse::clear_topics() {
  topics_.Clear();
}
inline const ::google::pubsub::v1::Topic& ListTopicsResponse::topics(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsResponse.topics)
  return topics_.Get(index);
}
inline ::google::pubsub::v1::Topic* ListTopicsResponse::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsResponse.topics)
  return topics_.Mutable(index);
}
inline ::google::pubsub::v1::Topic* ListTopicsResponse::add_topics() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicsResponse.topics)
  return topics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Topic >*
ListTopicsResponse::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListTopicsResponse.topics)
  return &topics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Topic >&
ListTopicsResponse::topics() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListTopicsResponse.topics)
  return topics_;
}

// string next_page_token = 2;
inline void ListTopicsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListTopicsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListTopicsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
#endif
inline void ListTopicsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
inline void ListTopicsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
inline ::std::string* ListTopicsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicsResponse.next_page_token)
}
inline ::std::string* ListTopicsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListTopicSubscriptionsRequest

// string topic = 1;
inline void ListTopicSubscriptionsRequest::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicSubscriptionsRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  return topic_.Get();
}
inline void ListTopicSubscriptionsRequest::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
#if LANG_CXX11
inline void ListTopicSubscriptionsRequest::set_topic(::std::string&& value) {
  
  topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
#endif
inline void ListTopicSubscriptionsRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
inline void ListTopicSubscriptionsRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
inline ::std::string* ListTopicSubscriptionsRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicSubscriptionsRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicSubscriptionsRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}
inline ::std::string* ListTopicSubscriptionsRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicSubscriptionsRequest::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.topic)
}

// int32 page_size = 2;
inline void ListTopicSubscriptionsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListTopicSubscriptionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsRequest.page_size)
  return page_size_;
}
inline void ListTopicSubscriptionsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsRequest.page_size)
}

// string page_token = 3;
inline void ListTopicSubscriptionsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicSubscriptionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  return page_token_.Get();
}
inline void ListTopicSubscriptionsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
#if LANG_CXX11
inline void ListTopicSubscriptionsRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
#endif
inline void ListTopicSubscriptionsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
inline void ListTopicSubscriptionsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
inline ::std::string* ListTopicSubscriptionsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicSubscriptionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicSubscriptionsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}
inline ::std::string* ListTopicSubscriptionsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicSubscriptionsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicSubscriptionsRequest.page_token)
}

// -------------------------------------------------------------------

// ListTopicSubscriptionsResponse

// repeated string subscriptions = 1;
inline int ListTopicSubscriptionsResponse::subscriptions_size() const {
  return subscriptions_.size();
}
inline void ListTopicSubscriptionsResponse::clear_subscriptions() {
  subscriptions_.Clear();
}
inline const ::std::string& ListTopicSubscriptionsResponse::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Get(index);
}
inline ::std::string* ListTopicSubscriptionsResponse::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Mutable(index);
}
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  subscriptions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  subscriptions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subscriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, const char* value, size_t size) {
  subscriptions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline ::std::string* ListTopicSubscriptionsResponse::add_subscriptions() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Add();
}
inline void ListTopicSubscriptionsResponse::add_subscriptions(const ::std::string& value) {
  subscriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
#if LANG_CXX11
inline void ListTopicSubscriptionsResponse::add_subscriptions(::std::string&& value) {
  subscriptions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
#endif
inline void ListTopicSubscriptionsResponse::add_subscriptions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subscriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline void ListTopicSubscriptionsResponse::add_subscriptions(const char* value, size_t size) {
  subscriptions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListTopicSubscriptionsResponse::subscriptions() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListTopicSubscriptionsResponse::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions)
  return &subscriptions_;
}

// string next_page_token = 2;
inline void ListTopicSubscriptionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListTopicSubscriptionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListTopicSubscriptionsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListTopicSubscriptionsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
#endif
inline void ListTopicSubscriptionsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
inline void ListTopicSubscriptionsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
inline ::std::string* ListTopicSubscriptionsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListTopicSubscriptionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListTopicSubscriptionsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}
inline ::std::string* ListTopicSubscriptionsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListTopicSubscriptionsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteTopicRequest

// string topic = 1;
inline void DeleteTopicRequest::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteTopicRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeleteTopicRequest.topic)
  return topic_.Get();
}
inline void DeleteTopicRequest::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeleteTopicRequest.topic)
}
#if LANG_CXX11
inline void DeleteTopicRequest::set_topic(::std::string&& value) {
  
  topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.DeleteTopicRequest.topic)
}
#endif
inline void DeleteTopicRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.DeleteTopicRequest.topic)
}
inline void DeleteTopicRequest::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.DeleteTopicRequest.topic)
}
inline ::std::string* DeleteTopicRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeleteTopicRequest.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteTopicRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeleteTopicRequest.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteTopicRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeleteTopicRequest.topic)
}
inline ::std::string* DeleteTopicRequest::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.DeleteTopicRequest.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteTopicRequest::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.DeleteTopicRequest.topic)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Subscription

// string name = 1;
inline void Subscription::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Subscription::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.name)
  return name_.Get();
}
inline void Subscription::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.name)
}
#if LANG_CXX11
inline void Subscription::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.Subscription.name)
}
#endif
inline void Subscription::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Subscription.name)
}
inline void Subscription::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Subscription.name)
}
inline ::std::string* Subscription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Subscription::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Subscription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.name)
}
inline ::std::string* Subscription::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Subscription::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.name)
}

// string topic = 2;
inline void Subscription::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Subscription::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.topic)
  return topic_.Get();
}
inline void Subscription::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.topic)
}
#if LANG_CXX11
inline void Subscription::set_topic(::std::string&& value) {
  
  topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.Subscription.topic)
}
#endif
inline void Subscription::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Subscription.topic)
}
inline void Subscription::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Subscription.topic)
}
inline ::std::string* Subscription::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Subscription::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Subscription::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.topic)
}
inline ::std::string* Subscription::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Subscription::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.topic)
}

// .google.pubsub.v1.PushConfig push_config = 4;
inline bool Subscription::has_push_config() const {
  return this != internal_default_instance() && push_config_ != NULL;
}
inline void Subscription::clear_push_config() {
  if (GetArenaNoVirtual() == NULL && push_config_ != NULL) {
    delete push_config_;
  }
  push_config_ = NULL;
}
inline const ::google::pubsub::v1::PushConfig& Subscription::push_config() const {
  const ::google::pubsub::v1::PushConfig* p = push_config_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.push_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::pubsub::v1::PushConfig*>(
      &::google::pubsub::v1::_PushConfig_default_instance_);
}
inline ::google::pubsub::v1::PushConfig* Subscription::release_push_config() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.push_config)
  
  ::google::pubsub::v1::PushConfig* temp = push_config_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  push_config_ = NULL;
  return temp;
}
inline ::google::pubsub::v1::PushConfig* Subscription::unsafe_arena_release_push_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.push_config)
  
  ::google::pubsub::v1::PushConfig* temp = push_config_;
  push_config_ = NULL;
  return temp;
}
inline ::google::pubsub::v1::PushConfig* Subscription::mutable_push_config() {
  
  if (push_config_ == NULL) {
    _slow_mutable_push_config();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.push_config)
  return push_config_;
}
inline void Subscription::set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete push_config_;
  }
  if (push_config) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(push_config);
    if (message_arena != submessage_arena) {
      push_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, push_config, submessage_arena);
    }
    
  } else {
    
  }
  push_config_ = push_config;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.push_config)
}

// int32 ack_deadline_seconds = 5;
inline void Subscription::clear_ack_deadline_seconds() {
  ack_deadline_seconds_ = 0;
}
inline ::google::protobuf::int32 Subscription::ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.ack_deadline_seconds)
  return ack_deadline_seconds_;
}
inline void Subscription::set_ack_deadline_seconds(::google::protobuf::int32 value) {
  
  ack_deadline_seconds_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.ack_deadline_seconds)
}

// bool retain_acked_messages = 7;
inline void Subscription::clear_retain_acked_messages() {
  retain_acked_messages_ = false;
}
inline bool Subscription::retain_acked_messages() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.retain_acked_messages)
  return retain_acked_messages_;
}
inline void Subscription::set_retain_acked_messages(bool value) {
  
  retain_acked_messages_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Subscription.retain_acked_messages)
}

// .google.protobuf.Duration message_retention_duration = 8;
inline bool Subscription::has_message_retention_duration() const {
  return this != internal_default_instance() && message_retention_duration_ != NULL;
}
inline const ::google::protobuf::Duration& Subscription::message_retention_duration() const {
  const ::google::protobuf::Duration* p = message_retention_duration_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Subscription.message_retention_duration)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Duration*>(
      &::google::protobuf::_Duration_default_instance_);
}
inline ::google::protobuf::Duration* Subscription::release_message_retention_duration() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Subscription.message_retention_duration)
  
  ::google::protobuf::Duration* temp = message_retention_duration_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  message_retention_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* Subscription::unsafe_arena_release_message_retention_duration() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Subscription.message_retention_duration)
  
  ::google::protobuf::Duration* temp = message_retention_duration_;
  message_retention_duration_ = NULL;
  return temp;
}
inline ::google::protobuf::Duration* Subscription::mutable_message_retention_duration() {
  
  if (message_retention_duration_ == NULL) {
    _slow_mutable_message_retention_duration();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Subscription.message_retention_duration)
  return message_retention_duration_;
}
inline void Subscription::set_allocated_message_retention_duration(::google::protobuf::Duration* message_retention_duration) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_retention_duration_);
  }
  if (message_retention_duration) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(message_retention_duration)->GetArena();
    if (message_arena != submessage_arena) {
      message_retention_duration = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message_retention_duration, submessage_arena);
    }
    
  } else {
    
  }
  message_retention_duration_ = message_retention_duration;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Subscription.message_retention_duration)
}

// map<string, string> labels = 9;
inline int Subscription::labels_size() const {
  return labels_.size();
}
inline void Subscription::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Subscription::labels() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.Subscription.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Subscription::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.Subscription.labels)
  return labels_.MutableMap();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PushConfig

// string push_endpoint = 1;
inline void PushConfig::clear_push_endpoint() {
  push_endpoint_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PushConfig::push_endpoint() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PushConfig.push_endpoint)
  return push_endpoint_.Get();
}
inline void PushConfig::set_push_endpoint(const ::std::string& value) {
  
  push_endpoint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PushConfig.push_endpoint)
}
#if LANG_CXX11
inline void PushConfig::set_push_endpoint(::std::string&& value) {
  
  push_endpoint_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.PushConfig.push_endpoint)
}
#endif
inline void PushConfig::set_push_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  push_endpoint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PushConfig.push_endpoint)
}
inline void PushConfig::set_push_endpoint(const char* value,
    size_t size) {
  
  push_endpoint_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PushConfig.push_endpoint)
}
inline ::std::string* PushConfig::mutable_push_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PushConfig.push_endpoint)
  return push_endpoint_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PushConfig::release_push_endpoint() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PushConfig.push_endpoint)
  
  return push_endpoint_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PushConfig::set_allocated_push_endpoint(::std::string* push_endpoint) {
  if (push_endpoint != NULL) {
    
  } else {
    
  }
  push_endpoint_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), push_endpoint,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PushConfig.push_endpoint)
}
inline ::std::string* PushConfig::unsafe_arena_release_push_endpoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PushConfig.push_endpoint)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return push_endpoint_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PushConfig::unsafe_arena_set_allocated_push_endpoint(
    ::std::string* push_endpoint) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (push_endpoint != NULL) {
    
  } else {
    
  }
  push_endpoint_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      push_endpoint, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PushConfig.push_endpoint)
}

// map<string, string> attributes = 2;
inline int PushConfig::attributes_size() const {
  return attributes_.size();
}
inline void PushConfig::clear_attributes() {
  attributes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
PushConfig::attributes() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.PushConfig.attributes)
  return attributes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
PushConfig::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.PushConfig.attributes)
  return attributes_.MutableMap();
}

// -------------------------------------------------------------------

// ReceivedMessage

// string ack_id = 1;
inline void ReceivedMessage::clear_ack_id() {
  ack_id_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ReceivedMessage::ack_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ReceivedMessage.ack_id)
  return ack_id_.Get();
}
inline void ReceivedMessage::set_ack_id(const ::std::string& value) {
  
  ack_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ReceivedMessage.ack_id)
}
#if LANG_CXX11
inline void ReceivedMessage::set_ack_id(::std::string&& value) {
  
  ack_id_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ReceivedMessage.ack_id)
}
#endif
inline void ReceivedMessage::set_ack_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ack_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ReceivedMessage.ack_id)
}
inline void ReceivedMessage::set_ack_id(const char* value,
    size_t size) {
  
  ack_id_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ReceivedMessage.ack_id)
}
inline ::std::string* ReceivedMessage::mutable_ack_id() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ReceivedMessage.ack_id)
  return ack_id_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ReceivedMessage::release_ack_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ReceivedMessage.ack_id)
  
  return ack_id_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ReceivedMessage::set_allocated_ack_id(::std::string* ack_id) {
  if (ack_id != NULL) {
    
  } else {
    
  }
  ack_id_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ack_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ReceivedMessage.ack_id)
}
inline ::std::string* ReceivedMessage::unsafe_arena_release_ack_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ReceivedMessage.ack_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return ack_id_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReceivedMessage::unsafe_arena_set_allocated_ack_id(
    ::std::string* ack_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (ack_id != NULL) {
    
  } else {
    
  }
  ack_id_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ack_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ReceivedMessage.ack_id)
}

// .google.pubsub.v1.PubsubMessage message = 2;
inline bool ReceivedMessage::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void ReceivedMessage::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
}
inline const ::google::pubsub::v1::PubsubMessage& ReceivedMessage::message() const {
  const ::google::pubsub::v1::PubsubMessage* p = message_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ReceivedMessage.message)
  return p != NULL ? *p : *reinterpret_cast<const ::google::pubsub::v1::PubsubMessage*>(
      &::google::pubsub::v1::_PubsubMessage_default_instance_);
}
inline ::google::pubsub::v1::PubsubMessage* ReceivedMessage::release_message() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ReceivedMessage.message)
  
  ::google::pubsub::v1::PubsubMessage* temp = message_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  message_ = NULL;
  return temp;
}
inline ::google::pubsub::v1::PubsubMessage* ReceivedMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ReceivedMessage.message)
  
  ::google::pubsub::v1::PubsubMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::google::pubsub::v1::PubsubMessage* ReceivedMessage::mutable_message() {
  
  if (message_ == NULL) {
    _slow_mutable_message();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ReceivedMessage.message)
  return message_;
}
inline void ReceivedMessage::set_allocated_message(::google::pubsub::v1::PubsubMessage* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(message);
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ReceivedMessage.message)
}

// -------------------------------------------------------------------

// GetSubscriptionRequest

// string subscription = 1;
inline void GetSubscriptionRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& GetSubscriptionRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.GetSubscriptionRequest.subscription)
  return subscription_.Get();
}
inline void GetSubscriptionRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
#if LANG_CXX11
inline void GetSubscriptionRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
#endif
inline void GetSubscriptionRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
inline void GetSubscriptionRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
inline ::std::string* GetSubscriptionRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.GetSubscriptionRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* GetSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.GetSubscriptionRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetSubscriptionRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.GetSubscriptionRequest.subscription)
}
inline ::std::string* GetSubscriptionRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.GetSubscriptionRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetSubscriptionRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.GetSubscriptionRequest.subscription)
}

// -------------------------------------------------------------------

// UpdateSubscriptionRequest

// .google.pubsub.v1.Subscription subscription = 1;
inline bool UpdateSubscriptionRequest::has_subscription() const {
  return this != internal_default_instance() && subscription_ != NULL;
}
inline void UpdateSubscriptionRequest::clear_subscription() {
  if (GetArenaNoVirtual() == NULL && subscription_ != NULL) {
    delete subscription_;
  }
  subscription_ = NULL;
}
inline const ::google::pubsub::v1::Subscription& UpdateSubscriptionRequest::subscription() const {
  const ::google::pubsub::v1::Subscription* p = subscription_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
  return p != NULL ? *p : *reinterpret_cast<const ::google::pubsub::v1::Subscription*>(
      &::google::pubsub::v1::_Subscription_default_instance_);
}
inline ::google::pubsub::v1::Subscription* UpdateSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
  
  ::google::pubsub::v1::Subscription* temp = subscription_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  subscription_ = NULL;
  return temp;
}
inline ::google::pubsub::v1::Subscription* UpdateSubscriptionRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
  
  ::google::pubsub::v1::Subscription* temp = subscription_;
  subscription_ = NULL;
  return temp;
}
inline ::google::pubsub::v1::Subscription* UpdateSubscriptionRequest::mutable_subscription() {
  
  if (subscription_ == NULL) {
    _slow_mutable_subscription();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
  return subscription_;
}
inline void UpdateSubscriptionRequest::set_allocated_subscription(::google::pubsub::v1::Subscription* subscription) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete subscription_;
  }
  if (subscription) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(subscription);
    if (message_arena != submessage_arena) {
      subscription = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, subscription, submessage_arena);
    }
    
  } else {
    
  }
  subscription_ = subscription;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateSubscriptionRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateSubscriptionRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateSubscriptionRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateSubscriptionRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateSubscriptionRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    _slow_mutable_update_mask();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
  return update_mask_;
}
inline void UpdateSubscriptionRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
}

// -------------------------------------------------------------------

// ListSubscriptionsRequest

// string project = 1;
inline void ListSubscriptionsRequest::clear_project() {
  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSubscriptionsRequest::project() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsRequest.project)
  return project_.Get();
}
inline void ListSubscriptionsRequest::set_project(const ::std::string& value) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsRequest.project)
}
#if LANG_CXX11
inline void ListSubscriptionsRequest::set_project(::std::string&& value) {
  
  project_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListSubscriptionsRequest.project)
}
#endif
inline void ListSubscriptionsRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSubscriptionsRequest.project)
}
inline void ListSubscriptionsRequest::set_project(const char* value,
    size_t size) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSubscriptionsRequest.project)
}
inline ::std::string* ListSubscriptionsRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsRequest.project)
  return project_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSubscriptionsRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSubscriptionsRequest.project)
  
  return project_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSubscriptionsRequest::set_allocated_project(::std::string* project) {
  if (project != NULL) {
    
  } else {
    
  }
  project_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.project)
}
inline ::std::string* ListSubscriptionsRequest::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSubscriptionsRequest.project)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSubscriptionsRequest::unsafe_arena_set_allocated_project(
    ::std::string* project) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project != NULL) {
    
  } else {
    
  }
  project_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.project)
}

// int32 page_size = 2;
inline void ListSubscriptionsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListSubscriptionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsRequest.page_size)
  return page_size_;
}
inline void ListSubscriptionsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsRequest.page_size)
}

// string page_token = 3;
inline void ListSubscriptionsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSubscriptionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  return page_token_.Get();
}
inline void ListSubscriptionsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
#if LANG_CXX11
inline void ListSubscriptionsRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
#endif
inline void ListSubscriptionsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
inline void ListSubscriptionsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
inline ::std::string* ListSubscriptionsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSubscriptionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSubscriptionsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}
inline ::std::string* ListSubscriptionsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSubscriptionsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSubscriptionsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSubscriptionsRequest.page_token)
}

// -------------------------------------------------------------------

// ListSubscriptionsResponse

// repeated .google.pubsub.v1.Subscription subscriptions = 1;
inline int ListSubscriptionsResponse::subscriptions_size() const {
  return subscriptions_.size();
}
inline void ListSubscriptionsResponse::clear_subscriptions() {
  subscriptions_.Clear();
}
inline const ::google::pubsub::v1::Subscription& ListSubscriptionsResponse::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return subscriptions_.Get(index);
}
inline ::google::pubsub::v1::Subscription* ListSubscriptionsResponse::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::google::pubsub::v1::Subscription* ListSubscriptionsResponse::add_subscriptions() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return subscriptions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Subscription >*
ListSubscriptionsResponse::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return &subscriptions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Subscription >&
ListSubscriptionsResponse::subscriptions() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListSubscriptionsResponse.subscriptions)
  return subscriptions_;
}

// string next_page_token = 2;
inline void ListSubscriptionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSubscriptionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListSubscriptionsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListSubscriptionsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
#endif
inline void ListSubscriptionsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
inline void ListSubscriptionsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
inline ::std::string* ListSubscriptionsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSubscriptionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSubscriptionsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}
inline ::std::string* ListSubscriptionsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSubscriptionsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSubscriptionsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteSubscriptionRequest

// string subscription = 1;
inline void DeleteSubscriptionRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteSubscriptionRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  return subscription_.Get();
}
inline void DeleteSubscriptionRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
#if LANG_CXX11
inline void DeleteSubscriptionRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
#endif
inline void DeleteSubscriptionRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
inline void DeleteSubscriptionRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
inline ::std::string* DeleteSubscriptionRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteSubscriptionRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}
inline ::std::string* DeleteSubscriptionRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteSubscriptionRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.DeleteSubscriptionRequest.subscription)
}

// -------------------------------------------------------------------

// ModifyPushConfigRequest

// string subscription = 1;
inline void ModifyPushConfigRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ModifyPushConfigRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  return subscription_.Get();
}
inline void ModifyPushConfigRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
#if LANG_CXX11
inline void ModifyPushConfigRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
#endif
inline void ModifyPushConfigRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
inline void ModifyPushConfigRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
inline ::std::string* ModifyPushConfigRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ModifyPushConfigRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ModifyPushConfigRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}
inline ::std::string* ModifyPushConfigRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ModifyPushConfigRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ModifyPushConfigRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.subscription)
}

// .google.pubsub.v1.PushConfig push_config = 2;
inline bool ModifyPushConfigRequest::has_push_config() const {
  return this != internal_default_instance() && push_config_ != NULL;
}
inline void ModifyPushConfigRequest::clear_push_config() {
  if (GetArenaNoVirtual() == NULL && push_config_ != NULL) {
    delete push_config_;
  }
  push_config_ = NULL;
}
inline const ::google::pubsub::v1::PushConfig& ModifyPushConfigRequest::push_config() const {
  const ::google::pubsub::v1::PushConfig* p = push_config_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::pubsub::v1::PushConfig*>(
      &::google::pubsub::v1::_PushConfig_default_instance_);
}
inline ::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::release_push_config() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  
  ::google::pubsub::v1::PushConfig* temp = push_config_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  push_config_ = NULL;
  return temp;
}
inline ::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::unsafe_arena_release_push_config() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  
  ::google::pubsub::v1::PushConfig* temp = push_config_;
  push_config_ = NULL;
  return temp;
}
inline ::google::pubsub::v1::PushConfig* ModifyPushConfigRequest::mutable_push_config() {
  
  if (push_config_ == NULL) {
    _slow_mutable_push_config();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyPushConfigRequest.push_config)
  return push_config_;
}
inline void ModifyPushConfigRequest::set_allocated_push_config(::google::pubsub::v1::PushConfig* push_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete push_config_;
  }
  if (push_config) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(push_config);
    if (message_arena != submessage_arena) {
      push_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, push_config, submessage_arena);
    }
    
  } else {
    
  }
  push_config_ = push_config;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.push_config)
}

// -------------------------------------------------------------------

// PullRequest

// string subscription = 1;
inline void PullRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& PullRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullRequest.subscription)
  return subscription_.Get();
}
inline void PullRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PullRequest.subscription)
}
#if LANG_CXX11
inline void PullRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.PullRequest.subscription)
}
#endif
inline void PullRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.PullRequest.subscription)
}
inline void PullRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.PullRequest.subscription)
}
inline ::std::string* PullRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PullRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* PullRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.PullRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void PullRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PullRequest.subscription)
}
inline ::std::string* PullRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.PullRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void PullRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PullRequest.subscription)
}

// bool return_immediately = 2;
inline void PullRequest::clear_return_immediately() {
  return_immediately_ = false;
}
inline bool PullRequest::return_immediately() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullRequest.return_immediately)
  return return_immediately_;
}
inline void PullRequest::set_return_immediately(bool value) {
  
  return_immediately_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PullRequest.return_immediately)
}

// int32 max_messages = 3;
inline void PullRequest::clear_max_messages() {
  max_messages_ = 0;
}
inline ::google::protobuf::int32 PullRequest::max_messages() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullRequest.max_messages)
  return max_messages_;
}
inline void PullRequest::set_max_messages(::google::protobuf::int32 value) {
  
  max_messages_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.PullRequest.max_messages)
}

// -------------------------------------------------------------------

// PullResponse

// repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
inline int PullResponse::received_messages_size() const {
  return received_messages_.size();
}
inline void PullResponse::clear_received_messages() {
  received_messages_.Clear();
}
inline const ::google::pubsub::v1::ReceivedMessage& PullResponse::received_messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.PullResponse.received_messages)
  return received_messages_.Get(index);
}
inline ::google::pubsub::v1::ReceivedMessage* PullResponse::mutable_received_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.PullResponse.received_messages)
  return received_messages_.Mutable(index);
}
inline ::google::pubsub::v1::ReceivedMessage* PullResponse::add_received_messages() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.PullResponse.received_messages)
  return received_messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
PullResponse::mutable_received_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.PullResponse.received_messages)
  return &received_messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
PullResponse::received_messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.PullResponse.received_messages)
  return received_messages_;
}

// -------------------------------------------------------------------

// ModifyAckDeadlineRequest

// string subscription = 1;
inline void ModifyAckDeadlineRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ModifyAckDeadlineRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  return subscription_.Get();
}
inline void ModifyAckDeadlineRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
#if LANG_CXX11
inline void ModifyAckDeadlineRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
#endif
inline void ModifyAckDeadlineRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
inline void ModifyAckDeadlineRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
inline ::std::string* ModifyAckDeadlineRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ModifyAckDeadlineRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ModifyAckDeadlineRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}
inline ::std::string* ModifyAckDeadlineRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ModifyAckDeadlineRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ModifyAckDeadlineRequest.subscription)
}

// repeated string ack_ids = 4;
inline int ModifyAckDeadlineRequest::ack_ids_size() const {
  return ack_ids_.size();
}
inline void ModifyAckDeadlineRequest::clear_ack_ids() {
  ack_ids_.Clear();
}
inline const ::std::string& ModifyAckDeadlineRequest::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return ack_ids_.Get(index);
}
inline ::std::string* ModifyAckDeadlineRequest::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return ack_ids_.Mutable(index);
}
inline void ModifyAckDeadlineRequest::set_ack_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ModifyAckDeadlineRequest::set_ack_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ModifyAckDeadlineRequest::set_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline void ModifyAckDeadlineRequest::set_ack_ids(int index, const char* value, size_t size) {
  ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline ::std::string* ModifyAckDeadlineRequest::add_ack_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return ack_ids_.Add();
}
inline void ModifyAckDeadlineRequest::add_ack_ids(const ::std::string& value) {
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
#if LANG_CXX11
inline void ModifyAckDeadlineRequest::add_ack_ids(::std::string&& value) {
  ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
#endif
inline void ModifyAckDeadlineRequest::add_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline void ModifyAckDeadlineRequest::add_ack_ids(const char* value, size_t size) {
  ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ModifyAckDeadlineRequest::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return ack_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ModifyAckDeadlineRequest::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids)
  return &ack_ids_;
}

// int32 ack_deadline_seconds = 3;
inline void ModifyAckDeadlineRequest::clear_ack_deadline_seconds() {
  ack_deadline_seconds_ = 0;
}
inline ::google::protobuf::int32 ModifyAckDeadlineRequest::ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ModifyAckDeadlineRequest.ack_deadline_seconds)
  return ack_deadline_seconds_;
}
inline void ModifyAckDeadlineRequest::set_ack_deadline_seconds(::google::protobuf::int32 value) {
  
  ack_deadline_seconds_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ModifyAckDeadlineRequest.ack_deadline_seconds)
}

// -------------------------------------------------------------------

// AcknowledgeRequest

// string subscription = 1;
inline void AcknowledgeRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& AcknowledgeRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.AcknowledgeRequest.subscription)
  return subscription_.Get();
}
inline void AcknowledgeRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.AcknowledgeRequest.subscription)
}
#if LANG_CXX11
inline void AcknowledgeRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.AcknowledgeRequest.subscription)
}
#endif
inline void AcknowledgeRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.AcknowledgeRequest.subscription)
}
inline void AcknowledgeRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.AcknowledgeRequest.subscription)
}
inline ::std::string* AcknowledgeRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.AcknowledgeRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* AcknowledgeRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.AcknowledgeRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void AcknowledgeRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.AcknowledgeRequest.subscription)
}
inline ::std::string* AcknowledgeRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.AcknowledgeRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void AcknowledgeRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.AcknowledgeRequest.subscription)
}

// repeated string ack_ids = 2;
inline int AcknowledgeRequest::ack_ids_size() const {
  return ack_ids_.size();
}
inline void AcknowledgeRequest::clear_ack_ids() {
  ack_ids_.Clear();
}
inline const ::std::string& AcknowledgeRequest::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return ack_ids_.Get(index);
}
inline ::std::string* AcknowledgeRequest::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return ack_ids_.Mutable(index);
}
inline void AcknowledgeRequest::set_ack_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AcknowledgeRequest::set_ack_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AcknowledgeRequest::set_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline void AcknowledgeRequest::set_ack_ids(int index, const char* value, size_t size) {
  ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline ::std::string* AcknowledgeRequest::add_ack_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return ack_ids_.Add();
}
inline void AcknowledgeRequest::add_ack_ids(const ::std::string& value) {
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
#if LANG_CXX11
inline void AcknowledgeRequest::add_ack_ids(::std::string&& value) {
  ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
#endif
inline void AcknowledgeRequest::add_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline void AcknowledgeRequest::add_ack_ids(const char* value, size_t size) {
  ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.AcknowledgeRequest.ack_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AcknowledgeRequest::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return ack_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AcknowledgeRequest::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.AcknowledgeRequest.ack_ids)
  return &ack_ids_;
}

// -------------------------------------------------------------------

// StreamingPullRequest

// string subscription = 1;
inline void StreamingPullRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& StreamingPullRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.subscription)
  return subscription_.Get();
}
inline void StreamingPullRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.subscription)
}
#if LANG_CXX11
inline void StreamingPullRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.StreamingPullRequest.subscription)
}
#endif
inline void StreamingPullRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullRequest.subscription)
}
inline void StreamingPullRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullRequest.subscription)
}
inline ::std::string* StreamingPullRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* StreamingPullRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.StreamingPullRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void StreamingPullRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.StreamingPullRequest.subscription)
}
inline ::std::string* StreamingPullRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.StreamingPullRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void StreamingPullRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.StreamingPullRequest.subscription)
}

// repeated string ack_ids = 2;
inline int StreamingPullRequest::ack_ids_size() const {
  return ack_ids_.size();
}
inline void StreamingPullRequest::clear_ack_ids() {
  ack_ids_.Clear();
}
inline const ::std::string& StreamingPullRequest::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return ack_ids_.Get(index);
}
inline ::std::string* StreamingPullRequest::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return ack_ids_.Mutable(index);
}
inline void StreamingPullRequest::set_ack_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StreamingPullRequest::set_ack_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StreamingPullRequest::set_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline void StreamingPullRequest::set_ack_ids(int index, const char* value, size_t size) {
  ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline ::std::string* StreamingPullRequest::add_ack_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return ack_ids_.Add();
}
inline void StreamingPullRequest::add_ack_ids(const ::std::string& value) {
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
#if LANG_CXX11
inline void StreamingPullRequest::add_ack_ids(::std::string&& value) {
  ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
#endif
inline void StreamingPullRequest::add_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline void StreamingPullRequest::add_ack_ids(const char* value, size_t size) {
  ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.StreamingPullRequest.ack_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StreamingPullRequest::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return ack_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StreamingPullRequest::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullRequest.ack_ids)
  return &ack_ids_;
}

// repeated int32 modify_deadline_seconds = 3;
inline int StreamingPullRequest::modify_deadline_seconds_size() const {
  return modify_deadline_seconds_.size();
}
inline void StreamingPullRequest::clear_modify_deadline_seconds() {
  modify_deadline_seconds_.Clear();
}
inline ::google::protobuf::int32 StreamingPullRequest::modify_deadline_seconds(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
  return modify_deadline_seconds_.Get(index);
}
inline void StreamingPullRequest::set_modify_deadline_seconds(int index, ::google::protobuf::int32 value) {
  modify_deadline_seconds_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
}
inline void StreamingPullRequest::add_modify_deadline_seconds(::google::protobuf::int32 value) {
  modify_deadline_seconds_.Add(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
StreamingPullRequest::modify_deadline_seconds() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
  return modify_deadline_seconds_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
StreamingPullRequest::mutable_modify_deadline_seconds() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_seconds)
  return &modify_deadline_seconds_;
}

// repeated string modify_deadline_ack_ids = 4;
inline int StreamingPullRequest::modify_deadline_ack_ids_size() const {
  return modify_deadline_ack_ids_.size();
}
inline void StreamingPullRequest::clear_modify_deadline_ack_ids() {
  modify_deadline_ack_ids_.Clear();
}
inline const ::std::string& StreamingPullRequest::modify_deadline_ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return modify_deadline_ack_ids_.Get(index);
}
inline ::std::string* StreamingPullRequest::mutable_modify_deadline_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return modify_deadline_ack_ids_.Mutable(index);
}
inline void StreamingPullRequest::set_modify_deadline_ack_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  modify_deadline_ack_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void StreamingPullRequest::set_modify_deadline_ack_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  modify_deadline_ack_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void StreamingPullRequest::set_modify_deadline_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  modify_deadline_ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline void StreamingPullRequest::set_modify_deadline_ack_ids(int index, const char* value, size_t size) {
  modify_deadline_ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline ::std::string* StreamingPullRequest::add_modify_deadline_ack_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return modify_deadline_ack_ids_.Add();
}
inline void StreamingPullRequest::add_modify_deadline_ack_ids(const ::std::string& value) {
  modify_deadline_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
#if LANG_CXX11
inline void StreamingPullRequest::add_modify_deadline_ack_ids(::std::string&& value) {
  modify_deadline_ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
#endif
inline void StreamingPullRequest::add_modify_deadline_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  modify_deadline_ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline void StreamingPullRequest::add_modify_deadline_ack_ids(const char* value, size_t size) {
  modify_deadline_ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
StreamingPullRequest::modify_deadline_ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return modify_deadline_ack_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
StreamingPullRequest::mutable_modify_deadline_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids)
  return &modify_deadline_ack_ids_;
}

// int32 stream_ack_deadline_seconds = 5;
inline void StreamingPullRequest::clear_stream_ack_deadline_seconds() {
  stream_ack_deadline_seconds_ = 0;
}
inline ::google::protobuf::int32 StreamingPullRequest::stream_ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullRequest.stream_ack_deadline_seconds)
  return stream_ack_deadline_seconds_;
}
inline void StreamingPullRequest::set_stream_ack_deadline_seconds(::google::protobuf::int32 value) {
  
  stream_ack_deadline_seconds_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.StreamingPullRequest.stream_ack_deadline_seconds)
}

// -------------------------------------------------------------------

// StreamingPullResponse

// repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
inline int StreamingPullResponse::received_messages_size() const {
  return received_messages_.size();
}
inline void StreamingPullResponse::clear_received_messages() {
  received_messages_.Clear();
}
inline const ::google::pubsub::v1::ReceivedMessage& StreamingPullResponse::received_messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.StreamingPullResponse.received_messages)
  return received_messages_.Get(index);
}
inline ::google::pubsub::v1::ReceivedMessage* StreamingPullResponse::mutable_received_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.StreamingPullResponse.received_messages)
  return received_messages_.Mutable(index);
}
inline ::google::pubsub::v1::ReceivedMessage* StreamingPullResponse::add_received_messages() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.StreamingPullResponse.received_messages)
  return received_messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >*
StreamingPullResponse::mutable_received_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.StreamingPullResponse.received_messages)
  return &received_messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::ReceivedMessage >&
StreamingPullResponse::received_messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.StreamingPullResponse.received_messages)
  return received_messages_;
}

// -------------------------------------------------------------------

// CreateSnapshotRequest

// string name = 1;
inline void CreateSnapshotRequest::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateSnapshotRequest::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.CreateSnapshotRequest.name)
  return name_.Get();
}
inline void CreateSnapshotRequest::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.CreateSnapshotRequest.name)
}
#if LANG_CXX11
inline void CreateSnapshotRequest::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.CreateSnapshotRequest.name)
}
#endif
inline void CreateSnapshotRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.CreateSnapshotRequest.name)
}
inline void CreateSnapshotRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.CreateSnapshotRequest.name)
}
inline ::std::string* CreateSnapshotRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.CreateSnapshotRequest.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateSnapshotRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.CreateSnapshotRequest.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CreateSnapshotRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.CreateSnapshotRequest.name)
}
inline ::std::string* CreateSnapshotRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.CreateSnapshotRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateSnapshotRequest::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.CreateSnapshotRequest.name)
}

// string subscription = 2;
inline void CreateSnapshotRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& CreateSnapshotRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.CreateSnapshotRequest.subscription)
  return subscription_.Get();
}
inline void CreateSnapshotRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.CreateSnapshotRequest.subscription)
}
#if LANG_CXX11
inline void CreateSnapshotRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.CreateSnapshotRequest.subscription)
}
#endif
inline void CreateSnapshotRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.CreateSnapshotRequest.subscription)
}
inline void CreateSnapshotRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.CreateSnapshotRequest.subscription)
}
inline ::std::string* CreateSnapshotRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.CreateSnapshotRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* CreateSnapshotRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.CreateSnapshotRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CreateSnapshotRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.CreateSnapshotRequest.subscription)
}
inline ::std::string* CreateSnapshotRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.CreateSnapshotRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateSnapshotRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.CreateSnapshotRequest.subscription)
}

// -------------------------------------------------------------------

// UpdateSnapshotRequest

// .google.pubsub.v1.Snapshot snapshot = 1;
inline bool UpdateSnapshotRequest::has_snapshot() const {
  return this != internal_default_instance() && snapshot_ != NULL;
}
inline void UpdateSnapshotRequest::clear_snapshot() {
  if (GetArenaNoVirtual() == NULL && snapshot_ != NULL) {
    delete snapshot_;
  }
  snapshot_ = NULL;
}
inline const ::google::pubsub::v1::Snapshot& UpdateSnapshotRequest::snapshot() const {
  const ::google::pubsub::v1::Snapshot* p = snapshot_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
  return p != NULL ? *p : *reinterpret_cast<const ::google::pubsub::v1::Snapshot*>(
      &::google::pubsub::v1::_Snapshot_default_instance_);
}
inline ::google::pubsub::v1::Snapshot* UpdateSnapshotRequest::release_snapshot() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
  
  ::google::pubsub::v1::Snapshot* temp = snapshot_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  snapshot_ = NULL;
  return temp;
}
inline ::google::pubsub::v1::Snapshot* UpdateSnapshotRequest::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
  
  ::google::pubsub::v1::Snapshot* temp = snapshot_;
  snapshot_ = NULL;
  return temp;
}
inline ::google::pubsub::v1::Snapshot* UpdateSnapshotRequest::mutable_snapshot() {
  
  if (snapshot_ == NULL) {
    _slow_mutable_snapshot();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
  return snapshot_;
}
inline void UpdateSnapshotRequest::set_allocated_snapshot(::google::pubsub::v1::Snapshot* snapshot) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete snapshot_;
  }
  if (snapshot) {
    ::google::protobuf::Arena* submessage_arena =
      ::google::protobuf::Arena::GetArena(snapshot);
    if (message_arena != submessage_arena) {
      snapshot = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, snapshot, submessage_arena);
    }
    
  } else {
    
  }
  snapshot_ = snapshot;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
}

// .google.protobuf.FieldMask update_mask = 2;
inline bool UpdateSnapshotRequest::has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != NULL;
}
inline const ::google::protobuf::FieldMask& UpdateSnapshotRequest::update_mask() const {
  const ::google::protobuf::FieldMask* p = update_mask_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::FieldMask*>(
      &::google::protobuf::_FieldMask_default_instance_);
}
inline ::google::protobuf::FieldMask* UpdateSnapshotRequest::release_update_mask() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateSnapshotRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
  
  ::google::protobuf::FieldMask* temp = update_mask_;
  update_mask_ = NULL;
  return temp;
}
inline ::google::protobuf::FieldMask* UpdateSnapshotRequest::mutable_update_mask() {
  
  if (update_mask_ == NULL) {
    _slow_mutable_update_mask();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
  return update_mask_;
}
inline void UpdateSnapshotRequest::set_allocated_update_mask(::google::protobuf::FieldMask* update_mask) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      update_mask = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Snapshot

// string name = 1;
inline void Snapshot::clear_name() {
  name_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Snapshot::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Snapshot.name)
  return name_.Get();
}
inline void Snapshot::set_name(const ::std::string& value) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Snapshot.name)
}
#if LANG_CXX11
inline void Snapshot::set_name(::std::string&& value) {
  
  name_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.Snapshot.name)
}
#endif
inline void Snapshot::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Snapshot.name)
}
inline void Snapshot::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Snapshot.name)
}
inline ::std::string* Snapshot::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Snapshot.name)
  return name_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Snapshot::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Snapshot.name)
  
  return name_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Snapshot::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Snapshot.name)
}
inline ::std::string* Snapshot::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Snapshot.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return name_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Snapshot::unsafe_arena_set_allocated_name(
    ::std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (name != NULL) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Snapshot.name)
}

// string topic = 2;
inline void Snapshot::clear_topic() {
  topic_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& Snapshot::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Snapshot.topic)
  return topic_.Get();
}
inline void Snapshot::set_topic(const ::std::string& value) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.Snapshot.topic)
}
#if LANG_CXX11
inline void Snapshot::set_topic(::std::string&& value) {
  
  topic_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.Snapshot.topic)
}
#endif
inline void Snapshot::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.Snapshot.topic)
}
inline void Snapshot::set_topic(const char* value,
    size_t size) {
  
  topic_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.Snapshot.topic)
}
inline ::std::string* Snapshot::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Snapshot.topic)
  return topic_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* Snapshot::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Snapshot.topic)
  
  return topic_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Snapshot::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Snapshot.topic)
}
inline ::std::string* Snapshot::unsafe_arena_release_topic() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Snapshot.topic)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return topic_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Snapshot::unsafe_arena_set_allocated_topic(
    ::std::string* topic) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      topic, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Snapshot.topic)
}

// .google.protobuf.Timestamp expire_time = 3;
inline bool Snapshot::has_expire_time() const {
  return this != internal_default_instance() && expire_time_ != NULL;
}
inline const ::google::protobuf::Timestamp& Snapshot::expire_time() const {
  const ::google::protobuf::Timestamp* p = expire_time_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1.Snapshot.expire_time)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* Snapshot::release_expire_time() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.Snapshot.expire_time)
  
  ::google::protobuf::Timestamp* temp = expire_time_;
  if (GetArenaNoVirtual() != NULL) {
    temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
  }
  expire_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Snapshot::unsafe_arena_release_expire_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.Snapshot.expire_time)
  
  ::google::protobuf::Timestamp* temp = expire_time_;
  expire_time_ = NULL;
  return temp;
}
inline ::google::protobuf::Timestamp* Snapshot::mutable_expire_time() {
  
  if (expire_time_ == NULL) {
    _slow_mutable_expire_time();
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.Snapshot.expire_time)
  return expire_time_;
}
inline void Snapshot::set_allocated_expire_time(::google::protobuf::Timestamp* expire_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(expire_time_);
  }
  if (expire_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast< ::google::protobuf::MessageLite*>(expire_time)->GetArena();
    if (message_arena != submessage_arena) {
      expire_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, expire_time, submessage_arena);
    }
    
  } else {
    
  }
  expire_time_ = expire_time;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.Snapshot.expire_time)
}

// map<string, string> labels = 4;
inline int Snapshot::labels_size() const {
  return labels_.size();
}
inline void Snapshot::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Snapshot::labels() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1.Snapshot.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Snapshot::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1.Snapshot.labels)
  return labels_.MutableMap();
}

// -------------------------------------------------------------------

// ListSnapshotsRequest

// string project = 1;
inline void ListSnapshotsRequest::clear_project() {
  project_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSnapshotsRequest::project() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsRequest.project)
  return project_.Get();
}
inline void ListSnapshotsRequest::set_project(const ::std::string& value) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSnapshotsRequest.project)
}
#if LANG_CXX11
inline void ListSnapshotsRequest::set_project(::std::string&& value) {
  
  project_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListSnapshotsRequest.project)
}
#endif
inline void ListSnapshotsRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSnapshotsRequest.project)
}
inline void ListSnapshotsRequest::set_project(const char* value,
    size_t size) {
  
  project_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSnapshotsRequest.project)
}
inline ::std::string* ListSnapshotsRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSnapshotsRequest.project)
  return project_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSnapshotsRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSnapshotsRequest.project)
  
  return project_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSnapshotsRequest::set_allocated_project(::std::string* project) {
  if (project != NULL) {
    
  } else {
    
  }
  project_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSnapshotsRequest.project)
}
inline ::std::string* ListSnapshotsRequest::unsafe_arena_release_project() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSnapshotsRequest.project)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return project_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSnapshotsRequest::unsafe_arena_set_allocated_project(
    ::std::string* project) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (project != NULL) {
    
  } else {
    
  }
  project_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      project, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSnapshotsRequest.project)
}

// int32 page_size = 2;
inline void ListSnapshotsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListSnapshotsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsRequest.page_size)
  return page_size_;
}
inline void ListSnapshotsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSnapshotsRequest.page_size)
}

// string page_token = 3;
inline void ListSnapshotsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSnapshotsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsRequest.page_token)
  return page_token_.Get();
}
inline void ListSnapshotsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSnapshotsRequest.page_token)
}
#if LANG_CXX11
inline void ListSnapshotsRequest::set_page_token(::std::string&& value) {
  
  page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListSnapshotsRequest.page_token)
}
#endif
inline void ListSnapshotsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSnapshotsRequest.page_token)
}
inline void ListSnapshotsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSnapshotsRequest.page_token)
}
inline ::std::string* ListSnapshotsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSnapshotsRequest.page_token)
  return page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSnapshotsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSnapshotsRequest.page_token)
  
  return page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSnapshotsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSnapshotsRequest.page_token)
}
inline ::std::string* ListSnapshotsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSnapshotsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSnapshotsRequest::unsafe_arena_set_allocated_page_token(
    ::std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSnapshotsRequest.page_token)
}

// -------------------------------------------------------------------

// ListSnapshotsResponse

// repeated .google.pubsub.v1.Snapshot snapshots = 1;
inline int ListSnapshotsResponse::snapshots_size() const {
  return snapshots_.size();
}
inline void ListSnapshotsResponse::clear_snapshots() {
  snapshots_.Clear();
}
inline const ::google::pubsub::v1::Snapshot& ListSnapshotsResponse::snapshots(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return snapshots_.Get(index);
}
inline ::google::pubsub::v1::Snapshot* ListSnapshotsResponse::mutable_snapshots(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return snapshots_.Mutable(index);
}
inline ::google::pubsub::v1::Snapshot* ListSnapshotsResponse::add_snapshots() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return snapshots_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Snapshot >*
ListSnapshotsResponse::mutable_snapshots() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return &snapshots_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1::Snapshot >&
ListSnapshotsResponse::snapshots() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1.ListSnapshotsResponse.snapshots)
  return snapshots_;
}

// string next_page_token = 2;
inline void ListSnapshotsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& ListSnapshotsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
  return next_page_token_.Get();
}
inline void ListSnapshotsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListSnapshotsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}
#endif
inline void ListSnapshotsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}
inline void ListSnapshotsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}
inline ::std::string* ListSnapshotsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
  return next_page_token_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* ListSnapshotsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
  
  return next_page_token_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSnapshotsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}
inline ::std::string* ListSnapshotsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return next_page_token_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSnapshotsResponse::unsafe_arena_set_allocated_next_page_token(
    ::std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ListSnapshotsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteSnapshotRequest

// string snapshot = 1;
inline void DeleteSnapshotRequest::clear_snapshot() {
  snapshot_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& DeleteSnapshotRequest::snapshot() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
  return snapshot_.Get();
}
inline void DeleteSnapshotRequest::set_snapshot(const ::std::string& value) {
  
  snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}
#if LANG_CXX11
inline void DeleteSnapshotRequest::set_snapshot(::std::string&& value) {
  
  snapshot_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}
#endif
inline void DeleteSnapshotRequest::set_snapshot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}
inline void DeleteSnapshotRequest::set_snapshot(const char* value,
    size_t size) {
  
  snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}
inline ::std::string* DeleteSnapshotRequest::mutable_snapshot() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
  return snapshot_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* DeleteSnapshotRequest::release_snapshot() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
  
  return snapshot_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteSnapshotRequest::set_allocated_snapshot(::std::string* snapshot) {
  if (snapshot != NULL) {
    
  } else {
    
  }
  snapshot_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}
inline ::std::string* DeleteSnapshotRequest::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return snapshot_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteSnapshotRequest::unsafe_arena_set_allocated_snapshot(
    ::std::string* snapshot) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (snapshot != NULL) {
    
  } else {
    
  }
  snapshot_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      snapshot, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.DeleteSnapshotRequest.snapshot)
}

// -------------------------------------------------------------------

// SeekRequest

// string subscription = 1;
inline void SeekRequest::clear_subscription() {
  subscription_.ClearToEmpty(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const ::std::string& SeekRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.SeekRequest.subscription)
  return subscription_.Get();
}
inline void SeekRequest::set_subscription(const ::std::string& value) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.SeekRequest.subscription)
}
#if LANG_CXX11
inline void SeekRequest::set_subscription(::std::string&& value) {
  
  subscription_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.SeekRequest.subscription)
}
#endif
inline void SeekRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.SeekRequest.subscription)
}
inline void SeekRequest::set_subscription(const char* value,
    size_t size) {
  
  subscription_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.SeekRequest.subscription)
}
inline ::std::string* SeekRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.SeekRequest.subscription)
  return subscription_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline ::std::string* SeekRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.SeekRequest.subscription)
  
  return subscription_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void SeekRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.SeekRequest.subscription)
}
inline ::std::string* SeekRequest::unsafe_arena_release_subscription() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.SeekRequest.subscription)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  
  return subscription_.UnsafeArenaRelease(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void SeekRequest::unsafe_arena_set_allocated_subscription(
    ::std::string* subscription) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      subscription, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.SeekRequest.subscription)
}

// .google.protobuf.Timestamp time = 2;
inline bool SeekRequest::has_time() const {
  return target_case() == kTime;
}
inline void SeekRequest::set_has_time() {
  _oneof_case_[0] = kTime;
}
inline ::google::protobuf::Timestamp* SeekRequest::release_time() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.SeekRequest.time)
  if (has_time()) {
    clear_has_target();
      ::google::protobuf::Timestamp* temp = target_.time_;
    if (GetArenaNoVirtual() != NULL) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp, NULL);
    }
    target_.time_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::google::protobuf::Timestamp& SeekRequest::time() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.SeekRequest.time)
  return has_time()
      ? *target_.time_
      : *reinterpret_cast< ::google::protobuf::Timestamp*>(&::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* SeekRequest::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.SeekRequest.time)
  if (has_time()) {
    clear_has_target();
    ::google::protobuf::Timestamp* temp = target_.time_;
    target_.time_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void SeekRequest::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* time) {
  clear_target();
  if (time) {
    set_has_time();
    target_.time_ = time;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.SeekRequest.time)
}
inline ::google::protobuf::Timestamp* SeekRequest::mutable_time() {
  if (!has_time()) {
    clear_target();
    set_has_time();
    target_.time_ = 
      ::google::protobuf::Arena::CreateMessage< ::google::protobuf::Timestamp >(
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.SeekRequest.time)
  return target_.time_;
}

// string snapshot = 3;
inline bool SeekRequest::has_snapshot() const {
  return target_case() == kSnapshot;
}
inline void SeekRequest::set_has_snapshot() {
  _oneof_case_[0] = kSnapshot;
}
inline void SeekRequest::clear_snapshot() {
  if (has_snapshot()) {
    target_.snapshot_.Destroy(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
    clear_has_target();
  }
}
inline const ::std::string& SeekRequest::snapshot() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1.SeekRequest.snapshot)
  if (has_snapshot()) {
    return target_.snapshot_.Get();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SeekRequest::set_snapshot(const ::std::string& value) {
  if (!has_snapshot()) {
    clear_target();
    set_has_snapshot();
    target_.snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set:google.pubsub.v1.SeekRequest.snapshot)
}
#if LANG_CXX11
inline void SeekRequest::set_snapshot(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1.SeekRequest.snapshot)
  if (!has_snapshot()) {
    clear_target();
    set_has_snapshot();
    target_.snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.snapshot_.Set(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1.SeekRequest.snapshot)
}
#endif
inline void SeekRequest::set_snapshot(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_snapshot()) {
    clear_target();
    set_has_snapshot();
    target_.snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.snapshot_.Set(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1.SeekRequest.snapshot)
}
inline void SeekRequest::set_snapshot(const char* value,
                             size_t size) {
  if (!has_snapshot()) {
    clear_target();
    set_has_snapshot();
    target_.snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  target_.snapshot_.Set(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1.SeekRequest.snapshot)
}
inline ::std::string* SeekRequest::mutable_snapshot() {
  if (!has_snapshot()) {
    clear_target();
    set_has_snapshot();
    target_.snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return target_.snapshot_.Mutable(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1.SeekRequest.snapshot)
}
inline ::std::string* SeekRequest::release_snapshot() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1.SeekRequest.snapshot)
  if (has_snapshot()) {
    clear_has_target();
    return target_.snapshot_.Release(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void SeekRequest::set_allocated_snapshot(::std::string* snapshot) {
  if (!has_snapshot()) {
    target_.snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_target();
  if (snapshot != NULL) {
    set_has_snapshot();
    target_.snapshot_.SetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot,
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.SeekRequest.snapshot)
}
inline ::std::string* SeekRequest::unsafe_arena_release_snapshot() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.pubsub.v1.SeekRequest.snapshot)
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (has_snapshot()) {
    clear_has_target();
    return target_.snapshot_.UnsafeArenaRelease(
        &::google::protobuf::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  } else {
    return NULL;
  }
}
inline void SeekRequest::unsafe_arena_set_allocated_snapshot(::std::string* snapshot) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != NULL);
  if (!has_snapshot()) {
    target_.snapshot_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_target();
  if (snapshot) {
    set_has_snapshot();
    target_.snapshot_.UnsafeArenaSetAllocated(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), snapshot, GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.SeekRequest.snapshot)
}

inline bool SeekRequest::has_target() const {
  return target_case() != TARGET_NOT_SET;
}
inline void SeekRequest::clear_has_target() {
  _oneof_case_[0] = TARGET_NOT_SET;
}
inline SeekRequest::TargetCase SeekRequest::target_case() const {
  return SeekRequest::TargetCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// SeekResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace pubsub
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fpubsub_2fv1_2fpubsub_2eproto__INCLUDED
