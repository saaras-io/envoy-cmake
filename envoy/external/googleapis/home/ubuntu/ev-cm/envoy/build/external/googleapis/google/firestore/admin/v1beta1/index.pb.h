// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/firestore/admin/v1beta1/index.proto

#ifndef PROTOBUF_google_2ffirestore_2fadmin_2fv1beta1_2findex_2eproto__INCLUDED
#define PROTOBUF_google_2ffirestore_2fadmin_2fv1beta1_2findex_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_google_2ffirestore_2fadmin_2fv1beta1_2findex_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsIndexFieldImpl();
void InitDefaultsIndexField();
void InitDefaultsIndexImpl();
void InitDefaultsIndex();
inline void InitDefaults() {
  InitDefaultsIndexField();
  InitDefaultsIndex();
}
}  // namespace protobuf_google_2ffirestore_2fadmin_2fv1beta1_2findex_2eproto
namespace google {
namespace firestore {
namespace admin {
namespace v1beta1 {
class Index;
class IndexDefaultTypeInternal;
extern IndexDefaultTypeInternal _Index_default_instance_;
class IndexField;
class IndexFieldDefaultTypeInternal;
extern IndexFieldDefaultTypeInternal _IndexField_default_instance_;
}  // namespace v1beta1
}  // namespace admin
}  // namespace firestore
}  // namespace google
namespace google {
namespace firestore {
namespace admin {
namespace v1beta1 {

enum IndexField_Mode {
  IndexField_Mode_MODE_UNSPECIFIED = 0,
  IndexField_Mode_ASCENDING = 2,
  IndexField_Mode_DESCENDING = 3,
  IndexField_Mode_IndexField_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  IndexField_Mode_IndexField_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool IndexField_Mode_IsValid(int value);
const IndexField_Mode IndexField_Mode_Mode_MIN = IndexField_Mode_MODE_UNSPECIFIED;
const IndexField_Mode IndexField_Mode_Mode_MAX = IndexField_Mode_DESCENDING;
const int IndexField_Mode_Mode_ARRAYSIZE = IndexField_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* IndexField_Mode_descriptor();
inline const ::std::string& IndexField_Mode_Name(IndexField_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    IndexField_Mode_descriptor(), value);
}
inline bool IndexField_Mode_Parse(
    const ::std::string& name, IndexField_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IndexField_Mode>(
    IndexField_Mode_descriptor(), name, value);
}
enum Index_State {
  Index_State_STATE_UNSPECIFIED = 0,
  Index_State_CREATING = 3,
  Index_State_READY = 2,
  Index_State_ERROR = 5,
  Index_State_Index_State_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Index_State_Index_State_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Index_State_IsValid(int value);
const Index_State Index_State_State_MIN = Index_State_STATE_UNSPECIFIED;
const Index_State Index_State_State_MAX = Index_State_ERROR;
const int Index_State_State_ARRAYSIZE = Index_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* Index_State_descriptor();
inline const ::std::string& Index_State_Name(Index_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    Index_State_descriptor(), value);
}
inline bool Index_State_Parse(
    const ::std::string& name, Index_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Index_State>(
    Index_State_descriptor(), name, value);
}
// ===================================================================

class IndexField : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.admin.v1beta1.IndexField) */ {
 public:
  IndexField();
  virtual ~IndexField();

  IndexField(const IndexField& from);

  inline IndexField& operator=(const IndexField& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IndexField(IndexField&& from) noexcept
    : IndexField() {
    *this = ::std::move(from);
  }

  inline IndexField& operator=(IndexField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IndexField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexField* internal_default_instance() {
    return reinterpret_cast<const IndexField*>(
               &_IndexField_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(IndexField* other);
  friend void swap(IndexField& a, IndexField& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IndexField* New() const PROTOBUF_FINAL { return New(NULL); }

  IndexField* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const IndexField& from);
  void MergeFrom(const IndexField& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(IndexField* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef IndexField_Mode Mode;
  static const Mode MODE_UNSPECIFIED =
    IndexField_Mode_MODE_UNSPECIFIED;
  static const Mode ASCENDING =
    IndexField_Mode_ASCENDING;
  static const Mode DESCENDING =
    IndexField_Mode_DESCENDING;
  static inline bool Mode_IsValid(int value) {
    return IndexField_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    IndexField_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    IndexField_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    IndexField_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return IndexField_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return IndexField_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return IndexField_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string field_path = 1;
  void clear_field_path();
  static const int kFieldPathFieldNumber = 1;
  const ::std::string& field_path() const;
  void set_field_path(const ::std::string& value);
  #if LANG_CXX11
  void set_field_path(::std::string&& value);
  #endif
  void set_field_path(const char* value);
  void set_field_path(const char* value, size_t size);
  ::std::string* mutable_field_path();
  ::std::string* release_field_path();
  void set_allocated_field_path(::std::string* field_path);

  // .google.firestore.admin.v1beta1.IndexField.Mode mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::google::firestore::admin::v1beta1::IndexField_Mode mode() const;
  void set_mode(::google::firestore::admin::v1beta1::IndexField_Mode value);

  // @@protoc_insertion_point(class_scope:google.firestore.admin.v1beta1.IndexField)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr field_path_;
  int mode_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2ffirestore_2fadmin_2fv1beta1_2findex_2eproto::TableStruct;
  friend void ::protobuf_google_2ffirestore_2fadmin_2fv1beta1_2findex_2eproto::InitDefaultsIndexFieldImpl();
};
// -------------------------------------------------------------------

class Index : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.firestore.admin.v1beta1.Index) */ {
 public:
  Index();
  virtual ~Index();

  Index(const Index& from);

  inline Index& operator=(const Index& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Index(Index&& from) noexcept
    : Index() {
    *this = ::std::move(from);
  }

  inline Index& operator=(Index&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Index& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Index* internal_default_instance() {
    return reinterpret_cast<const Index*>(
               &_Index_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Index* other);
  friend void swap(Index& a, Index& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Index* New() const PROTOBUF_FINAL { return New(NULL); }

  Index* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Index& from);
  void MergeFrom(const Index& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Index* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Index_State State;
  static const State STATE_UNSPECIFIED =
    Index_State_STATE_UNSPECIFIED;
  static const State CREATING =
    Index_State_CREATING;
  static const State READY =
    Index_State_READY;
  static const State ERROR =
    Index_State_ERROR;
  static inline bool State_IsValid(int value) {
    return Index_State_IsValid(value);
  }
  static const State State_MIN =
    Index_State_State_MIN;
  static const State State_MAX =
    Index_State_State_MAX;
  static const int State_ARRAYSIZE =
    Index_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return Index_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return Index_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return Index_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.firestore.admin.v1beta1.IndexField fields = 3;
  int fields_size() const;
  void clear_fields();
  static const int kFieldsFieldNumber = 3;
  const ::google::firestore::admin::v1beta1::IndexField& fields(int index) const;
  ::google::firestore::admin::v1beta1::IndexField* mutable_fields(int index);
  ::google::firestore::admin::v1beta1::IndexField* add_fields();
  ::google::protobuf::RepeatedPtrField< ::google::firestore::admin::v1beta1::IndexField >*
      mutable_fields();
  const ::google::protobuf::RepeatedPtrField< ::google::firestore::admin::v1beta1::IndexField >&
      fields() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string collection_id = 2;
  void clear_collection_id();
  static const int kCollectionIdFieldNumber = 2;
  const ::std::string& collection_id() const;
  void set_collection_id(const ::std::string& value);
  #if LANG_CXX11
  void set_collection_id(::std::string&& value);
  #endif
  void set_collection_id(const char* value);
  void set_collection_id(const char* value, size_t size);
  ::std::string* mutable_collection_id();
  ::std::string* release_collection_id();
  void set_allocated_collection_id(::std::string* collection_id);

  // .google.firestore.admin.v1beta1.Index.State state = 6;
  void clear_state();
  static const int kStateFieldNumber = 6;
  ::google::firestore::admin::v1beta1::Index_State state() const;
  void set_state(::google::firestore::admin::v1beta1::Index_State value);

  // @@protoc_insertion_point(class_scope:google.firestore.admin.v1beta1.Index)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::firestore::admin::v1beta1::IndexField > fields_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr collection_id_;
  int state_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2ffirestore_2fadmin_2fv1beta1_2findex_2eproto::TableStruct;
  friend void ::protobuf_google_2ffirestore_2fadmin_2fv1beta1_2findex_2eproto::InitDefaultsIndexImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IndexField

// string field_path = 1;
inline void IndexField::clear_field_path() {
  field_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IndexField::field_path() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1beta1.IndexField.field_path)
  return field_path_.GetNoArena();
}
inline void IndexField::set_field_path(const ::std::string& value) {
  
  field_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1beta1.IndexField.field_path)
}
#if LANG_CXX11
inline void IndexField::set_field_path(::std::string&& value) {
  
  field_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.admin.v1beta1.IndexField.field_path)
}
#endif
inline void IndexField::set_field_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.admin.v1beta1.IndexField.field_path)
}
inline void IndexField::set_field_path(const char* value, size_t size) {
  
  field_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.admin.v1beta1.IndexField.field_path)
}
inline ::std::string* IndexField::mutable_field_path() {
  
  // @@protoc_insertion_point(field_mutable:google.firestore.admin.v1beta1.IndexField.field_path)
  return field_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IndexField::release_field_path() {
  // @@protoc_insertion_point(field_release:google.firestore.admin.v1beta1.IndexField.field_path)
  
  return field_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IndexField::set_allocated_field_path(::std::string* field_path) {
  if (field_path != NULL) {
    
  } else {
    
  }
  field_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field_path);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.admin.v1beta1.IndexField.field_path)
}

// .google.firestore.admin.v1beta1.IndexField.Mode mode = 2;
inline void IndexField::clear_mode() {
  mode_ = 0;
}
inline ::google::firestore::admin::v1beta1::IndexField_Mode IndexField::mode() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1beta1.IndexField.mode)
  return static_cast< ::google::firestore::admin::v1beta1::IndexField_Mode >(mode_);
}
inline void IndexField::set_mode(::google::firestore::admin::v1beta1::IndexField_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1beta1.IndexField.mode)
}

// -------------------------------------------------------------------

// Index

// string name = 1;
inline void Index::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Index::name() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1beta1.Index.name)
  return name_.GetNoArena();
}
inline void Index::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1beta1.Index.name)
}
#if LANG_CXX11
inline void Index::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.admin.v1beta1.Index.name)
}
#endif
inline void Index::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.admin.v1beta1.Index.name)
}
inline void Index::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.admin.v1beta1.Index.name)
}
inline ::std::string* Index::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.firestore.admin.v1beta1.Index.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Index::release_name() {
  // @@protoc_insertion_point(field_release:google.firestore.admin.v1beta1.Index.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Index::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.admin.v1beta1.Index.name)
}

// string collection_id = 2;
inline void Index::clear_collection_id() {
  collection_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Index::collection_id() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1beta1.Index.collection_id)
  return collection_id_.GetNoArena();
}
inline void Index::set_collection_id(const ::std::string& value) {
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1beta1.Index.collection_id)
}
#if LANG_CXX11
inline void Index::set_collection_id(::std::string&& value) {
  
  collection_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.firestore.admin.v1beta1.Index.collection_id)
}
#endif
inline void Index::set_collection_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.firestore.admin.v1beta1.Index.collection_id)
}
inline void Index::set_collection_id(const char* value, size_t size) {
  
  collection_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.firestore.admin.v1beta1.Index.collection_id)
}
inline ::std::string* Index::mutable_collection_id() {
  
  // @@protoc_insertion_point(field_mutable:google.firestore.admin.v1beta1.Index.collection_id)
  return collection_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Index::release_collection_id() {
  // @@protoc_insertion_point(field_release:google.firestore.admin.v1beta1.Index.collection_id)
  
  return collection_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Index::set_allocated_collection_id(::std::string* collection_id) {
  if (collection_id != NULL) {
    
  } else {
    
  }
  collection_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), collection_id);
  // @@protoc_insertion_point(field_set_allocated:google.firestore.admin.v1beta1.Index.collection_id)
}

// repeated .google.firestore.admin.v1beta1.IndexField fields = 3;
inline int Index::fields_size() const {
  return fields_.size();
}
inline void Index::clear_fields() {
  fields_.Clear();
}
inline const ::google::firestore::admin::v1beta1::IndexField& Index::fields(int index) const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1beta1.Index.fields)
  return fields_.Get(index);
}
inline ::google::firestore::admin::v1beta1::IndexField* Index::mutable_fields(int index) {
  // @@protoc_insertion_point(field_mutable:google.firestore.admin.v1beta1.Index.fields)
  return fields_.Mutable(index);
}
inline ::google::firestore::admin::v1beta1::IndexField* Index::add_fields() {
  // @@protoc_insertion_point(field_add:google.firestore.admin.v1beta1.Index.fields)
  return fields_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::firestore::admin::v1beta1::IndexField >*
Index::mutable_fields() {
  // @@protoc_insertion_point(field_mutable_list:google.firestore.admin.v1beta1.Index.fields)
  return &fields_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::firestore::admin::v1beta1::IndexField >&
Index::fields() const {
  // @@protoc_insertion_point(field_list:google.firestore.admin.v1beta1.Index.fields)
  return fields_;
}

// .google.firestore.admin.v1beta1.Index.State state = 6;
inline void Index::clear_state() {
  state_ = 0;
}
inline ::google::firestore::admin::v1beta1::Index_State Index::state() const {
  // @@protoc_insertion_point(field_get:google.firestore.admin.v1beta1.Index.state)
  return static_cast< ::google::firestore::admin::v1beta1::Index_State >(state_);
}
inline void Index::set_state(::google::firestore::admin::v1beta1::Index_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.firestore.admin.v1beta1.Index.state)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace admin
}  // namespace firestore
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::firestore::admin::v1beta1::IndexField_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::firestore::admin::v1beta1::IndexField_Mode>() {
  return ::google::firestore::admin::v1beta1::IndexField_Mode_descriptor();
}
template <> struct is_proto_enum< ::google::firestore::admin::v1beta1::Index_State> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::firestore::admin::v1beta1::Index_State>() {
  return ::google::firestore::admin::v1beta1::Index_State_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2ffirestore_2fadmin_2fv1beta1_2findex_2eproto__INCLUDED
