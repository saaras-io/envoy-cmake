// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/bigtable/admin/cluster/v1/bigtable_cluster_service.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fbigtable_2fadmin_2fcluster_2fv1_2fbigtable_5fcluster_5fservice_2eproto__INCLUDED
#define GRPC_google_2fbigtable_2fadmin_2fcluster_2fv1_2fbigtable_5fcluster_5fservice_2eproto__INCLUDED

#include "google/bigtable/admin/cluster/v1/bigtable_cluster_service.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace bigtable {
namespace admin {
namespace cluster {
namespace v1 {

// Service for managing zonal Cloud Bigtable resources.
class BigtableClusterService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.bigtable.admin.cluster.v1.BigtableClusterService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists the supported zones for the given project.
    virtual ::grpc::Status ListZones(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest& request, ::google::bigtable::admin::cluster::v1::ListZonesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::ListZonesResponse>> AsyncListZones(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::ListZonesResponse>>(AsyncListZonesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::ListZonesResponse>> PrepareAsyncListZones(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::ListZonesResponse>>(PrepareAsyncListZonesRaw(context, request, cq));
    }
    // Gets information about a particular cluster.
    virtual ::grpc::Status GetCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest& request, ::google::bigtable::admin::cluster::v1::Cluster* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>> AsyncGetCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>>(AsyncGetClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>> PrepareAsyncGetCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>>(PrepareAsyncGetClusterRaw(context, request, cq));
    }
    // Lists all clusters in the given project, along with any zones for which
    // cluster information could not be retrieved.
    virtual ::grpc::Status ListClusters(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest& request, ::google::bigtable::admin::cluster::v1::ListClustersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::ListClustersResponse>> AsyncListClusters(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::ListClustersResponse>>(AsyncListClustersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::ListClustersResponse>> PrepareAsyncListClusters(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::ListClustersResponse>>(PrepareAsyncListClustersRaw(context, request, cq));
    }
    // Creates a cluster and begins preparing it to begin serving. The returned
    // cluster embeds as its "current_operation" a long-running operation which
    // can be used to track the progress of turning up the new cluster.
    // Immediately upon completion of this request:
    //  * The cluster will be readable via the API, with all requested attributes
    //    but no allocated resources.
    // Until completion of the embedded operation:
    //  * Cancelling the operation will render the cluster immediately unreadable
    //    via the API.
    //  * All other attempts to modify or delete the cluster will be rejected.
    // Upon completion of the embedded operation:
    //  * Billing for all successfully-allocated resources will begin (some types
    //    may have lower than the requested levels).
    //  * New tables can be created in the cluster.
    //  * The cluster's allocated resource levels will be readable via the API.
    // The embedded operation's "metadata" field type is
    // [CreateClusterMetadata][google.bigtable.admin.cluster.v1.CreateClusterMetadata] The embedded operation's "response" field type is
    // [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
    virtual ::grpc::Status CreateCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest& request, ::google::bigtable::admin::cluster::v1::Cluster* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>> AsyncCreateCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>>(AsyncCreateClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>> PrepareAsyncCreateCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>>(PrepareAsyncCreateClusterRaw(context, request, cq));
    }
    // Updates a cluster, and begins allocating or releasing resources as
    // requested. The returned cluster embeds as its "current_operation" a
    // long-running operation which can be used to track the progress of updating
    // the cluster.
    // Immediately upon completion of this request:
    //  * For resource types where a decrease in the cluster's allocation has been
    //    requested, billing will be based on the newly-requested level.
    // Until completion of the embedded operation:
    //  * Cancelling the operation will set its metadata's "cancelled_at_time",
    //    and begin restoring resources to their pre-request values. The operation
    //    is guaranteed to succeed at undoing all resource changes, after which
    //    point it will terminate with a CANCELLED status.
    //  * All other attempts to modify or delete the cluster will be rejected.
    //  * Reading the cluster via the API will continue to give the pre-request
    //    resource levels.
    // Upon completion of the embedded operation:
    //  * Billing will begin for all successfully-allocated resources (some types
    //    may have lower than the requested levels).
    //  * All newly-reserved resources will be available for serving the cluster's
    //    tables.
    //  * The cluster's new resource levels will be readable via the API.
    // [UpdateClusterMetadata][google.bigtable.admin.cluster.v1.UpdateClusterMetadata] The embedded operation's "response" field type is
    // [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
    virtual ::grpc::Status UpdateCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::Cluster& request, ::google::bigtable::admin::cluster::v1::Cluster* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>> AsyncUpdateCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::Cluster& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>>(AsyncUpdateClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>> PrepareAsyncUpdateCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::Cluster& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>>(PrepareAsyncUpdateClusterRaw(context, request, cq));
    }
    // Marks a cluster and all of its tables for permanent deletion in 7 days.
    // Immediately upon completion of the request:
    //  * Billing will cease for all of the cluster's reserved resources.
    //  * The cluster's "delete_time" field will be set 7 days in the future.
    // Soon afterward:
    //  * All tables within the cluster will become unavailable.
    // Prior to the cluster's "delete_time":
    //  * The cluster can be recovered with a call to UndeleteCluster.
    //  * All other attempts to modify or delete the cluster will be rejected.
    // At the cluster's "delete_time":
    //  * The cluster and *all of its tables* will immediately and irrevocably
    //    disappear from the API, and their data will be permanently deleted.
    virtual ::grpc::Status DeleteCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteClusterRaw(context, request, cq));
    }
    // Cancels the scheduled deletion of an cluster and begins preparing it to
    // resume serving. The returned operation will also be embedded as the
    // cluster's "current_operation".
    // Immediately upon completion of this request:
    //  * The cluster's "delete_time" field will be unset, protecting it from
    //    automatic deletion.
    // Until completion of the returned operation:
    //  * The operation cannot be cancelled.
    // Upon completion of the returned operation:
    //  * Billing for the cluster's resources will resume.
    //  * All tables within the cluster will be available.
    // [UndeleteClusterMetadata][google.bigtable.admin.cluster.v1.UndeleteClusterMetadata] The embedded operation's "response" field type is
    // [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
    virtual ::grpc::Status UndeleteCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncUndeleteCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncUndeleteClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncUndeleteCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncUndeleteClusterRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::ListZonesResponse>* AsyncListZonesRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::ListZonesResponse>* PrepareAsyncListZonesRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>* AsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>* PrepareAsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::ListClustersResponse>* AsyncListClustersRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::ListClustersResponse>* PrepareAsyncListClustersRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>* AsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>* PrepareAsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>* AsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::Cluster& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::bigtable::admin::cluster::v1::Cluster>* PrepareAsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::Cluster& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncUndeleteClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncUndeleteClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListZones(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest& request, ::google::bigtable::admin::cluster::v1::ListZonesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::ListZonesResponse>> AsyncListZones(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::ListZonesResponse>>(AsyncListZonesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::ListZonesResponse>> PrepareAsyncListZones(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::ListZonesResponse>>(PrepareAsyncListZonesRaw(context, request, cq));
    }
    ::grpc::Status GetCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest& request, ::google::bigtable::admin::cluster::v1::Cluster* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>> AsyncGetCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>>(AsyncGetClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>> PrepareAsyncGetCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>>(PrepareAsyncGetClusterRaw(context, request, cq));
    }
    ::grpc::Status ListClusters(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest& request, ::google::bigtable::admin::cluster::v1::ListClustersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::ListClustersResponse>> AsyncListClusters(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::ListClustersResponse>>(AsyncListClustersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::ListClustersResponse>> PrepareAsyncListClusters(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::ListClustersResponse>>(PrepareAsyncListClustersRaw(context, request, cq));
    }
    ::grpc::Status CreateCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest& request, ::google::bigtable::admin::cluster::v1::Cluster* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>> AsyncCreateCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>>(AsyncCreateClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>> PrepareAsyncCreateCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>>(PrepareAsyncCreateClusterRaw(context, request, cq));
    }
    ::grpc::Status UpdateCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::Cluster& request, ::google::bigtable::admin::cluster::v1::Cluster* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>> AsyncUpdateCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::Cluster& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>>(AsyncUpdateClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>> PrepareAsyncUpdateCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::Cluster& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>>(PrepareAsyncUpdateClusterRaw(context, request, cq));
    }
    ::grpc::Status DeleteCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteClusterRaw(context, request, cq));
    }
    ::grpc::Status UndeleteCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncUndeleteCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncUndeleteClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncUndeleteCluster(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncUndeleteClusterRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::ListZonesResponse>* AsyncListZonesRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::ListZonesResponse>* PrepareAsyncListZonesRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>* AsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>* PrepareAsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::ListClustersResponse>* AsyncListClustersRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::ListClustersResponse>* PrepareAsyncListClustersRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>* AsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>* PrepareAsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>* AsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::Cluster& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::bigtable::admin::cluster::v1::Cluster>* PrepareAsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::Cluster& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncUndeleteClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncUndeleteClusterRaw(::grpc::ClientContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListZones_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCluster_;
    const ::grpc::internal::RpcMethod rpcmethod_ListClusters_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCluster_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCluster_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCluster_;
    const ::grpc::internal::RpcMethod rpcmethod_UndeleteCluster_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists the supported zones for the given project.
    virtual ::grpc::Status ListZones(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest* request, ::google::bigtable::admin::cluster::v1::ListZonesResponse* response);
    // Gets information about a particular cluster.
    virtual ::grpc::Status GetCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest* request, ::google::bigtable::admin::cluster::v1::Cluster* response);
    // Lists all clusters in the given project, along with any zones for which
    // cluster information could not be retrieved.
    virtual ::grpc::Status ListClusters(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest* request, ::google::bigtable::admin::cluster::v1::ListClustersResponse* response);
    // Creates a cluster and begins preparing it to begin serving. The returned
    // cluster embeds as its "current_operation" a long-running operation which
    // can be used to track the progress of turning up the new cluster.
    // Immediately upon completion of this request:
    //  * The cluster will be readable via the API, with all requested attributes
    //    but no allocated resources.
    // Until completion of the embedded operation:
    //  * Cancelling the operation will render the cluster immediately unreadable
    //    via the API.
    //  * All other attempts to modify or delete the cluster will be rejected.
    // Upon completion of the embedded operation:
    //  * Billing for all successfully-allocated resources will begin (some types
    //    may have lower than the requested levels).
    //  * New tables can be created in the cluster.
    //  * The cluster's allocated resource levels will be readable via the API.
    // The embedded operation's "metadata" field type is
    // [CreateClusterMetadata][google.bigtable.admin.cluster.v1.CreateClusterMetadata] The embedded operation's "response" field type is
    // [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
    virtual ::grpc::Status CreateCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest* request, ::google::bigtable::admin::cluster::v1::Cluster* response);
    // Updates a cluster, and begins allocating or releasing resources as
    // requested. The returned cluster embeds as its "current_operation" a
    // long-running operation which can be used to track the progress of updating
    // the cluster.
    // Immediately upon completion of this request:
    //  * For resource types where a decrease in the cluster's allocation has been
    //    requested, billing will be based on the newly-requested level.
    // Until completion of the embedded operation:
    //  * Cancelling the operation will set its metadata's "cancelled_at_time",
    //    and begin restoring resources to their pre-request values. The operation
    //    is guaranteed to succeed at undoing all resource changes, after which
    //    point it will terminate with a CANCELLED status.
    //  * All other attempts to modify or delete the cluster will be rejected.
    //  * Reading the cluster via the API will continue to give the pre-request
    //    resource levels.
    // Upon completion of the embedded operation:
    //  * Billing will begin for all successfully-allocated resources (some types
    //    may have lower than the requested levels).
    //  * All newly-reserved resources will be available for serving the cluster's
    //    tables.
    //  * The cluster's new resource levels will be readable via the API.
    // [UpdateClusterMetadata][google.bigtable.admin.cluster.v1.UpdateClusterMetadata] The embedded operation's "response" field type is
    // [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
    virtual ::grpc::Status UpdateCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::Cluster* request, ::google::bigtable::admin::cluster::v1::Cluster* response);
    // Marks a cluster and all of its tables for permanent deletion in 7 days.
    // Immediately upon completion of the request:
    //  * Billing will cease for all of the cluster's reserved resources.
    //  * The cluster's "delete_time" field will be set 7 days in the future.
    // Soon afterward:
    //  * All tables within the cluster will become unavailable.
    // Prior to the cluster's "delete_time":
    //  * The cluster can be recovered with a call to UndeleteCluster.
    //  * All other attempts to modify or delete the cluster will be rejected.
    // At the cluster's "delete_time":
    //  * The cluster and *all of its tables* will immediately and irrevocably
    //    disappear from the API, and their data will be permanently deleted.
    virtual ::grpc::Status DeleteCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest* request, ::google::protobuf::Empty* response);
    // Cancels the scheduled deletion of an cluster and begins preparing it to
    // resume serving. The returned operation will also be embedded as the
    // cluster's "current_operation".
    // Immediately upon completion of this request:
    //  * The cluster's "delete_time" field will be unset, protecting it from
    //    automatic deletion.
    // Until completion of the returned operation:
    //  * The operation cannot be cancelled.
    // Upon completion of the returned operation:
    //  * Billing for the cluster's resources will resume.
    //  * All tables within the cluster will be available.
    // [UndeleteClusterMetadata][google.bigtable.admin.cluster.v1.UndeleteClusterMetadata] The embedded operation's "response" field type is
    // [Cluster][google.bigtable.admin.cluster.v1.Cluster], if successful.
    virtual ::grpc::Status UndeleteCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest* request, ::google::longrunning::Operation* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListZones() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListZones(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest* request, ::google::bigtable::admin::cluster::v1::ListZonesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListZones(::grpc::ServerContext* context, ::google::bigtable::admin::cluster::v1::ListZonesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::bigtable::admin::cluster::v1::ListZonesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCluster() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest* request, ::google::bigtable::admin::cluster::v1::Cluster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCluster(::grpc::ServerContext* context, ::google::bigtable::admin::cluster::v1::GetClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::bigtable::admin::cluster::v1::Cluster>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListClusters() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ListClusters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest* request, ::google::bigtable::admin::cluster::v1::ListClustersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListClusters(::grpc::ServerContext* context, ::google::bigtable::admin::cluster::v1::ListClustersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::bigtable::admin::cluster::v1::ListClustersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateCluster() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest* request, ::google::bigtable::admin::cluster::v1::Cluster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCluster(::grpc::ServerContext* context, ::google::bigtable::admin::cluster::v1::CreateClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::bigtable::admin::cluster::v1::Cluster>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::Cluster* request, ::google::bigtable::admin::cluster::v1::Cluster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCluster(::grpc::ServerContext* context, ::google::bigtable::admin::cluster::v1::Cluster* request, ::grpc::ServerAsyncResponseWriter< ::google::bigtable::admin::cluster::v1::Cluster>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCluster(::grpc::ServerContext* context, ::google::bigtable::admin::cluster::v1::DeleteClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UndeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UndeleteCluster() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_UndeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUndeleteCluster(::grpc::ServerContext* context, ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListZones<WithAsyncMethod_GetCluster<WithAsyncMethod_ListClusters<WithAsyncMethod_CreateCluster<WithAsyncMethod_UpdateCluster<WithAsyncMethod_DeleteCluster<WithAsyncMethod_UndeleteCluster<Service > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListZones() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListZones(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest* request, ::google::bigtable::admin::cluster::v1::ListZonesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCluster() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest* request, ::google::bigtable::admin::cluster::v1::Cluster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListClusters() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ListClusters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest* request, ::google::bigtable::admin::cluster::v1::ListClustersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateCluster() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest* request, ::google::bigtable::admin::cluster::v1::Cluster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::Cluster* request, ::google::bigtable::admin::cluster::v1::Cluster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UndeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UndeleteCluster() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_UndeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UndeleteCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListZones : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListZones() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::bigtable::admin::cluster::v1::ListZonesRequest, ::google::bigtable::admin::cluster::v1::ListZonesResponse>(std::bind(&WithStreamedUnaryMethod_ListZones<BaseClass>::StreamedListZones, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListZones() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListZones(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::ListZonesRequest* request, ::google::bigtable::admin::cluster::v1::ListZonesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListZones(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::bigtable::admin::cluster::v1::ListZonesRequest,::google::bigtable::admin::cluster::v1::ListZonesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCluster() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::bigtable::admin::cluster::v1::GetClusterRequest, ::google::bigtable::admin::cluster::v1::Cluster>(std::bind(&WithStreamedUnaryMethod_GetCluster<BaseClass>::StreamedGetCluster, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::GetClusterRequest* request, ::google::bigtable::admin::cluster::v1::Cluster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::bigtable::admin::cluster::v1::GetClusterRequest,::google::bigtable::admin::cluster::v1::Cluster>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListClusters() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::bigtable::admin::cluster::v1::ListClustersRequest, ::google::bigtable::admin::cluster::v1::ListClustersResponse>(std::bind(&WithStreamedUnaryMethod_ListClusters<BaseClass>::StreamedListClusters, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListClusters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::ListClustersRequest* request, ::google::bigtable::admin::cluster::v1::ListClustersResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListClusters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::bigtable::admin::cluster::v1::ListClustersRequest,::google::bigtable::admin::cluster::v1::ListClustersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateCluster() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::bigtable::admin::cluster::v1::CreateClusterRequest, ::google::bigtable::admin::cluster::v1::Cluster>(std::bind(&WithStreamedUnaryMethod_CreateCluster<BaseClass>::StreamedCreateCluster, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::CreateClusterRequest* request, ::google::bigtable::admin::cluster::v1::Cluster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::bigtable::admin::cluster::v1::CreateClusterRequest,::google::bigtable::admin::cluster::v1::Cluster>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::bigtable::admin::cluster::v1::Cluster, ::google::bigtable::admin::cluster::v1::Cluster>(std::bind(&WithStreamedUnaryMethod_UpdateCluster<BaseClass>::StreamedUpdateCluster, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::Cluster* request, ::google::bigtable::admin::cluster::v1::Cluster* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::bigtable::admin::cluster::v1::Cluster,::google::bigtable::admin::cluster::v1::Cluster>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::bigtable::admin::cluster::v1::DeleteClusterRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteCluster<BaseClass>::StreamedDeleteCluster, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::DeleteClusterRequest* request, ::google::protobuf::Empty* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::bigtable::admin::cluster::v1::DeleteClusterRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UndeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UndeleteCluster() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_UndeleteCluster<BaseClass>::StreamedUndeleteCluster, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UndeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UndeleteCluster(::grpc::ServerContext* context, const ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUndeleteCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::bigtable::admin::cluster::v1::UndeleteClusterRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListZones<WithStreamedUnaryMethod_GetCluster<WithStreamedUnaryMethod_ListClusters<WithStreamedUnaryMethod_CreateCluster<WithStreamedUnaryMethod_UpdateCluster<WithStreamedUnaryMethod_DeleteCluster<WithStreamedUnaryMethod_UndeleteCluster<Service > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListZones<WithStreamedUnaryMethod_GetCluster<WithStreamedUnaryMethod_ListClusters<WithStreamedUnaryMethod_CreateCluster<WithStreamedUnaryMethod_UpdateCluster<WithStreamedUnaryMethod_DeleteCluster<WithStreamedUnaryMethod_UndeleteCluster<Service > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace cluster
}  // namespace admin
}  // namespace bigtable
}  // namespace google


#endif  // GRPC_google_2fbigtable_2fadmin_2fcluster_2fv1_2fbigtable_5fcluster_5fservice_2eproto__INCLUDED
