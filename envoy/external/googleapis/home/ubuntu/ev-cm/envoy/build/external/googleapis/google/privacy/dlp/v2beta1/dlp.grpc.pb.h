// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/privacy/dlp/v2beta1/dlp.proto
// Original file comments:
// Copyright 2017 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto__INCLUDED
#define GRPC_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto__INCLUDED

#include "google/privacy/dlp/v2beta1/dlp.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace google {
namespace privacy {
namespace dlp {
namespace v2beta1 {

// The DLP API is a service that allows clients
// to detect the presence of Personally Identifiable Information (PII) and other
// privacy-sensitive data in user-supplied, unstructured data streams, like text
// blocks or images.
// The service also includes methods for sensitive data redaction and
// scheduling of data scans on Google Cloud Platform based data sets.
class DlpService final {
 public:
  static constexpr char const* service_full_name() {
    return "google.privacy.dlp.v2beta1.DlpService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Finds potentially sensitive info in a list of strings.
    // This method has limits on input size, processing time, and output size.
    virtual ::grpc::Status InspectContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest& request, ::google::privacy::dlp::v2beta1::InspectContentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::InspectContentResponse>> AsyncInspectContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::InspectContentResponse>>(AsyncInspectContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::InspectContentResponse>> PrepareAsyncInspectContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::InspectContentResponse>>(PrepareAsyncInspectContentRaw(context, request, cq));
    }
    // Redacts potentially sensitive info from a list of strings.
    // This method has limits on input size, processing time, and output size.
    virtual ::grpc::Status RedactContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest& request, ::google::privacy::dlp::v2beta1::RedactContentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::RedactContentResponse>> AsyncRedactContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::RedactContentResponse>>(AsyncRedactContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::RedactContentResponse>> PrepareAsyncRedactContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::RedactContentResponse>>(PrepareAsyncRedactContentRaw(context, request, cq));
    }
    // De-identifies potentially sensitive info from a list of strings.
    // This method has limits on input size and output size.
    virtual ::grpc::Status DeidentifyContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest& request, ::google::privacy::dlp::v2beta1::DeidentifyContentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>> AsyncDeidentifyContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>>(AsyncDeidentifyContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>> PrepareAsyncDeidentifyContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>>(PrepareAsyncDeidentifyContentRaw(context, request, cq));
    }
    // Schedules a job scanning content in a Google Cloud Platform data
    // repository.
    virtual ::grpc::Status CreateInspectOperation(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncCreateInspectOperation(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncCreateInspectOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncCreateInspectOperation(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncCreateInspectOperationRaw(context, request, cq));
    }
    // Schedules a job to compute risk analysis metrics over content in a Google
    // Cloud Platform repository.
    virtual ::grpc::Status AnalyzeDataSourceRisk(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest& request, ::google::longrunning::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> AsyncAnalyzeDataSourceRisk(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(AsyncAnalyzeDataSourceRiskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>> PrepareAsyncAnalyzeDataSourceRisk(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>>(PrepareAsyncAnalyzeDataSourceRiskRaw(context, request, cq));
    }
    // Returns list of results for given inspect operation result set id.
    virtual ::grpc::Status ListInspectFindings(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest& request, ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>> AsyncListInspectFindings(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>>(AsyncListInspectFindingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>> PrepareAsyncListInspectFindings(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>>(PrepareAsyncListInspectFindingsRaw(context, request, cq));
    }
    // Returns sensitive information types for given category.
    virtual ::grpc::Status ListInfoTypes(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest& request, ::google::privacy::dlp::v2beta1::ListInfoTypesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>> AsyncListInfoTypes(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>>(AsyncListInfoTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>> PrepareAsyncListInfoTypes(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>>(PrepareAsyncListInfoTypesRaw(context, request, cq));
    }
    // Returns the list of root categories of sensitive information.
    virtual ::grpc::Status ListRootCategories(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest& request, ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>> AsyncListRootCategories(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>>(AsyncListRootCategoriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>> PrepareAsyncListRootCategories(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>>(PrepareAsyncListRootCategoriesRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::InspectContentResponse>* AsyncInspectContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::InspectContentResponse>* PrepareAsyncInspectContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::RedactContentResponse>* AsyncRedactContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::RedactContentResponse>* PrepareAsyncRedactContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>* AsyncDeidentifyContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>* PrepareAsyncDeidentifyContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncCreateInspectOperationRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncCreateInspectOperationRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* AsyncAnalyzeDataSourceRiskRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::longrunning::Operation>* PrepareAsyncAnalyzeDataSourceRiskRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>* AsyncListInspectFindingsRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>* PrepareAsyncListInspectFindingsRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>* AsyncListInfoTypesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>* PrepareAsyncListInfoTypesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>* AsyncListRootCategoriesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>* PrepareAsyncListRootCategoriesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status InspectContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest& request, ::google::privacy::dlp::v2beta1::InspectContentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::InspectContentResponse>> AsyncInspectContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::InspectContentResponse>>(AsyncInspectContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::InspectContentResponse>> PrepareAsyncInspectContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::InspectContentResponse>>(PrepareAsyncInspectContentRaw(context, request, cq));
    }
    ::grpc::Status RedactContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest& request, ::google::privacy::dlp::v2beta1::RedactContentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::RedactContentResponse>> AsyncRedactContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::RedactContentResponse>>(AsyncRedactContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::RedactContentResponse>> PrepareAsyncRedactContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::RedactContentResponse>>(PrepareAsyncRedactContentRaw(context, request, cq));
    }
    ::grpc::Status DeidentifyContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest& request, ::google::privacy::dlp::v2beta1::DeidentifyContentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>> AsyncDeidentifyContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>>(AsyncDeidentifyContentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>> PrepareAsyncDeidentifyContent(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>>(PrepareAsyncDeidentifyContentRaw(context, request, cq));
    }
    ::grpc::Status CreateInspectOperation(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncCreateInspectOperation(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncCreateInspectOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncCreateInspectOperation(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncCreateInspectOperationRaw(context, request, cq));
    }
    ::grpc::Status AnalyzeDataSourceRisk(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest& request, ::google::longrunning::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> AsyncAnalyzeDataSourceRisk(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(AsyncAnalyzeDataSourceRiskRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>> PrepareAsyncAnalyzeDataSourceRisk(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>>(PrepareAsyncAnalyzeDataSourceRiskRaw(context, request, cq));
    }
    ::grpc::Status ListInspectFindings(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest& request, ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>> AsyncListInspectFindings(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>>(AsyncListInspectFindingsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>> PrepareAsyncListInspectFindings(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>>(PrepareAsyncListInspectFindingsRaw(context, request, cq));
    }
    ::grpc::Status ListInfoTypes(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest& request, ::google::privacy::dlp::v2beta1::ListInfoTypesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>> AsyncListInfoTypes(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>>(AsyncListInfoTypesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>> PrepareAsyncListInfoTypes(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>>(PrepareAsyncListInfoTypesRaw(context, request, cq));
    }
    ::grpc::Status ListRootCategories(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest& request, ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>> AsyncListRootCategories(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>>(AsyncListRootCategoriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>> PrepareAsyncListRootCategories(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>>(PrepareAsyncListRootCategoriesRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::InspectContentResponse>* AsyncInspectContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::InspectContentResponse>* PrepareAsyncInspectContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::RedactContentResponse>* AsyncRedactContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::RedactContentResponse>* PrepareAsyncRedactContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>* AsyncDeidentifyContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>* PrepareAsyncDeidentifyContentRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncCreateInspectOperationRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncCreateInspectOperationRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* AsyncAnalyzeDataSourceRiskRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::longrunning::Operation>* PrepareAsyncAnalyzeDataSourceRiskRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>* AsyncListInspectFindingsRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>* PrepareAsyncListInspectFindingsRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>* AsyncListInfoTypesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>* PrepareAsyncListInfoTypesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>* AsyncListRootCategoriesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>* PrepareAsyncListRootCategoriesRaw(::grpc::ClientContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_InspectContent_;
    const ::grpc::internal::RpcMethod rpcmethod_RedactContent_;
    const ::grpc::internal::RpcMethod rpcmethod_DeidentifyContent_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateInspectOperation_;
    const ::grpc::internal::RpcMethod rpcmethod_AnalyzeDataSourceRisk_;
    const ::grpc::internal::RpcMethod rpcmethod_ListInspectFindings_;
    const ::grpc::internal::RpcMethod rpcmethod_ListInfoTypes_;
    const ::grpc::internal::RpcMethod rpcmethod_ListRootCategories_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Finds potentially sensitive info in a list of strings.
    // This method has limits on input size, processing time, and output size.
    virtual ::grpc::Status InspectContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest* request, ::google::privacy::dlp::v2beta1::InspectContentResponse* response);
    // Redacts potentially sensitive info from a list of strings.
    // This method has limits on input size, processing time, and output size.
    virtual ::grpc::Status RedactContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest* request, ::google::privacy::dlp::v2beta1::RedactContentResponse* response);
    // De-identifies potentially sensitive info from a list of strings.
    // This method has limits on input size and output size.
    virtual ::grpc::Status DeidentifyContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest* request, ::google::privacy::dlp::v2beta1::DeidentifyContentResponse* response);
    // Schedules a job scanning content in a Google Cloud Platform data
    // repository.
    virtual ::grpc::Status CreateInspectOperation(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest* request, ::google::longrunning::Operation* response);
    // Schedules a job to compute risk analysis metrics over content in a Google
    // Cloud Platform repository.
    virtual ::grpc::Status AnalyzeDataSourceRisk(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest* request, ::google::longrunning::Operation* response);
    // Returns list of results for given inspect operation result set id.
    virtual ::grpc::Status ListInspectFindings(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest* request, ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse* response);
    // Returns sensitive information types for given category.
    virtual ::grpc::Status ListInfoTypes(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest* request, ::google::privacy::dlp::v2beta1::ListInfoTypesResponse* response);
    // Returns the list of root categories of sensitive information.
    virtual ::grpc::Status ListRootCategories(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest* request, ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_InspectContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_InspectContent() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_InspectContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InspectContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest* request, ::google::privacy::dlp::v2beta1::InspectContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInspectContent(::grpc::ServerContext* context, ::google::privacy::dlp::v2beta1::InspectContentRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::privacy::dlp::v2beta1::InspectContentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RedactContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RedactContent() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RedactContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RedactContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest* request, ::google::privacy::dlp::v2beta1::RedactContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRedactContent(::grpc::ServerContext* context, ::google::privacy::dlp::v2beta1::RedactContentRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::privacy::dlp::v2beta1::RedactContentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeidentifyContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeidentifyContent() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeidentifyContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeidentifyContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest* request, ::google::privacy::dlp::v2beta1::DeidentifyContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeidentifyContent(::grpc::ServerContext* context, ::google::privacy::dlp::v2beta1::DeidentifyContentRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateInspectOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateInspectOperation() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_CreateInspectOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInspectOperation(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateInspectOperation(::grpc::ServerContext* context, ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AnalyzeDataSourceRisk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AnalyzeDataSourceRisk() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_AnalyzeDataSourceRisk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnalyzeDataSourceRisk(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAnalyzeDataSourceRisk(::grpc::ServerContext* context, ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::longrunning::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListInspectFindings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListInspectFindings() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_ListInspectFindings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInspectFindings(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest* request, ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInspectFindings(::grpc::ServerContext* context, ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListInfoTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListInfoTypes() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ListInfoTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInfoTypes(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest* request, ::google::privacy::dlp::v2beta1::ListInfoTypesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListInfoTypes(::grpc::ServerContext* context, ::google::privacy::dlp::v2beta1::ListInfoTypesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListRootCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListRootCategories() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ListRootCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRootCategories(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest* request, ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListRootCategories(::grpc::ServerContext* context, ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_InspectContent<WithAsyncMethod_RedactContent<WithAsyncMethod_DeidentifyContent<WithAsyncMethod_CreateInspectOperation<WithAsyncMethod_AnalyzeDataSourceRisk<WithAsyncMethod_ListInspectFindings<WithAsyncMethod_ListInfoTypes<WithAsyncMethod_ListRootCategories<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_InspectContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_InspectContent() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_InspectContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InspectContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest* request, ::google::privacy::dlp::v2beta1::InspectContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RedactContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RedactContent() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RedactContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RedactContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest* request, ::google::privacy::dlp::v2beta1::RedactContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeidentifyContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeidentifyContent() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeidentifyContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeidentifyContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest* request, ::google::privacy::dlp::v2beta1::DeidentifyContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateInspectOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateInspectOperation() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_CreateInspectOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateInspectOperation(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AnalyzeDataSourceRisk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AnalyzeDataSourceRisk() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_AnalyzeDataSourceRisk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AnalyzeDataSourceRisk(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListInspectFindings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListInspectFindings() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_ListInspectFindings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInspectFindings(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest* request, ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListInfoTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListInfoTypes() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ListInfoTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListInfoTypes(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest* request, ::google::privacy::dlp::v2beta1::ListInfoTypesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListRootCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListRootCategories() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ListRootCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListRootCategories(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest* request, ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InspectContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_InspectContent() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::privacy::dlp::v2beta1::InspectContentRequest, ::google::privacy::dlp::v2beta1::InspectContentResponse>(std::bind(&WithStreamedUnaryMethod_InspectContent<BaseClass>::StreamedInspectContent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_InspectContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InspectContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::InspectContentRequest* request, ::google::privacy::dlp::v2beta1::InspectContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInspectContent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::privacy::dlp::v2beta1::InspectContentRequest,::google::privacy::dlp::v2beta1::InspectContentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RedactContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RedactContent() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::privacy::dlp::v2beta1::RedactContentRequest, ::google::privacy::dlp::v2beta1::RedactContentResponse>(std::bind(&WithStreamedUnaryMethod_RedactContent<BaseClass>::StreamedRedactContent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RedactContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RedactContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::RedactContentRequest* request, ::google::privacy::dlp::v2beta1::RedactContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRedactContent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::privacy::dlp::v2beta1::RedactContentRequest,::google::privacy::dlp::v2beta1::RedactContentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeidentifyContent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeidentifyContent() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::privacy::dlp::v2beta1::DeidentifyContentRequest, ::google::privacy::dlp::v2beta1::DeidentifyContentResponse>(std::bind(&WithStreamedUnaryMethod_DeidentifyContent<BaseClass>::StreamedDeidentifyContent, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeidentifyContent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeidentifyContent(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::DeidentifyContentRequest* request, ::google::privacy::dlp::v2beta1::DeidentifyContentResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeidentifyContent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::privacy::dlp::v2beta1::DeidentifyContentRequest,::google::privacy::dlp::v2beta1::DeidentifyContentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateInspectOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateInspectOperation() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_CreateInspectOperation<BaseClass>::StreamedCreateInspectOperation, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateInspectOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateInspectOperation(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateInspectOperation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::privacy::dlp::v2beta1::CreateInspectOperationRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AnalyzeDataSourceRisk : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AnalyzeDataSourceRisk() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest, ::google::longrunning::Operation>(std::bind(&WithStreamedUnaryMethod_AnalyzeDataSourceRisk<BaseClass>::StreamedAnalyzeDataSourceRisk, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AnalyzeDataSourceRisk() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AnalyzeDataSourceRisk(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest* request, ::google::longrunning::Operation* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAnalyzeDataSourceRisk(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::privacy::dlp::v2beta1::AnalyzeDataSourceRiskRequest,::google::longrunning::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListInspectFindings : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListInspectFindings() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest, ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>(std::bind(&WithStreamedUnaryMethod_ListInspectFindings<BaseClass>::StreamedListInspectFindings, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListInspectFindings() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListInspectFindings(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest* request, ::google::privacy::dlp::v2beta1::ListInspectFindingsResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListInspectFindings(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::privacy::dlp::v2beta1::ListInspectFindingsRequest,::google::privacy::dlp::v2beta1::ListInspectFindingsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListInfoTypes : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListInfoTypes() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::google::privacy::dlp::v2beta1::ListInfoTypesRequest, ::google::privacy::dlp::v2beta1::ListInfoTypesResponse>(std::bind(&WithStreamedUnaryMethod_ListInfoTypes<BaseClass>::StreamedListInfoTypes, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListInfoTypes() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListInfoTypes(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListInfoTypesRequest* request, ::google::privacy::dlp::v2beta1::ListInfoTypesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListInfoTypes(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::privacy::dlp::v2beta1::ListInfoTypesRequest,::google::privacy::dlp::v2beta1::ListInfoTypesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListRootCategories : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListRootCategories() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest, ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>(std::bind(&WithStreamedUnaryMethod_ListRootCategories<BaseClass>::StreamedListRootCategories, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListRootCategories() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListRootCategories(::grpc::ServerContext* context, const ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest* request, ::google::privacy::dlp::v2beta1::ListRootCategoriesResponse* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListRootCategories(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::privacy::dlp::v2beta1::ListRootCategoriesRequest,::google::privacy::dlp::v2beta1::ListRootCategoriesResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_InspectContent<WithStreamedUnaryMethod_RedactContent<WithStreamedUnaryMethod_DeidentifyContent<WithStreamedUnaryMethod_CreateInspectOperation<WithStreamedUnaryMethod_AnalyzeDataSourceRisk<WithStreamedUnaryMethod_ListInspectFindings<WithStreamedUnaryMethod_ListInfoTypes<WithStreamedUnaryMethod_ListRootCategories<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_InspectContent<WithStreamedUnaryMethod_RedactContent<WithStreamedUnaryMethod_DeidentifyContent<WithStreamedUnaryMethod_CreateInspectOperation<WithStreamedUnaryMethod_AnalyzeDataSourceRisk<WithStreamedUnaryMethod_ListInspectFindings<WithStreamedUnaryMethod_ListInfoTypes<WithStreamedUnaryMethod_ListRootCategories<Service > > > > > > > > StreamedService;
};

}  // namespace v2beta1
}  // namespace dlp
}  // namespace privacy
}  // namespace google


#endif  // GRPC_google_2fprivacy_2fdlp_2fv2beta1_2fdlp_2eproto__INCLUDED
