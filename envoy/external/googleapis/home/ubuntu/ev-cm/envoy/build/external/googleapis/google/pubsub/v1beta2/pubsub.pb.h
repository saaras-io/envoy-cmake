// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/pubsub/v1beta2/pubsub.proto

#ifndef PROTOBUF_google_2fpubsub_2fv1beta2_2fpubsub_2eproto__INCLUDED
#define PROTOBUF_google_2fpubsub_2fv1beta2_2fpubsub_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/empty.pb.h>
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[24];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsTopicImpl();
void InitDefaultsTopic();
void InitDefaultsPubsubMessage_AttributesEntry_DoNotUseImpl();
void InitDefaultsPubsubMessage_AttributesEntry_DoNotUse();
void InitDefaultsPubsubMessageImpl();
void InitDefaultsPubsubMessage();
void InitDefaultsGetTopicRequestImpl();
void InitDefaultsGetTopicRequest();
void InitDefaultsPublishRequestImpl();
void InitDefaultsPublishRequest();
void InitDefaultsPublishResponseImpl();
void InitDefaultsPublishResponse();
void InitDefaultsListTopicsRequestImpl();
void InitDefaultsListTopicsRequest();
void InitDefaultsListTopicsResponseImpl();
void InitDefaultsListTopicsResponse();
void InitDefaultsListTopicSubscriptionsRequestImpl();
void InitDefaultsListTopicSubscriptionsRequest();
void InitDefaultsListTopicSubscriptionsResponseImpl();
void InitDefaultsListTopicSubscriptionsResponse();
void InitDefaultsDeleteTopicRequestImpl();
void InitDefaultsDeleteTopicRequest();
void InitDefaultsSubscriptionImpl();
void InitDefaultsSubscription();
void InitDefaultsPushConfig_AttributesEntry_DoNotUseImpl();
void InitDefaultsPushConfig_AttributesEntry_DoNotUse();
void InitDefaultsPushConfigImpl();
void InitDefaultsPushConfig();
void InitDefaultsReceivedMessageImpl();
void InitDefaultsReceivedMessage();
void InitDefaultsGetSubscriptionRequestImpl();
void InitDefaultsGetSubscriptionRequest();
void InitDefaultsListSubscriptionsRequestImpl();
void InitDefaultsListSubscriptionsRequest();
void InitDefaultsListSubscriptionsResponseImpl();
void InitDefaultsListSubscriptionsResponse();
void InitDefaultsDeleteSubscriptionRequestImpl();
void InitDefaultsDeleteSubscriptionRequest();
void InitDefaultsModifyPushConfigRequestImpl();
void InitDefaultsModifyPushConfigRequest();
void InitDefaultsPullRequestImpl();
void InitDefaultsPullRequest();
void InitDefaultsPullResponseImpl();
void InitDefaultsPullResponse();
void InitDefaultsModifyAckDeadlineRequestImpl();
void InitDefaultsModifyAckDeadlineRequest();
void InitDefaultsAcknowledgeRequestImpl();
void InitDefaultsAcknowledgeRequest();
inline void InitDefaults() {
  InitDefaultsTopic();
  InitDefaultsPubsubMessage_AttributesEntry_DoNotUse();
  InitDefaultsPubsubMessage();
  InitDefaultsGetTopicRequest();
  InitDefaultsPublishRequest();
  InitDefaultsPublishResponse();
  InitDefaultsListTopicsRequest();
  InitDefaultsListTopicsResponse();
  InitDefaultsListTopicSubscriptionsRequest();
  InitDefaultsListTopicSubscriptionsResponse();
  InitDefaultsDeleteTopicRequest();
  InitDefaultsSubscription();
  InitDefaultsPushConfig_AttributesEntry_DoNotUse();
  InitDefaultsPushConfig();
  InitDefaultsReceivedMessage();
  InitDefaultsGetSubscriptionRequest();
  InitDefaultsListSubscriptionsRequest();
  InitDefaultsListSubscriptionsResponse();
  InitDefaultsDeleteSubscriptionRequest();
  InitDefaultsModifyPushConfigRequest();
  InitDefaultsPullRequest();
  InitDefaultsPullResponse();
  InitDefaultsModifyAckDeadlineRequest();
  InitDefaultsAcknowledgeRequest();
}
}  // namespace protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto
namespace google {
namespace pubsub {
namespace v1beta2 {
class AcknowledgeRequest;
class AcknowledgeRequestDefaultTypeInternal;
extern AcknowledgeRequestDefaultTypeInternal _AcknowledgeRequest_default_instance_;
class DeleteSubscriptionRequest;
class DeleteSubscriptionRequestDefaultTypeInternal;
extern DeleteSubscriptionRequestDefaultTypeInternal _DeleteSubscriptionRequest_default_instance_;
class DeleteTopicRequest;
class DeleteTopicRequestDefaultTypeInternal;
extern DeleteTopicRequestDefaultTypeInternal _DeleteTopicRequest_default_instance_;
class GetSubscriptionRequest;
class GetSubscriptionRequestDefaultTypeInternal;
extern GetSubscriptionRequestDefaultTypeInternal _GetSubscriptionRequest_default_instance_;
class GetTopicRequest;
class GetTopicRequestDefaultTypeInternal;
extern GetTopicRequestDefaultTypeInternal _GetTopicRequest_default_instance_;
class ListSubscriptionsRequest;
class ListSubscriptionsRequestDefaultTypeInternal;
extern ListSubscriptionsRequestDefaultTypeInternal _ListSubscriptionsRequest_default_instance_;
class ListSubscriptionsResponse;
class ListSubscriptionsResponseDefaultTypeInternal;
extern ListSubscriptionsResponseDefaultTypeInternal _ListSubscriptionsResponse_default_instance_;
class ListTopicSubscriptionsRequest;
class ListTopicSubscriptionsRequestDefaultTypeInternal;
extern ListTopicSubscriptionsRequestDefaultTypeInternal _ListTopicSubscriptionsRequest_default_instance_;
class ListTopicSubscriptionsResponse;
class ListTopicSubscriptionsResponseDefaultTypeInternal;
extern ListTopicSubscriptionsResponseDefaultTypeInternal _ListTopicSubscriptionsResponse_default_instance_;
class ListTopicsRequest;
class ListTopicsRequestDefaultTypeInternal;
extern ListTopicsRequestDefaultTypeInternal _ListTopicsRequest_default_instance_;
class ListTopicsResponse;
class ListTopicsResponseDefaultTypeInternal;
extern ListTopicsResponseDefaultTypeInternal _ListTopicsResponse_default_instance_;
class ModifyAckDeadlineRequest;
class ModifyAckDeadlineRequestDefaultTypeInternal;
extern ModifyAckDeadlineRequestDefaultTypeInternal _ModifyAckDeadlineRequest_default_instance_;
class ModifyPushConfigRequest;
class ModifyPushConfigRequestDefaultTypeInternal;
extern ModifyPushConfigRequestDefaultTypeInternal _ModifyPushConfigRequest_default_instance_;
class PublishRequest;
class PublishRequestDefaultTypeInternal;
extern PublishRequestDefaultTypeInternal _PublishRequest_default_instance_;
class PublishResponse;
class PublishResponseDefaultTypeInternal;
extern PublishResponseDefaultTypeInternal _PublishResponse_default_instance_;
class PubsubMessage;
class PubsubMessageDefaultTypeInternal;
extern PubsubMessageDefaultTypeInternal _PubsubMessage_default_instance_;
class PubsubMessage_AttributesEntry_DoNotUse;
class PubsubMessage_AttributesEntry_DoNotUseDefaultTypeInternal;
extern PubsubMessage_AttributesEntry_DoNotUseDefaultTypeInternal _PubsubMessage_AttributesEntry_DoNotUse_default_instance_;
class PullRequest;
class PullRequestDefaultTypeInternal;
extern PullRequestDefaultTypeInternal _PullRequest_default_instance_;
class PullResponse;
class PullResponseDefaultTypeInternal;
extern PullResponseDefaultTypeInternal _PullResponse_default_instance_;
class PushConfig;
class PushConfigDefaultTypeInternal;
extern PushConfigDefaultTypeInternal _PushConfig_default_instance_;
class PushConfig_AttributesEntry_DoNotUse;
class PushConfig_AttributesEntry_DoNotUseDefaultTypeInternal;
extern PushConfig_AttributesEntry_DoNotUseDefaultTypeInternal _PushConfig_AttributesEntry_DoNotUse_default_instance_;
class ReceivedMessage;
class ReceivedMessageDefaultTypeInternal;
extern ReceivedMessageDefaultTypeInternal _ReceivedMessage_default_instance_;
class Subscription;
class SubscriptionDefaultTypeInternal;
extern SubscriptionDefaultTypeInternal _Subscription_default_instance_;
class Topic;
class TopicDefaultTypeInternal;
extern TopicDefaultTypeInternal _Topic_default_instance_;
}  // namespace v1beta2
}  // namespace pubsub
}  // namespace google
namespace google {
namespace pubsub {
namespace v1beta2 {

// ===================================================================

class Topic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.Topic) */ {
 public:
  Topic();
  virtual ~Topic();

  Topic(const Topic& from);

  inline Topic& operator=(const Topic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Topic(Topic&& from) noexcept
    : Topic() {
    *this = ::std::move(from);
  }

  inline Topic& operator=(Topic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Topic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Topic* internal_default_instance() {
    return reinterpret_cast<const Topic*>(
               &_Topic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Topic* other);
  friend void swap(Topic& a, Topic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Topic* New() const PROTOBUF_FINAL { return New(NULL); }

  Topic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Topic& from);
  void MergeFrom(const Topic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Topic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.Topic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsTopicImpl();
};
// -------------------------------------------------------------------

class PubsubMessage_AttributesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PubsubMessage_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PubsubMessage_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PubsubMessage_AttributesEntry_DoNotUse();
  PubsubMessage_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PubsubMessage_AttributesEntry_DoNotUse& other);
  static const PubsubMessage_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PubsubMessage_AttributesEntry_DoNotUse*>(&_PubsubMessage_AttributesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PubsubMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.PubsubMessage) */ {
 public:
  PubsubMessage();
  virtual ~PubsubMessage();

  PubsubMessage(const PubsubMessage& from);

  inline PubsubMessage& operator=(const PubsubMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PubsubMessage(PubsubMessage&& from) noexcept
    : PubsubMessage() {
    *this = ::std::move(from);
  }

  inline PubsubMessage& operator=(PubsubMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PubsubMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PubsubMessage* internal_default_instance() {
    return reinterpret_cast<const PubsubMessage*>(
               &_PubsubMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PubsubMessage* other);
  friend void swap(PubsubMessage& a, PubsubMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PubsubMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  PubsubMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PubsubMessage& from);
  void MergeFrom(const PubsubMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PubsubMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> attributes = 2;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      attributes() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_attributes();

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // string message_id = 3;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 3;
  const ::std::string& message_id() const;
  void set_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_message_id(::std::string&& value);
  #endif
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  ::std::string* mutable_message_id();
  ::std::string* release_message_id();
  void set_allocated_message_id(::std::string* message_id);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.PubsubMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      PubsubMessage_AttributesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > attributes_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr message_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsPubsubMessageImpl();
};
// -------------------------------------------------------------------

class GetTopicRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.GetTopicRequest) */ {
 public:
  GetTopicRequest();
  virtual ~GetTopicRequest();

  GetTopicRequest(const GetTopicRequest& from);

  inline GetTopicRequest& operator=(const GetTopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTopicRequest(GetTopicRequest&& from) noexcept
    : GetTopicRequest() {
    *this = ::std::move(from);
  }

  inline GetTopicRequest& operator=(GetTopicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTopicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTopicRequest* internal_default_instance() {
    return reinterpret_cast<const GetTopicRequest*>(
               &_GetTopicRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GetTopicRequest* other);
  friend void swap(GetTopicRequest& a, GetTopicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTopicRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetTopicRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetTopicRequest& from);
  void MergeFrom(const GetTopicRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetTopicRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.GetTopicRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsGetTopicRequestImpl();
};
// -------------------------------------------------------------------

class PublishRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.PublishRequest) */ {
 public:
  PublishRequest();
  virtual ~PublishRequest();

  PublishRequest(const PublishRequest& from);

  inline PublishRequest& operator=(const PublishRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishRequest(PublishRequest&& from) noexcept
    : PublishRequest() {
    *this = ::std::move(from);
  }

  inline PublishRequest& operator=(PublishRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishRequest* internal_default_instance() {
    return reinterpret_cast<const PublishRequest*>(
               &_PublishRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PublishRequest* other);
  friend void swap(PublishRequest& a, PublishRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishRequest& from);
  void MergeFrom(const PublishRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1beta2.PubsubMessage messages = 2;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 2;
  const ::google::pubsub::v1beta2::PubsubMessage& messages(int index) const;
  ::google::pubsub::v1beta2::PubsubMessage* mutable_messages(int index);
  ::google::pubsub::v1beta2::PubsubMessage* add_messages();
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::PubsubMessage >*
      mutable_messages();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::PubsubMessage >&
      messages() const;

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.PublishRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::PubsubMessage > messages_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsPublishRequestImpl();
};
// -------------------------------------------------------------------

class PublishResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.PublishResponse) */ {
 public:
  PublishResponse();
  virtual ~PublishResponse();

  PublishResponse(const PublishResponse& from);

  inline PublishResponse& operator=(const PublishResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishResponse(PublishResponse&& from) noexcept
    : PublishResponse() {
    *this = ::std::move(from);
  }

  inline PublishResponse& operator=(PublishResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishResponse* internal_default_instance() {
    return reinterpret_cast<const PublishResponse*>(
               &_PublishResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PublishResponse* other);
  friend void swap(PublishResponse& a, PublishResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishResponse& from);
  void MergeFrom(const PublishResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string message_ids = 1;
  int message_ids_size() const;
  void clear_message_ids();
  static const int kMessageIdsFieldNumber = 1;
  const ::std::string& message_ids(int index) const;
  ::std::string* mutable_message_ids(int index);
  void set_message_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_message_ids(int index, ::std::string&& value);
  #endif
  void set_message_ids(int index, const char* value);
  void set_message_ids(int index, const char* value, size_t size);
  ::std::string* add_message_ids();
  void add_message_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_message_ids(::std::string&& value);
  #endif
  void add_message_ids(const char* value);
  void add_message_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& message_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_message_ids();

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.PublishResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> message_ids_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsPublishResponseImpl();
};
// -------------------------------------------------------------------

class ListTopicsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.ListTopicsRequest) */ {
 public:
  ListTopicsRequest();
  virtual ~ListTopicsRequest();

  ListTopicsRequest(const ListTopicsRequest& from);

  inline ListTopicsRequest& operator=(const ListTopicsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicsRequest(ListTopicsRequest&& from) noexcept
    : ListTopicsRequest() {
    *this = ::std::move(from);
  }

  inline ListTopicsRequest& operator=(ListTopicsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTopicsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTopicsRequest*>(
               &_ListTopicsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(ListTopicsRequest* other);
  friend void swap(ListTopicsRequest& a, ListTopicsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListTopicsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListTopicsRequest& from);
  void MergeFrom(const ListTopicsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListTopicsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.ListTopicsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsListTopicsRequestImpl();
};
// -------------------------------------------------------------------

class ListTopicsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.ListTopicsResponse) */ {
 public:
  ListTopicsResponse();
  virtual ~ListTopicsResponse();

  ListTopicsResponse(const ListTopicsResponse& from);

  inline ListTopicsResponse& operator=(const ListTopicsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicsResponse(ListTopicsResponse&& from) noexcept
    : ListTopicsResponse() {
    *this = ::std::move(from);
  }

  inline ListTopicsResponse& operator=(ListTopicsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTopicsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTopicsResponse*>(
               &_ListTopicsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(ListTopicsResponse* other);
  friend void swap(ListTopicsResponse& a, ListTopicsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListTopicsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListTopicsResponse& from);
  void MergeFrom(const ListTopicsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListTopicsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1beta2.Topic topics = 1;
  int topics_size() const;
  void clear_topics();
  static const int kTopicsFieldNumber = 1;
  const ::google::pubsub::v1beta2::Topic& topics(int index) const;
  ::google::pubsub::v1beta2::Topic* mutable_topics(int index);
  ::google::pubsub::v1beta2::Topic* add_topics();
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::Topic >*
      mutable_topics();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::Topic >&
      topics() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.ListTopicsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::Topic > topics_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsListTopicsResponseImpl();
};
// -------------------------------------------------------------------

class ListTopicSubscriptionsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.ListTopicSubscriptionsRequest) */ {
 public:
  ListTopicSubscriptionsRequest();
  virtual ~ListTopicSubscriptionsRequest();

  ListTopicSubscriptionsRequest(const ListTopicSubscriptionsRequest& from);

  inline ListTopicSubscriptionsRequest& operator=(const ListTopicSubscriptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicSubscriptionsRequest(ListTopicSubscriptionsRequest&& from) noexcept
    : ListTopicSubscriptionsRequest() {
    *this = ::std::move(from);
  }

  inline ListTopicSubscriptionsRequest& operator=(ListTopicSubscriptionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTopicSubscriptionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicSubscriptionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTopicSubscriptionsRequest*>(
               &_ListTopicSubscriptionsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(ListTopicSubscriptionsRequest* other);
  friend void swap(ListTopicSubscriptionsRequest& a, ListTopicSubscriptionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicSubscriptionsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListTopicSubscriptionsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListTopicSubscriptionsRequest& from);
  void MergeFrom(const ListTopicSubscriptionsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListTopicSubscriptionsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.ListTopicSubscriptionsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsListTopicSubscriptionsRequestImpl();
};
// -------------------------------------------------------------------

class ListTopicSubscriptionsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.ListTopicSubscriptionsResponse) */ {
 public:
  ListTopicSubscriptionsResponse();
  virtual ~ListTopicSubscriptionsResponse();

  ListTopicSubscriptionsResponse(const ListTopicSubscriptionsResponse& from);

  inline ListTopicSubscriptionsResponse& operator=(const ListTopicSubscriptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListTopicSubscriptionsResponse(ListTopicSubscriptionsResponse&& from) noexcept
    : ListTopicSubscriptionsResponse() {
    *this = ::std::move(from);
  }

  inline ListTopicSubscriptionsResponse& operator=(ListTopicSubscriptionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListTopicSubscriptionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListTopicSubscriptionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTopicSubscriptionsResponse*>(
               &_ListTopicSubscriptionsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(ListTopicSubscriptionsResponse* other);
  friend void swap(ListTopicSubscriptionsResponse& a, ListTopicSubscriptionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListTopicSubscriptionsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListTopicSubscriptionsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListTopicSubscriptionsResponse& from);
  void MergeFrom(const ListTopicSubscriptionsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListTopicSubscriptionsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string subscriptions = 1;
  int subscriptions_size() const;
  void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  const ::std::string& subscriptions(int index) const;
  ::std::string* mutable_subscriptions(int index);
  void set_subscriptions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subscriptions(int index, ::std::string&& value);
  #endif
  void set_subscriptions(int index, const char* value);
  void set_subscriptions(int index, const char* value, size_t size);
  ::std::string* add_subscriptions();
  void add_subscriptions(const ::std::string& value);
  #if LANG_CXX11
  void add_subscriptions(::std::string&& value);
  #endif
  void add_subscriptions(const char* value);
  void add_subscriptions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& subscriptions() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subscriptions();

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.ListTopicSubscriptionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subscriptions_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsListTopicSubscriptionsResponseImpl();
};
// -------------------------------------------------------------------

class DeleteTopicRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.DeleteTopicRequest) */ {
 public:
  DeleteTopicRequest();
  virtual ~DeleteTopicRequest();

  DeleteTopicRequest(const DeleteTopicRequest& from);

  inline DeleteTopicRequest& operator=(const DeleteTopicRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteTopicRequest(DeleteTopicRequest&& from) noexcept
    : DeleteTopicRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTopicRequest& operator=(DeleteTopicRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteTopicRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteTopicRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTopicRequest*>(
               &_DeleteTopicRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(DeleteTopicRequest* other);
  friend void swap(DeleteTopicRequest& a, DeleteTopicRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteTopicRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteTopicRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteTopicRequest& from);
  void MergeFrom(const DeleteTopicRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteTopicRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.DeleteTopicRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsDeleteTopicRequestImpl();
};
// -------------------------------------------------------------------

class Subscription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.Subscription) */ {
 public:
  Subscription();
  virtual ~Subscription();

  Subscription(const Subscription& from);

  inline Subscription& operator=(const Subscription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Subscription(Subscription&& from) noexcept
    : Subscription() {
    *this = ::std::move(from);
  }

  inline Subscription& operator=(Subscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Subscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Subscription* internal_default_instance() {
    return reinterpret_cast<const Subscription*>(
               &_Subscription_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Subscription* other);
  friend void swap(Subscription& a, Subscription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Subscription* New() const PROTOBUF_FINAL { return New(NULL); }

  Subscription* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Subscription& from);
  void MergeFrom(const Subscription& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Subscription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string topic = 2;
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .google.pubsub.v1beta2.PushConfig push_config = 4;
  bool has_push_config() const;
  void clear_push_config();
  static const int kPushConfigFieldNumber = 4;
  const ::google::pubsub::v1beta2::PushConfig& push_config() const;
  ::google::pubsub::v1beta2::PushConfig* release_push_config();
  ::google::pubsub::v1beta2::PushConfig* mutable_push_config();
  void set_allocated_push_config(::google::pubsub::v1beta2::PushConfig* push_config);

  // int32 ack_deadline_seconds = 5;
  void clear_ack_deadline_seconds();
  static const int kAckDeadlineSecondsFieldNumber = 5;
  ::google::protobuf::int32 ack_deadline_seconds() const;
  void set_ack_deadline_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.Subscription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::pubsub::v1beta2::PushConfig* push_config_;
  ::google::protobuf::int32 ack_deadline_seconds_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsSubscriptionImpl();
};
// -------------------------------------------------------------------

class PushConfig_AttributesEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<PushConfig_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<PushConfig_AttributesEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  PushConfig_AttributesEntry_DoNotUse();
  PushConfig_AttributesEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const PushConfig_AttributesEntry_DoNotUse& other);
  static const PushConfig_AttributesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const PushConfig_AttributesEntry_DoNotUse*>(&_PushConfig_AttributesEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class PushConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.PushConfig) */ {
 public:
  PushConfig();
  virtual ~PushConfig();

  PushConfig(const PushConfig& from);

  inline PushConfig& operator=(const PushConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushConfig(PushConfig&& from) noexcept
    : PushConfig() {
    *this = ::std::move(from);
  }

  inline PushConfig& operator=(PushConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PushConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushConfig* internal_default_instance() {
    return reinterpret_cast<const PushConfig*>(
               &_PushConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(PushConfig* other);
  friend void swap(PushConfig& a, PushConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  PushConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PushConfig& from);
  void MergeFrom(const PushConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PushConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> attributes = 2;
  int attributes_size() const;
  void clear_attributes();
  static const int kAttributesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      attributes() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_attributes();

  // string push_endpoint = 1;
  void clear_push_endpoint();
  static const int kPushEndpointFieldNumber = 1;
  const ::std::string& push_endpoint() const;
  void set_push_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_push_endpoint(::std::string&& value);
  #endif
  void set_push_endpoint(const char* value);
  void set_push_endpoint(const char* value, size_t size);
  ::std::string* mutable_push_endpoint();
  ::std::string* release_push_endpoint();
  void set_allocated_push_endpoint(::std::string* push_endpoint);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.PushConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      PushConfig_AttributesEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > attributes_;
  ::google::protobuf::internal::ArenaStringPtr push_endpoint_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsPushConfigImpl();
};
// -------------------------------------------------------------------

class ReceivedMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.ReceivedMessage) */ {
 public:
  ReceivedMessage();
  virtual ~ReceivedMessage();

  ReceivedMessage(const ReceivedMessage& from);

  inline ReceivedMessage& operator=(const ReceivedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReceivedMessage(ReceivedMessage&& from) noexcept
    : ReceivedMessage() {
    *this = ::std::move(from);
  }

  inline ReceivedMessage& operator=(ReceivedMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceivedMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReceivedMessage* internal_default_instance() {
    return reinterpret_cast<const ReceivedMessage*>(
               &_ReceivedMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ReceivedMessage* other);
  friend void swap(ReceivedMessage& a, ReceivedMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReceivedMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  ReceivedMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ReceivedMessage& from);
  void MergeFrom(const ReceivedMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ReceivedMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ack_id = 1;
  void clear_ack_id();
  static const int kAckIdFieldNumber = 1;
  const ::std::string& ack_id() const;
  void set_ack_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ack_id(::std::string&& value);
  #endif
  void set_ack_id(const char* value);
  void set_ack_id(const char* value, size_t size);
  ::std::string* mutable_ack_id();
  ::std::string* release_ack_id();
  void set_allocated_ack_id(::std::string* ack_id);

  // .google.pubsub.v1beta2.PubsubMessage message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::google::pubsub::v1beta2::PubsubMessage& message() const;
  ::google::pubsub::v1beta2::PubsubMessage* release_message();
  ::google::pubsub::v1beta2::PubsubMessage* mutable_message();
  void set_allocated_message(::google::pubsub::v1beta2::PubsubMessage* message);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.ReceivedMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ack_id_;
  ::google::pubsub::v1beta2::PubsubMessage* message_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsReceivedMessageImpl();
};
// -------------------------------------------------------------------

class GetSubscriptionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.GetSubscriptionRequest) */ {
 public:
  GetSubscriptionRequest();
  virtual ~GetSubscriptionRequest();

  GetSubscriptionRequest(const GetSubscriptionRequest& from);

  inline GetSubscriptionRequest& operator=(const GetSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetSubscriptionRequest(GetSubscriptionRequest&& from) noexcept
    : GetSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline GetSubscriptionRequest& operator=(GetSubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetSubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const GetSubscriptionRequest*>(
               &_GetSubscriptionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(GetSubscriptionRequest* other);
  friend void swap(GetSubscriptionRequest& a, GetSubscriptionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetSubscriptionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  GetSubscriptionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GetSubscriptionRequest& from);
  void MergeFrom(const GetSubscriptionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GetSubscriptionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.GetSubscriptionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsGetSubscriptionRequestImpl();
};
// -------------------------------------------------------------------

class ListSubscriptionsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.ListSubscriptionsRequest) */ {
 public:
  ListSubscriptionsRequest();
  virtual ~ListSubscriptionsRequest();

  ListSubscriptionsRequest(const ListSubscriptionsRequest& from);

  inline ListSubscriptionsRequest& operator=(const ListSubscriptionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListSubscriptionsRequest(ListSubscriptionsRequest&& from) noexcept
    : ListSubscriptionsRequest() {
    *this = ::std::move(from);
  }

  inline ListSubscriptionsRequest& operator=(ListSubscriptionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSubscriptionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSubscriptionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListSubscriptionsRequest*>(
               &_ListSubscriptionsRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(ListSubscriptionsRequest* other);
  friend void swap(ListSubscriptionsRequest& a, ListSubscriptionsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListSubscriptionsRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ListSubscriptionsRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListSubscriptionsRequest& from);
  void MergeFrom(const ListSubscriptionsRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListSubscriptionsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project = 1;
  void clear_project();
  static const int kProjectFieldNumber = 1;
  const ::std::string& project() const;
  void set_project(const ::std::string& value);
  #if LANG_CXX11
  void set_project(::std::string&& value);
  #endif
  void set_project(const char* value);
  void set_project(const char* value, size_t size);
  ::std::string* mutable_project();
  ::std::string* release_project();
  void set_allocated_project(::std::string* project);

  // string page_token = 3;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 3;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 2;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 2;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.ListSubscriptionsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsListSubscriptionsRequestImpl();
};
// -------------------------------------------------------------------

class ListSubscriptionsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.ListSubscriptionsResponse) */ {
 public:
  ListSubscriptionsResponse();
  virtual ~ListSubscriptionsResponse();

  ListSubscriptionsResponse(const ListSubscriptionsResponse& from);

  inline ListSubscriptionsResponse& operator=(const ListSubscriptionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListSubscriptionsResponse(ListSubscriptionsResponse&& from) noexcept
    : ListSubscriptionsResponse() {
    *this = ::std::move(from);
  }

  inline ListSubscriptionsResponse& operator=(ListSubscriptionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListSubscriptionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSubscriptionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListSubscriptionsResponse*>(
               &_ListSubscriptionsResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(ListSubscriptionsResponse* other);
  friend void swap(ListSubscriptionsResponse& a, ListSubscriptionsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListSubscriptionsResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  ListSubscriptionsResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ListSubscriptionsResponse& from);
  void MergeFrom(const ListSubscriptionsResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ListSubscriptionsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1beta2.Subscription subscriptions = 1;
  int subscriptions_size() const;
  void clear_subscriptions();
  static const int kSubscriptionsFieldNumber = 1;
  const ::google::pubsub::v1beta2::Subscription& subscriptions(int index) const;
  ::google::pubsub::v1beta2::Subscription* mutable_subscriptions(int index);
  ::google::pubsub::v1beta2::Subscription* add_subscriptions();
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::Subscription >*
      mutable_subscriptions();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::Subscription >&
      subscriptions() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.ListSubscriptionsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::Subscription > subscriptions_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsListSubscriptionsResponseImpl();
};
// -------------------------------------------------------------------

class DeleteSubscriptionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.DeleteSubscriptionRequest) */ {
 public:
  DeleteSubscriptionRequest();
  virtual ~DeleteSubscriptionRequest();

  DeleteSubscriptionRequest(const DeleteSubscriptionRequest& from);

  inline DeleteSubscriptionRequest& operator=(const DeleteSubscriptionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteSubscriptionRequest(DeleteSubscriptionRequest&& from) noexcept
    : DeleteSubscriptionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSubscriptionRequest& operator=(DeleteSubscriptionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteSubscriptionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSubscriptionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSubscriptionRequest*>(
               &_DeleteSubscriptionRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(DeleteSubscriptionRequest* other);
  friend void swap(DeleteSubscriptionRequest& a, DeleteSubscriptionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteSubscriptionRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DeleteSubscriptionRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const DeleteSubscriptionRequest& from);
  void MergeFrom(const DeleteSubscriptionRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(DeleteSubscriptionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.DeleteSubscriptionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsDeleteSubscriptionRequestImpl();
};
// -------------------------------------------------------------------

class ModifyPushConfigRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.ModifyPushConfigRequest) */ {
 public:
  ModifyPushConfigRequest();
  virtual ~ModifyPushConfigRequest();

  ModifyPushConfigRequest(const ModifyPushConfigRequest& from);

  inline ModifyPushConfigRequest& operator=(const ModifyPushConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModifyPushConfigRequest(ModifyPushConfigRequest&& from) noexcept
    : ModifyPushConfigRequest() {
    *this = ::std::move(from);
  }

  inline ModifyPushConfigRequest& operator=(ModifyPushConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyPushConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyPushConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyPushConfigRequest*>(
               &_ModifyPushConfigRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(ModifyPushConfigRequest* other);
  friend void swap(ModifyPushConfigRequest& a, ModifyPushConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModifyPushConfigRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ModifyPushConfigRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModifyPushConfigRequest& from);
  void MergeFrom(const ModifyPushConfigRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModifyPushConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);

  // .google.pubsub.v1beta2.PushConfig push_config = 2;
  bool has_push_config() const;
  void clear_push_config();
  static const int kPushConfigFieldNumber = 2;
  const ::google::pubsub::v1beta2::PushConfig& push_config() const;
  ::google::pubsub::v1beta2::PushConfig* release_push_config();
  ::google::pubsub::v1beta2::PushConfig* mutable_push_config();
  void set_allocated_push_config(::google::pubsub::v1beta2::PushConfig* push_config);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.ModifyPushConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  ::google::pubsub::v1beta2::PushConfig* push_config_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsModifyPushConfigRequestImpl();
};
// -------------------------------------------------------------------

class PullRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.PullRequest) */ {
 public:
  PullRequest();
  virtual ~PullRequest();

  PullRequest(const PullRequest& from);

  inline PullRequest& operator=(const PullRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PullRequest(PullRequest&& from) noexcept
    : PullRequest() {
    *this = ::std::move(from);
  }

  inline PullRequest& operator=(PullRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PullRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullRequest* internal_default_instance() {
    return reinterpret_cast<const PullRequest*>(
               &_PullRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(PullRequest* other);
  friend void swap(PullRequest& a, PullRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  PullRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PullRequest& from);
  void MergeFrom(const PullRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PullRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);

  // bool return_immediately = 2;
  void clear_return_immediately();
  static const int kReturnImmediatelyFieldNumber = 2;
  bool return_immediately() const;
  void set_return_immediately(bool value);

  // int32 max_messages = 3;
  void clear_max_messages();
  static const int kMaxMessagesFieldNumber = 3;
  ::google::protobuf::int32 max_messages() const;
  void set_max_messages(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.PullRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  bool return_immediately_;
  ::google::protobuf::int32 max_messages_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsPullRequestImpl();
};
// -------------------------------------------------------------------

class PullResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.PullResponse) */ {
 public:
  PullResponse();
  virtual ~PullResponse();

  PullResponse(const PullResponse& from);

  inline PullResponse& operator=(const PullResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PullResponse(PullResponse&& from) noexcept
    : PullResponse() {
    *this = ::std::move(from);
  }

  inline PullResponse& operator=(PullResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PullResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullResponse* internal_default_instance() {
    return reinterpret_cast<const PullResponse*>(
               &_PullResponse_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(PullResponse* other);
  friend void swap(PullResponse& a, PullResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullResponse* New() const PROTOBUF_FINAL { return New(NULL); }

  PullResponse* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PullResponse& from);
  void MergeFrom(const PullResponse& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PullResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.pubsub.v1beta2.ReceivedMessage received_messages = 1;
  int received_messages_size() const;
  void clear_received_messages();
  static const int kReceivedMessagesFieldNumber = 1;
  const ::google::pubsub::v1beta2::ReceivedMessage& received_messages(int index) const;
  ::google::pubsub::v1beta2::ReceivedMessage* mutable_received_messages(int index);
  ::google::pubsub::v1beta2::ReceivedMessage* add_received_messages();
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::ReceivedMessage >*
      mutable_received_messages();
  const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::ReceivedMessage >&
      received_messages() const;

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.PullResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::ReceivedMessage > received_messages_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsPullResponseImpl();
};
// -------------------------------------------------------------------

class ModifyAckDeadlineRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.ModifyAckDeadlineRequest) */ {
 public:
  ModifyAckDeadlineRequest();
  virtual ~ModifyAckDeadlineRequest();

  ModifyAckDeadlineRequest(const ModifyAckDeadlineRequest& from);

  inline ModifyAckDeadlineRequest& operator=(const ModifyAckDeadlineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ModifyAckDeadlineRequest(ModifyAckDeadlineRequest&& from) noexcept
    : ModifyAckDeadlineRequest() {
    *this = ::std::move(from);
  }

  inline ModifyAckDeadlineRequest& operator=(ModifyAckDeadlineRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ModifyAckDeadlineRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModifyAckDeadlineRequest* internal_default_instance() {
    return reinterpret_cast<const ModifyAckDeadlineRequest*>(
               &_ModifyAckDeadlineRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(ModifyAckDeadlineRequest* other);
  friend void swap(ModifyAckDeadlineRequest& a, ModifyAckDeadlineRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ModifyAckDeadlineRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  ModifyAckDeadlineRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ModifyAckDeadlineRequest& from);
  void MergeFrom(const ModifyAckDeadlineRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ModifyAckDeadlineRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);

  // string ack_id = 2;
  void clear_ack_id();
  static const int kAckIdFieldNumber = 2;
  const ::std::string& ack_id() const;
  void set_ack_id(const ::std::string& value);
  #if LANG_CXX11
  void set_ack_id(::std::string&& value);
  #endif
  void set_ack_id(const char* value);
  void set_ack_id(const char* value, size_t size);
  ::std::string* mutable_ack_id();
  ::std::string* release_ack_id();
  void set_allocated_ack_id(::std::string* ack_id);

  // int32 ack_deadline_seconds = 3;
  void clear_ack_deadline_seconds();
  static const int kAckDeadlineSecondsFieldNumber = 3;
  ::google::protobuf::int32 ack_deadline_seconds() const;
  void set_ack_deadline_seconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.ModifyAckDeadlineRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  ::google::protobuf::internal::ArenaStringPtr ack_id_;
  ::google::protobuf::int32 ack_deadline_seconds_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsModifyAckDeadlineRequestImpl();
};
// -------------------------------------------------------------------

class AcknowledgeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.pubsub.v1beta2.AcknowledgeRequest) */ {
 public:
  AcknowledgeRequest();
  virtual ~AcknowledgeRequest();

  AcknowledgeRequest(const AcknowledgeRequest& from);

  inline AcknowledgeRequest& operator=(const AcknowledgeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcknowledgeRequest(AcknowledgeRequest&& from) noexcept
    : AcknowledgeRequest() {
    *this = ::std::move(from);
  }

  inline AcknowledgeRequest& operator=(AcknowledgeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AcknowledgeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcknowledgeRequest* internal_default_instance() {
    return reinterpret_cast<const AcknowledgeRequest*>(
               &_AcknowledgeRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(AcknowledgeRequest* other);
  friend void swap(AcknowledgeRequest& a, AcknowledgeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcknowledgeRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  AcknowledgeRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AcknowledgeRequest& from);
  void MergeFrom(const AcknowledgeRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AcknowledgeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string ack_ids = 2;
  int ack_ids_size() const;
  void clear_ack_ids();
  static const int kAckIdsFieldNumber = 2;
  const ::std::string& ack_ids(int index) const;
  ::std::string* mutable_ack_ids(int index);
  void set_ack_ids(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_ack_ids(int index, ::std::string&& value);
  #endif
  void set_ack_ids(int index, const char* value);
  void set_ack_ids(int index, const char* value, size_t size);
  ::std::string* add_ack_ids();
  void add_ack_ids(const ::std::string& value);
  #if LANG_CXX11
  void add_ack_ids(::std::string&& value);
  #endif
  void add_ack_ids(const char* value);
  void add_ack_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& ack_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_ack_ids();

  // string subscription = 1;
  void clear_subscription();
  static const int kSubscriptionFieldNumber = 1;
  const ::std::string& subscription() const;
  void set_subscription(const ::std::string& value);
  #if LANG_CXX11
  void set_subscription(::std::string&& value);
  #endif
  void set_subscription(const char* value);
  void set_subscription(const char* value, size_t size);
  ::std::string* mutable_subscription();
  ::std::string* release_subscription();
  void set_allocated_subscription(::std::string* subscription);

  // @@protoc_insertion_point(class_scope:google.pubsub.v1beta2.AcknowledgeRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> ack_ids_;
  ::google::protobuf::internal::ArenaStringPtr subscription_;
  mutable int _cached_size_;
  friend struct ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::TableStruct;
  friend void ::protobuf_google_2fpubsub_2fv1beta2_2fpubsub_2eproto::InitDefaultsAcknowledgeRequestImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Topic

// string name = 1;
inline void Topic::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Topic::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.Topic.name)
  return name_.GetNoArena();
}
inline void Topic::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.Topic.name)
}
#if LANG_CXX11
inline void Topic::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.Topic.name)
}
#endif
inline void Topic::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.Topic.name)
}
inline void Topic::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.Topic.name)
}
inline ::std::string* Topic::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.Topic.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Topic::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.Topic.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Topic::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.Topic.name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PubsubMessage

// bytes data = 1;
inline void PubsubMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PubsubMessage::data() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.PubsubMessage.data)
  return data_.GetNoArena();
}
inline void PubsubMessage::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.PubsubMessage.data)
}
#if LANG_CXX11
inline void PubsubMessage::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.PubsubMessage.data)
}
#endif
inline void PubsubMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.PubsubMessage.data)
}
inline void PubsubMessage::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.PubsubMessage.data)
}
inline ::std::string* PubsubMessage::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.PubsubMessage.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PubsubMessage::release_data() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.PubsubMessage.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PubsubMessage::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.PubsubMessage.data)
}

// map<string, string> attributes = 2;
inline int PubsubMessage::attributes_size() const {
  return attributes_.size();
}
inline void PubsubMessage::clear_attributes() {
  attributes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
PubsubMessage::attributes() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1beta2.PubsubMessage.attributes)
  return attributes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
PubsubMessage::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1beta2.PubsubMessage.attributes)
  return attributes_.MutableMap();
}

// string message_id = 3;
inline void PubsubMessage::clear_message_id() {
  message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PubsubMessage::message_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.PubsubMessage.message_id)
  return message_id_.GetNoArena();
}
inline void PubsubMessage::set_message_id(const ::std::string& value) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.PubsubMessage.message_id)
}
#if LANG_CXX11
inline void PubsubMessage::set_message_id(::std::string&& value) {
  
  message_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.PubsubMessage.message_id)
}
#endif
inline void PubsubMessage::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.PubsubMessage.message_id)
}
inline void PubsubMessage::set_message_id(const char* value, size_t size) {
  
  message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.PubsubMessage.message_id)
}
inline ::std::string* PubsubMessage::mutable_message_id() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.PubsubMessage.message_id)
  return message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PubsubMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.PubsubMessage.message_id)
  
  return message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PubsubMessage::set_allocated_message_id(::std::string* message_id) {
  if (message_id != NULL) {
    
  } else {
    
  }
  message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_id);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.PubsubMessage.message_id)
}

// -------------------------------------------------------------------

// GetTopicRequest

// string topic = 1;
inline void GetTopicRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetTopicRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.GetTopicRequest.topic)
  return topic_.GetNoArena();
}
inline void GetTopicRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.GetTopicRequest.topic)
}
#if LANG_CXX11
inline void GetTopicRequest::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.GetTopicRequest.topic)
}
#endif
inline void GetTopicRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.GetTopicRequest.topic)
}
inline void GetTopicRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.GetTopicRequest.topic)
}
inline ::std::string* GetTopicRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.GetTopicRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTopicRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.GetTopicRequest.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTopicRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.GetTopicRequest.topic)
}

// -------------------------------------------------------------------

// PublishRequest

// string topic = 1;
inline void PublishRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublishRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.PublishRequest.topic)
  return topic_.GetNoArena();
}
inline void PublishRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.PublishRequest.topic)
}
#if LANG_CXX11
inline void PublishRequest::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.PublishRequest.topic)
}
#endif
inline void PublishRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.PublishRequest.topic)
}
inline void PublishRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.PublishRequest.topic)
}
inline ::std::string* PublishRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.PublishRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublishRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.PublishRequest.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.PublishRequest.topic)
}

// repeated .google.pubsub.v1beta2.PubsubMessage messages = 2;
inline int PublishRequest::messages_size() const {
  return messages_.size();
}
inline void PublishRequest::clear_messages() {
  messages_.Clear();
}
inline const ::google::pubsub::v1beta2::PubsubMessage& PublishRequest::messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.PublishRequest.messages)
  return messages_.Get(index);
}
inline ::google::pubsub::v1beta2::PubsubMessage* PublishRequest::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.PublishRequest.messages)
  return messages_.Mutable(index);
}
inline ::google::pubsub::v1beta2::PubsubMessage* PublishRequest::add_messages() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1beta2.PublishRequest.messages)
  return messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::PubsubMessage >*
PublishRequest::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1beta2.PublishRequest.messages)
  return &messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::PubsubMessage >&
PublishRequest::messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1beta2.PublishRequest.messages)
  return messages_;
}

// -------------------------------------------------------------------

// PublishResponse

// repeated string message_ids = 1;
inline int PublishResponse::message_ids_size() const {
  return message_ids_.size();
}
inline void PublishResponse::clear_message_ids() {
  message_ids_.Clear();
}
inline const ::std::string& PublishResponse::message_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.PublishResponse.message_ids)
  return message_ids_.Get(index);
}
inline ::std::string* PublishResponse::mutable_message_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.PublishResponse.message_ids)
  return message_ids_.Mutable(index);
}
inline void PublishResponse::set_message_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.PublishResponse.message_ids)
  message_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PublishResponse::set_message_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.PublishResponse.message_ids)
  message_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PublishResponse::set_message_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  message_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.PublishResponse.message_ids)
}
inline void PublishResponse::set_message_ids(int index, const char* value, size_t size) {
  message_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.PublishResponse.message_ids)
}
inline ::std::string* PublishResponse::add_message_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1beta2.PublishResponse.message_ids)
  return message_ids_.Add();
}
inline void PublishResponse::add_message_ids(const ::std::string& value) {
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1beta2.PublishResponse.message_ids)
}
#if LANG_CXX11
inline void PublishResponse::add_message_ids(::std::string&& value) {
  message_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1beta2.PublishResponse.message_ids)
}
#endif
inline void PublishResponse::add_message_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  message_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1beta2.PublishResponse.message_ids)
}
inline void PublishResponse::add_message_ids(const char* value, size_t size) {
  message_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1beta2.PublishResponse.message_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PublishResponse::message_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1beta2.PublishResponse.message_ids)
  return message_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PublishResponse::mutable_message_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1beta2.PublishResponse.message_ids)
  return &message_ids_;
}

// -------------------------------------------------------------------

// ListTopicsRequest

// string project = 1;
inline void ListTopicsRequest::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTopicsRequest::project() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListTopicsRequest.project)
  return project_.GetNoArena();
}
inline void ListTopicsRequest::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListTopicsRequest.project)
}
#if LANG_CXX11
inline void ListTopicsRequest::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.ListTopicsRequest.project)
}
#endif
inline void ListTopicsRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ListTopicsRequest.project)
}
inline void ListTopicsRequest::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ListTopicsRequest.project)
}
inline ::std::string* ListTopicsRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ListTopicsRequest.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTopicsRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ListTopicsRequest.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTopicsRequest::set_allocated_project(::std::string* project) {
  if (project != NULL) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ListTopicsRequest.project)
}

// int32 page_size = 2;
inline void ListTopicsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListTopicsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListTopicsRequest.page_size)
  return page_size_;
}
inline void ListTopicsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListTopicsRequest.page_size)
}

// string page_token = 3;
inline void ListTopicsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTopicsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListTopicsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListTopicsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListTopicsRequest.page_token)
}
#if LANG_CXX11
inline void ListTopicsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.ListTopicsRequest.page_token)
}
#endif
inline void ListTopicsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ListTopicsRequest.page_token)
}
inline void ListTopicsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ListTopicsRequest.page_token)
}
inline ::std::string* ListTopicsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ListTopicsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTopicsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ListTopicsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTopicsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ListTopicsRequest.page_token)
}

// -------------------------------------------------------------------

// ListTopicsResponse

// repeated .google.pubsub.v1beta2.Topic topics = 1;
inline int ListTopicsResponse::topics_size() const {
  return topics_.size();
}
inline void ListTopicsResponse::clear_topics() {
  topics_.Clear();
}
inline const ::google::pubsub::v1beta2::Topic& ListTopicsResponse::topics(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListTopicsResponse.topics)
  return topics_.Get(index);
}
inline ::google::pubsub::v1beta2::Topic* ListTopicsResponse::mutable_topics(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ListTopicsResponse.topics)
  return topics_.Mutable(index);
}
inline ::google::pubsub::v1beta2::Topic* ListTopicsResponse::add_topics() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1beta2.ListTopicsResponse.topics)
  return topics_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::Topic >*
ListTopicsResponse::mutable_topics() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1beta2.ListTopicsResponse.topics)
  return &topics_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::Topic >&
ListTopicsResponse::topics() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1beta2.ListTopicsResponse.topics)
  return topics_;
}

// string next_page_token = 2;
inline void ListTopicsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTopicsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListTopicsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListTopicsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListTopicsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListTopicsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.ListTopicsResponse.next_page_token)
}
#endif
inline void ListTopicsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ListTopicsResponse.next_page_token)
}
inline void ListTopicsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ListTopicsResponse.next_page_token)
}
inline ::std::string* ListTopicsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ListTopicsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTopicsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ListTopicsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTopicsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ListTopicsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListTopicSubscriptionsRequest

// string topic = 1;
inline void ListTopicSubscriptionsRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTopicSubscriptionsRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.topic)
  return topic_.GetNoArena();
}
inline void ListTopicSubscriptionsRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.topic)
}
#if LANG_CXX11
inline void ListTopicSubscriptionsRequest::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.topic)
}
#endif
inline void ListTopicSubscriptionsRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.topic)
}
inline void ListTopicSubscriptionsRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.topic)
}
inline ::std::string* ListTopicSubscriptionsRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTopicSubscriptionsRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTopicSubscriptionsRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.topic)
}

// int32 page_size = 2;
inline void ListTopicSubscriptionsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListTopicSubscriptionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.page_size)
  return page_size_;
}
inline void ListTopicSubscriptionsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.page_size)
}

// string page_token = 3;
inline void ListTopicSubscriptionsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTopicSubscriptionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListTopicSubscriptionsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.page_token)
}
#if LANG_CXX11
inline void ListTopicSubscriptionsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.page_token)
}
#endif
inline void ListTopicSubscriptionsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.page_token)
}
inline void ListTopicSubscriptionsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.page_token)
}
inline ::std::string* ListTopicSubscriptionsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTopicSubscriptionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTopicSubscriptionsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ListTopicSubscriptionsRequest.page_token)
}

// -------------------------------------------------------------------

// ListTopicSubscriptionsResponse

// repeated string subscriptions = 1;
inline int ListTopicSubscriptionsResponse::subscriptions_size() const {
  return subscriptions_.size();
}
inline void ListTopicSubscriptionsResponse::clear_subscriptions() {
  subscriptions_.Clear();
}
inline const ::std::string& ListTopicSubscriptionsResponse::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Get(index);
}
inline ::std::string* ListTopicSubscriptionsResponse::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Mutable(index);
}
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.subscriptions)
  subscriptions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.subscriptions)
  subscriptions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subscriptions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.subscriptions)
}
inline void ListTopicSubscriptionsResponse::set_subscriptions(int index, const char* value, size_t size) {
  subscriptions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.subscriptions)
}
inline ::std::string* ListTopicSubscriptionsResponse::add_subscriptions() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_.Add();
}
inline void ListTopicSubscriptionsResponse::add_subscriptions(const ::std::string& value) {
  subscriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.subscriptions)
}
#if LANG_CXX11
inline void ListTopicSubscriptionsResponse::add_subscriptions(::std::string&& value) {
  subscriptions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.subscriptions)
}
#endif
inline void ListTopicSubscriptionsResponse::add_subscriptions(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subscriptions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.subscriptions)
}
inline void ListTopicSubscriptionsResponse::add_subscriptions(const char* value, size_t size) {
  subscriptions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.subscriptions)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ListTopicSubscriptionsResponse::subscriptions() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.subscriptions)
  return subscriptions_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ListTopicSubscriptionsResponse::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.subscriptions)
  return &subscriptions_;
}

// string next_page_token = 2;
inline void ListTopicSubscriptionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListTopicSubscriptionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListTopicSubscriptionsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListTopicSubscriptionsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.next_page_token)
}
#endif
inline void ListTopicSubscriptionsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.next_page_token)
}
inline void ListTopicSubscriptionsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.next_page_token)
}
inline ::std::string* ListTopicSubscriptionsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListTopicSubscriptionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListTopicSubscriptionsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ListTopicSubscriptionsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteTopicRequest

// string topic = 1;
inline void DeleteTopicRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteTopicRequest::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.DeleteTopicRequest.topic)
  return topic_.GetNoArena();
}
inline void DeleteTopicRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.DeleteTopicRequest.topic)
}
#if LANG_CXX11
inline void DeleteTopicRequest::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.DeleteTopicRequest.topic)
}
#endif
inline void DeleteTopicRequest::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.DeleteTopicRequest.topic)
}
inline void DeleteTopicRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.DeleteTopicRequest.topic)
}
inline ::std::string* DeleteTopicRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.DeleteTopicRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteTopicRequest::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.DeleteTopicRequest.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteTopicRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.DeleteTopicRequest.topic)
}

// -------------------------------------------------------------------

// Subscription

// string name = 1;
inline void Subscription::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Subscription::name() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.Subscription.name)
  return name_.GetNoArena();
}
inline void Subscription::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.Subscription.name)
}
#if LANG_CXX11
inline void Subscription::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.Subscription.name)
}
#endif
inline void Subscription::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.Subscription.name)
}
inline void Subscription::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.Subscription.name)
}
inline ::std::string* Subscription::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.Subscription.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscription::release_name() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.Subscription.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscription::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.Subscription.name)
}

// string topic = 2;
inline void Subscription::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Subscription::topic() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.Subscription.topic)
  return topic_.GetNoArena();
}
inline void Subscription::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.Subscription.topic)
}
#if LANG_CXX11
inline void Subscription::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.Subscription.topic)
}
#endif
inline void Subscription::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.Subscription.topic)
}
inline void Subscription::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.Subscription.topic)
}
inline ::std::string* Subscription::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.Subscription.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Subscription::release_topic() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.Subscription.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Subscription::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.Subscription.topic)
}

// .google.pubsub.v1beta2.PushConfig push_config = 4;
inline bool Subscription::has_push_config() const {
  return this != internal_default_instance() && push_config_ != NULL;
}
inline void Subscription::clear_push_config() {
  if (GetArenaNoVirtual() == NULL && push_config_ != NULL) {
    delete push_config_;
  }
  push_config_ = NULL;
}
inline const ::google::pubsub::v1beta2::PushConfig& Subscription::push_config() const {
  const ::google::pubsub::v1beta2::PushConfig* p = push_config_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.Subscription.push_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::pubsub::v1beta2::PushConfig*>(
      &::google::pubsub::v1beta2::_PushConfig_default_instance_);
}
inline ::google::pubsub::v1beta2::PushConfig* Subscription::release_push_config() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.Subscription.push_config)
  
  ::google::pubsub::v1beta2::PushConfig* temp = push_config_;
  push_config_ = NULL;
  return temp;
}
inline ::google::pubsub::v1beta2::PushConfig* Subscription::mutable_push_config() {
  
  if (push_config_ == NULL) {
    push_config_ = new ::google::pubsub::v1beta2::PushConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.Subscription.push_config)
  return push_config_;
}
inline void Subscription::set_allocated_push_config(::google::pubsub::v1beta2::PushConfig* push_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete push_config_;
  }
  if (push_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      push_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, push_config, submessage_arena);
    }
    
  } else {
    
  }
  push_config_ = push_config;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.Subscription.push_config)
}

// int32 ack_deadline_seconds = 5;
inline void Subscription::clear_ack_deadline_seconds() {
  ack_deadline_seconds_ = 0;
}
inline ::google::protobuf::int32 Subscription::ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.Subscription.ack_deadline_seconds)
  return ack_deadline_seconds_;
}
inline void Subscription::set_ack_deadline_seconds(::google::protobuf::int32 value) {
  
  ack_deadline_seconds_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.Subscription.ack_deadline_seconds)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PushConfig

// string push_endpoint = 1;
inline void PushConfig::clear_push_endpoint() {
  push_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PushConfig::push_endpoint() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.PushConfig.push_endpoint)
  return push_endpoint_.GetNoArena();
}
inline void PushConfig::set_push_endpoint(const ::std::string& value) {
  
  push_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.PushConfig.push_endpoint)
}
#if LANG_CXX11
inline void PushConfig::set_push_endpoint(::std::string&& value) {
  
  push_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.PushConfig.push_endpoint)
}
#endif
inline void PushConfig::set_push_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  push_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.PushConfig.push_endpoint)
}
inline void PushConfig::set_push_endpoint(const char* value, size_t size) {
  
  push_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.PushConfig.push_endpoint)
}
inline ::std::string* PushConfig::mutable_push_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.PushConfig.push_endpoint)
  return push_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PushConfig::release_push_endpoint() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.PushConfig.push_endpoint)
  
  return push_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PushConfig::set_allocated_push_endpoint(::std::string* push_endpoint) {
  if (push_endpoint != NULL) {
    
  } else {
    
  }
  push_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), push_endpoint);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.PushConfig.push_endpoint)
}

// map<string, string> attributes = 2;
inline int PushConfig::attributes_size() const {
  return attributes_.size();
}
inline void PushConfig::clear_attributes() {
  attributes_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
PushConfig::attributes() const {
  // @@protoc_insertion_point(field_map:google.pubsub.v1beta2.PushConfig.attributes)
  return attributes_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
PushConfig::mutable_attributes() {
  // @@protoc_insertion_point(field_mutable_map:google.pubsub.v1beta2.PushConfig.attributes)
  return attributes_.MutableMap();
}

// -------------------------------------------------------------------

// ReceivedMessage

// string ack_id = 1;
inline void ReceivedMessage::clear_ack_id() {
  ack_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReceivedMessage::ack_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ReceivedMessage.ack_id)
  return ack_id_.GetNoArena();
}
inline void ReceivedMessage::set_ack_id(const ::std::string& value) {
  
  ack_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ReceivedMessage.ack_id)
}
#if LANG_CXX11
inline void ReceivedMessage::set_ack_id(::std::string&& value) {
  
  ack_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.ReceivedMessage.ack_id)
}
#endif
inline void ReceivedMessage::set_ack_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ack_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ReceivedMessage.ack_id)
}
inline void ReceivedMessage::set_ack_id(const char* value, size_t size) {
  
  ack_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ReceivedMessage.ack_id)
}
inline ::std::string* ReceivedMessage::mutable_ack_id() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ReceivedMessage.ack_id)
  return ack_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReceivedMessage::release_ack_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ReceivedMessage.ack_id)
  
  return ack_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReceivedMessage::set_allocated_ack_id(::std::string* ack_id) {
  if (ack_id != NULL) {
    
  } else {
    
  }
  ack_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ack_id);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ReceivedMessage.ack_id)
}

// .google.pubsub.v1beta2.PubsubMessage message = 2;
inline bool ReceivedMessage::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void ReceivedMessage::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) {
    delete message_;
  }
  message_ = NULL;
}
inline const ::google::pubsub::v1beta2::PubsubMessage& ReceivedMessage::message() const {
  const ::google::pubsub::v1beta2::PubsubMessage* p = message_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ReceivedMessage.message)
  return p != NULL ? *p : *reinterpret_cast<const ::google::pubsub::v1beta2::PubsubMessage*>(
      &::google::pubsub::v1beta2::_PubsubMessage_default_instance_);
}
inline ::google::pubsub::v1beta2::PubsubMessage* ReceivedMessage::release_message() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ReceivedMessage.message)
  
  ::google::pubsub::v1beta2::PubsubMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::google::pubsub::v1beta2::PubsubMessage* ReceivedMessage::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::google::pubsub::v1beta2::PubsubMessage;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ReceivedMessage.message)
  return message_;
}
inline void ReceivedMessage::set_allocated_message(::google::pubsub::v1beta2::PubsubMessage* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete message_;
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ReceivedMessage.message)
}

// -------------------------------------------------------------------

// GetSubscriptionRequest

// string subscription = 1;
inline void GetSubscriptionRequest::clear_subscription() {
  subscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetSubscriptionRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.GetSubscriptionRequest.subscription)
  return subscription_.GetNoArena();
}
inline void GetSubscriptionRequest::set_subscription(const ::std::string& value) {
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.GetSubscriptionRequest.subscription)
}
#if LANG_CXX11
inline void GetSubscriptionRequest::set_subscription(::std::string&& value) {
  
  subscription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.GetSubscriptionRequest.subscription)
}
#endif
inline void GetSubscriptionRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.GetSubscriptionRequest.subscription)
}
inline void GetSubscriptionRequest::set_subscription(const char* value, size_t size) {
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.GetSubscriptionRequest.subscription)
}
inline ::std::string* GetSubscriptionRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.GetSubscriptionRequest.subscription)
  return subscription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.GetSubscriptionRequest.subscription)
  
  return subscription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetSubscriptionRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.GetSubscriptionRequest.subscription)
}

// -------------------------------------------------------------------

// ListSubscriptionsRequest

// string project = 1;
inline void ListSubscriptionsRequest::clear_project() {
  project_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListSubscriptionsRequest::project() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListSubscriptionsRequest.project)
  return project_.GetNoArena();
}
inline void ListSubscriptionsRequest::set_project(const ::std::string& value) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListSubscriptionsRequest.project)
}
#if LANG_CXX11
inline void ListSubscriptionsRequest::set_project(::std::string&& value) {
  
  project_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.ListSubscriptionsRequest.project)
}
#endif
inline void ListSubscriptionsRequest::set_project(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ListSubscriptionsRequest.project)
}
inline void ListSubscriptionsRequest::set_project(const char* value, size_t size) {
  
  project_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ListSubscriptionsRequest.project)
}
inline ::std::string* ListSubscriptionsRequest::mutable_project() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ListSubscriptionsRequest.project)
  return project_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListSubscriptionsRequest::release_project() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ListSubscriptionsRequest.project)
  
  return project_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListSubscriptionsRequest::set_allocated_project(::std::string* project) {
  if (project != NULL) {
    
  } else {
    
  }
  project_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ListSubscriptionsRequest.project)
}

// int32 page_size = 2;
inline void ListSubscriptionsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListSubscriptionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListSubscriptionsRequest.page_size)
  return page_size_;
}
inline void ListSubscriptionsRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListSubscriptionsRequest.page_size)
}

// string page_token = 3;
inline void ListSubscriptionsRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListSubscriptionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListSubscriptionsRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListSubscriptionsRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListSubscriptionsRequest.page_token)
}
#if LANG_CXX11
inline void ListSubscriptionsRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.ListSubscriptionsRequest.page_token)
}
#endif
inline void ListSubscriptionsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ListSubscriptionsRequest.page_token)
}
inline void ListSubscriptionsRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ListSubscriptionsRequest.page_token)
}
inline ::std::string* ListSubscriptionsRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ListSubscriptionsRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListSubscriptionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ListSubscriptionsRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListSubscriptionsRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != NULL) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ListSubscriptionsRequest.page_token)
}

// -------------------------------------------------------------------

// ListSubscriptionsResponse

// repeated .google.pubsub.v1beta2.Subscription subscriptions = 1;
inline int ListSubscriptionsResponse::subscriptions_size() const {
  return subscriptions_.size();
}
inline void ListSubscriptionsResponse::clear_subscriptions() {
  subscriptions_.Clear();
}
inline const ::google::pubsub::v1beta2::Subscription& ListSubscriptionsResponse::subscriptions(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListSubscriptionsResponse.subscriptions)
  return subscriptions_.Get(index);
}
inline ::google::pubsub::v1beta2::Subscription* ListSubscriptionsResponse::mutable_subscriptions(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ListSubscriptionsResponse.subscriptions)
  return subscriptions_.Mutable(index);
}
inline ::google::pubsub::v1beta2::Subscription* ListSubscriptionsResponse::add_subscriptions() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1beta2.ListSubscriptionsResponse.subscriptions)
  return subscriptions_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::Subscription >*
ListSubscriptionsResponse::mutable_subscriptions() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1beta2.ListSubscriptionsResponse.subscriptions)
  return &subscriptions_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::Subscription >&
ListSubscriptionsResponse::subscriptions() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1beta2.ListSubscriptionsResponse.subscriptions)
  return subscriptions_;
}

// string next_page_token = 2;
inline void ListSubscriptionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListSubscriptionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ListSubscriptionsResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListSubscriptionsResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ListSubscriptionsResponse.next_page_token)
}
#if LANG_CXX11
inline void ListSubscriptionsResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.ListSubscriptionsResponse.next_page_token)
}
#endif
inline void ListSubscriptionsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ListSubscriptionsResponse.next_page_token)
}
inline void ListSubscriptionsResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ListSubscriptionsResponse.next_page_token)
}
inline ::std::string* ListSubscriptionsResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ListSubscriptionsResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListSubscriptionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ListSubscriptionsResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListSubscriptionsResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != NULL) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ListSubscriptionsResponse.next_page_token)
}

// -------------------------------------------------------------------

// DeleteSubscriptionRequest

// string subscription = 1;
inline void DeleteSubscriptionRequest::clear_subscription() {
  subscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteSubscriptionRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.DeleteSubscriptionRequest.subscription)
  return subscription_.GetNoArena();
}
inline void DeleteSubscriptionRequest::set_subscription(const ::std::string& value) {
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.DeleteSubscriptionRequest.subscription)
}
#if LANG_CXX11
inline void DeleteSubscriptionRequest::set_subscription(::std::string&& value) {
  
  subscription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.DeleteSubscriptionRequest.subscription)
}
#endif
inline void DeleteSubscriptionRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.DeleteSubscriptionRequest.subscription)
}
inline void DeleteSubscriptionRequest::set_subscription(const char* value, size_t size) {
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.DeleteSubscriptionRequest.subscription)
}
inline ::std::string* DeleteSubscriptionRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.DeleteSubscriptionRequest.subscription)
  return subscription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteSubscriptionRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.DeleteSubscriptionRequest.subscription)
  
  return subscription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteSubscriptionRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.DeleteSubscriptionRequest.subscription)
}

// -------------------------------------------------------------------

// ModifyPushConfigRequest

// string subscription = 1;
inline void ModifyPushConfigRequest::clear_subscription() {
  subscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModifyPushConfigRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ModifyPushConfigRequest.subscription)
  return subscription_.GetNoArena();
}
inline void ModifyPushConfigRequest::set_subscription(const ::std::string& value) {
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ModifyPushConfigRequest.subscription)
}
#if LANG_CXX11
inline void ModifyPushConfigRequest::set_subscription(::std::string&& value) {
  
  subscription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.ModifyPushConfigRequest.subscription)
}
#endif
inline void ModifyPushConfigRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ModifyPushConfigRequest.subscription)
}
inline void ModifyPushConfigRequest::set_subscription(const char* value, size_t size) {
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ModifyPushConfigRequest.subscription)
}
inline ::std::string* ModifyPushConfigRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ModifyPushConfigRequest.subscription)
  return subscription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModifyPushConfigRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ModifyPushConfigRequest.subscription)
  
  return subscription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifyPushConfigRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ModifyPushConfigRequest.subscription)
}

// .google.pubsub.v1beta2.PushConfig push_config = 2;
inline bool ModifyPushConfigRequest::has_push_config() const {
  return this != internal_default_instance() && push_config_ != NULL;
}
inline void ModifyPushConfigRequest::clear_push_config() {
  if (GetArenaNoVirtual() == NULL && push_config_ != NULL) {
    delete push_config_;
  }
  push_config_ = NULL;
}
inline const ::google::pubsub::v1beta2::PushConfig& ModifyPushConfigRequest::push_config() const {
  const ::google::pubsub::v1beta2::PushConfig* p = push_config_;
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ModifyPushConfigRequest.push_config)
  return p != NULL ? *p : *reinterpret_cast<const ::google::pubsub::v1beta2::PushConfig*>(
      &::google::pubsub::v1beta2::_PushConfig_default_instance_);
}
inline ::google::pubsub::v1beta2::PushConfig* ModifyPushConfigRequest::release_push_config() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ModifyPushConfigRequest.push_config)
  
  ::google::pubsub::v1beta2::PushConfig* temp = push_config_;
  push_config_ = NULL;
  return temp;
}
inline ::google::pubsub::v1beta2::PushConfig* ModifyPushConfigRequest::mutable_push_config() {
  
  if (push_config_ == NULL) {
    push_config_ = new ::google::pubsub::v1beta2::PushConfig;
  }
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ModifyPushConfigRequest.push_config)
  return push_config_;
}
inline void ModifyPushConfigRequest::set_allocated_push_config(::google::pubsub::v1beta2::PushConfig* push_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete push_config_;
  }
  if (push_config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      push_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, push_config, submessage_arena);
    }
    
  } else {
    
  }
  push_config_ = push_config;
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ModifyPushConfigRequest.push_config)
}

// -------------------------------------------------------------------

// PullRequest

// string subscription = 1;
inline void PullRequest::clear_subscription() {
  subscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PullRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.PullRequest.subscription)
  return subscription_.GetNoArena();
}
inline void PullRequest::set_subscription(const ::std::string& value) {
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.PullRequest.subscription)
}
#if LANG_CXX11
inline void PullRequest::set_subscription(::std::string&& value) {
  
  subscription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.PullRequest.subscription)
}
#endif
inline void PullRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.PullRequest.subscription)
}
inline void PullRequest::set_subscription(const char* value, size_t size) {
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.PullRequest.subscription)
}
inline ::std::string* PullRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.PullRequest.subscription)
  return subscription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PullRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.PullRequest.subscription)
  
  return subscription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PullRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.PullRequest.subscription)
}

// bool return_immediately = 2;
inline void PullRequest::clear_return_immediately() {
  return_immediately_ = false;
}
inline bool PullRequest::return_immediately() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.PullRequest.return_immediately)
  return return_immediately_;
}
inline void PullRequest::set_return_immediately(bool value) {
  
  return_immediately_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.PullRequest.return_immediately)
}

// int32 max_messages = 3;
inline void PullRequest::clear_max_messages() {
  max_messages_ = 0;
}
inline ::google::protobuf::int32 PullRequest::max_messages() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.PullRequest.max_messages)
  return max_messages_;
}
inline void PullRequest::set_max_messages(::google::protobuf::int32 value) {
  
  max_messages_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.PullRequest.max_messages)
}

// -------------------------------------------------------------------

// PullResponse

// repeated .google.pubsub.v1beta2.ReceivedMessage received_messages = 1;
inline int PullResponse::received_messages_size() const {
  return received_messages_.size();
}
inline void PullResponse::clear_received_messages() {
  received_messages_.Clear();
}
inline const ::google::pubsub::v1beta2::ReceivedMessage& PullResponse::received_messages(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.PullResponse.received_messages)
  return received_messages_.Get(index);
}
inline ::google::pubsub::v1beta2::ReceivedMessage* PullResponse::mutable_received_messages(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.PullResponse.received_messages)
  return received_messages_.Mutable(index);
}
inline ::google::pubsub::v1beta2::ReceivedMessage* PullResponse::add_received_messages() {
  // @@protoc_insertion_point(field_add:google.pubsub.v1beta2.PullResponse.received_messages)
  return received_messages_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::ReceivedMessage >*
PullResponse::mutable_received_messages() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1beta2.PullResponse.received_messages)
  return &received_messages_;
}
inline const ::google::protobuf::RepeatedPtrField< ::google::pubsub::v1beta2::ReceivedMessage >&
PullResponse::received_messages() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1beta2.PullResponse.received_messages)
  return received_messages_;
}

// -------------------------------------------------------------------

// ModifyAckDeadlineRequest

// string subscription = 1;
inline void ModifyAckDeadlineRequest::clear_subscription() {
  subscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModifyAckDeadlineRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ModifyAckDeadlineRequest.subscription)
  return subscription_.GetNoArena();
}
inline void ModifyAckDeadlineRequest::set_subscription(const ::std::string& value) {
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ModifyAckDeadlineRequest.subscription)
}
#if LANG_CXX11
inline void ModifyAckDeadlineRequest::set_subscription(::std::string&& value) {
  
  subscription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.ModifyAckDeadlineRequest.subscription)
}
#endif
inline void ModifyAckDeadlineRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ModifyAckDeadlineRequest.subscription)
}
inline void ModifyAckDeadlineRequest::set_subscription(const char* value, size_t size) {
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ModifyAckDeadlineRequest.subscription)
}
inline ::std::string* ModifyAckDeadlineRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ModifyAckDeadlineRequest.subscription)
  return subscription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModifyAckDeadlineRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ModifyAckDeadlineRequest.subscription)
  
  return subscription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifyAckDeadlineRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ModifyAckDeadlineRequest.subscription)
}

// string ack_id = 2;
inline void ModifyAckDeadlineRequest::clear_ack_id() {
  ack_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ModifyAckDeadlineRequest::ack_id() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ModifyAckDeadlineRequest.ack_id)
  return ack_id_.GetNoArena();
}
inline void ModifyAckDeadlineRequest::set_ack_id(const ::std::string& value) {
  
  ack_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ModifyAckDeadlineRequest.ack_id)
}
#if LANG_CXX11
inline void ModifyAckDeadlineRequest::set_ack_id(::std::string&& value) {
  
  ack_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.ModifyAckDeadlineRequest.ack_id)
}
#endif
inline void ModifyAckDeadlineRequest::set_ack_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  ack_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.ModifyAckDeadlineRequest.ack_id)
}
inline void ModifyAckDeadlineRequest::set_ack_id(const char* value, size_t size) {
  
  ack_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.ModifyAckDeadlineRequest.ack_id)
}
inline ::std::string* ModifyAckDeadlineRequest::mutable_ack_id() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.ModifyAckDeadlineRequest.ack_id)
  return ack_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModifyAckDeadlineRequest::release_ack_id() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.ModifyAckDeadlineRequest.ack_id)
  
  return ack_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModifyAckDeadlineRequest::set_allocated_ack_id(::std::string* ack_id) {
  if (ack_id != NULL) {
    
  } else {
    
  }
  ack_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ack_id);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.ModifyAckDeadlineRequest.ack_id)
}

// int32 ack_deadline_seconds = 3;
inline void ModifyAckDeadlineRequest::clear_ack_deadline_seconds() {
  ack_deadline_seconds_ = 0;
}
inline ::google::protobuf::int32 ModifyAckDeadlineRequest::ack_deadline_seconds() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.ModifyAckDeadlineRequest.ack_deadline_seconds)
  return ack_deadline_seconds_;
}
inline void ModifyAckDeadlineRequest::set_ack_deadline_seconds(::google::protobuf::int32 value) {
  
  ack_deadline_seconds_ = value;
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.ModifyAckDeadlineRequest.ack_deadline_seconds)
}

// -------------------------------------------------------------------

// AcknowledgeRequest

// string subscription = 1;
inline void AcknowledgeRequest::clear_subscription() {
  subscription_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcknowledgeRequest::subscription() const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.AcknowledgeRequest.subscription)
  return subscription_.GetNoArena();
}
inline void AcknowledgeRequest::set_subscription(const ::std::string& value) {
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.AcknowledgeRequest.subscription)
}
#if LANG_CXX11
inline void AcknowledgeRequest::set_subscription(::std::string&& value) {
  
  subscription_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.pubsub.v1beta2.AcknowledgeRequest.subscription)
}
#endif
inline void AcknowledgeRequest::set_subscription(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.AcknowledgeRequest.subscription)
}
inline void AcknowledgeRequest::set_subscription(const char* value, size_t size) {
  
  subscription_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.AcknowledgeRequest.subscription)
}
inline ::std::string* AcknowledgeRequest::mutable_subscription() {
  
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.AcknowledgeRequest.subscription)
  return subscription_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcknowledgeRequest::release_subscription() {
  // @@protoc_insertion_point(field_release:google.pubsub.v1beta2.AcknowledgeRequest.subscription)
  
  return subscription_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcknowledgeRequest::set_allocated_subscription(::std::string* subscription) {
  if (subscription != NULL) {
    
  } else {
    
  }
  subscription_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subscription);
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1beta2.AcknowledgeRequest.subscription)
}

// repeated string ack_ids = 2;
inline int AcknowledgeRequest::ack_ids_size() const {
  return ack_ids_.size();
}
inline void AcknowledgeRequest::clear_ack_ids() {
  ack_ids_.Clear();
}
inline const ::std::string& AcknowledgeRequest::ack_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.pubsub.v1beta2.AcknowledgeRequest.ack_ids)
  return ack_ids_.Get(index);
}
inline ::std::string* AcknowledgeRequest::mutable_ack_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.pubsub.v1beta2.AcknowledgeRequest.ack_ids)
  return ack_ids_.Mutable(index);
}
inline void AcknowledgeRequest::set_ack_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.AcknowledgeRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AcknowledgeRequest::set_ack_ids(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.pubsub.v1beta2.AcknowledgeRequest.ack_ids)
  ack_ids_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AcknowledgeRequest::set_ack_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ack_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.pubsub.v1beta2.AcknowledgeRequest.ack_ids)
}
inline void AcknowledgeRequest::set_ack_ids(int index, const char* value, size_t size) {
  ack_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.pubsub.v1beta2.AcknowledgeRequest.ack_ids)
}
inline ::std::string* AcknowledgeRequest::add_ack_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.pubsub.v1beta2.AcknowledgeRequest.ack_ids)
  return ack_ids_.Add();
}
inline void AcknowledgeRequest::add_ack_ids(const ::std::string& value) {
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.pubsub.v1beta2.AcknowledgeRequest.ack_ids)
}
#if LANG_CXX11
inline void AcknowledgeRequest::add_ack_ids(::std::string&& value) {
  ack_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.pubsub.v1beta2.AcknowledgeRequest.ack_ids)
}
#endif
inline void AcknowledgeRequest::add_ack_ids(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  ack_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.pubsub.v1beta2.AcknowledgeRequest.ack_ids)
}
inline void AcknowledgeRequest::add_ack_ids(const char* value, size_t size) {
  ack_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.pubsub.v1beta2.AcknowledgeRequest.ack_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AcknowledgeRequest::ack_ids() const {
  // @@protoc_insertion_point(field_list:google.pubsub.v1beta2.AcknowledgeRequest.ack_ids)
  return ack_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AcknowledgeRequest::mutable_ack_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.pubsub.v1beta2.AcknowledgeRequest.ack_ids)
  return &ack_ids_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta2
}  // namespace pubsub
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_google_2fpubsub_2fv1beta2_2fpubsub_2eproto__INCLUDED
