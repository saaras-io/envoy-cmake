// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/container/v1alpha1/cluster_service.proto

#include "google/container/v1alpha1/cluster_service.pb.h"
#include "google/container/v1alpha1/cluster_service.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace container {
namespace v1alpha1 {

static const char* ClusterManager_method_names[] = {
  "/google.container.v1alpha1.ClusterManager/ListClusters",
  "/google.container.v1alpha1.ClusterManager/GetCluster",
  "/google.container.v1alpha1.ClusterManager/CreateCluster",
  "/google.container.v1alpha1.ClusterManager/UpdateCluster",
  "/google.container.v1alpha1.ClusterManager/UpdateNodePool",
  "/google.container.v1alpha1.ClusterManager/SetNodePoolAutoscaling",
  "/google.container.v1alpha1.ClusterManager/SetLoggingService",
  "/google.container.v1alpha1.ClusterManager/SetMonitoringService",
  "/google.container.v1alpha1.ClusterManager/SetAddonsConfig",
  "/google.container.v1alpha1.ClusterManager/SetLocations",
  "/google.container.v1alpha1.ClusterManager/UpdateMaster",
  "/google.container.v1alpha1.ClusterManager/SetMasterAuth",
  "/google.container.v1alpha1.ClusterManager/DeleteCluster",
  "/google.container.v1alpha1.ClusterManager/ListOperations",
  "/google.container.v1alpha1.ClusterManager/GetOperation",
  "/google.container.v1alpha1.ClusterManager/CancelOperation",
  "/google.container.v1alpha1.ClusterManager/GetServerConfig",
  "/google.container.v1alpha1.ClusterManager/ListNodePools",
  "/google.container.v1alpha1.ClusterManager/GetNodePool",
  "/google.container.v1alpha1.ClusterManager/CreateNodePool",
  "/google.container.v1alpha1.ClusterManager/DeleteNodePool",
  "/google.container.v1alpha1.ClusterManager/RollbackNodePoolUpgrade",
  "/google.container.v1alpha1.ClusterManager/SetNodePoolManagement",
  "/google.container.v1alpha1.ClusterManager/SetLabels",
  "/google.container.v1alpha1.ClusterManager/SetLegacyAbac",
  "/google.container.v1alpha1.ClusterManager/StartIPRotation",
  "/google.container.v1alpha1.ClusterManager/CompleteIPRotation",
  "/google.container.v1alpha1.ClusterManager/SetNodePoolSize",
  "/google.container.v1alpha1.ClusterManager/SetNetworkPolicy",
  "/google.container.v1alpha1.ClusterManager/SetMaintenancePolicy",
};

std::unique_ptr< ClusterManager::Stub> ClusterManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClusterManager::Stub> stub(new ClusterManager::Stub(channel));
  return stub;
}

ClusterManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListClusters_(ClusterManager_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCluster_(ClusterManager_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCluster_(ClusterManager_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCluster_(ClusterManager_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNodePool_(ClusterManager_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNodePoolAutoscaling_(ClusterManager_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLoggingService_(ClusterManager_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMonitoringService_(ClusterManager_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAddonsConfig_(ClusterManager_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLocations_(ClusterManager_method_names[9], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateMaster_(ClusterManager_method_names[10], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMasterAuth_(ClusterManager_method_names[11], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCluster_(ClusterManager_method_names[12], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOperations_(ClusterManager_method_names[13], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOperation_(ClusterManager_method_names[14], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOperation_(ClusterManager_method_names[15], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServerConfig_(ClusterManager_method_names[16], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNodePools_(ClusterManager_method_names[17], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNodePool_(ClusterManager_method_names[18], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateNodePool_(ClusterManager_method_names[19], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNodePool_(ClusterManager_method_names[20], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RollbackNodePoolUpgrade_(ClusterManager_method_names[21], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNodePoolManagement_(ClusterManager_method_names[22], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLabels_(ClusterManager_method_names[23], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLegacyAbac_(ClusterManager_method_names[24], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartIPRotation_(ClusterManager_method_names[25], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CompleteIPRotation_(ClusterManager_method_names[26], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNodePoolSize_(ClusterManager_method_names[27], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNetworkPolicy_(ClusterManager_method_names[28], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMaintenancePolicy_(ClusterManager_method_names[29], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClusterManager::Stub::ListClusters(::grpc::ClientContext* context, const ::google::container::v1alpha1::ListClustersRequest& request, ::google::container::v1alpha1::ListClustersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListClusters_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::ListClustersResponse>* ClusterManager::Stub::AsyncListClustersRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::ListClustersResponse>::Create(channel_.get(), cq, rpcmethod_ListClusters_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::ListClustersResponse>* ClusterManager::Stub::PrepareAsyncListClustersRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::ListClustersResponse>::Create(channel_.get(), cq, rpcmethod_ListClusters_, context, request, false);
}

::grpc::Status ClusterManager::Stub::GetCluster(::grpc::ClientContext* context, const ::google::container::v1alpha1::GetClusterRequest& request, ::google::container::v1alpha1::Cluster* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Cluster>* ClusterManager::Stub::AsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Cluster>::Create(channel_.get(), cq, rpcmethod_GetCluster_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Cluster>* ClusterManager::Stub::PrepareAsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Cluster>::Create(channel_.get(), cq, rpcmethod_GetCluster_, context, request, false);
}

::grpc::Status ClusterManager::Stub::CreateCluster(::grpc::ClientContext* context, const ::google::container::v1alpha1::CreateClusterRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_CreateCluster_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_CreateCluster_, context, request, false);
}

::grpc::Status ClusterManager::Stub::UpdateCluster(::grpc::ClientContext* context, const ::google::container::v1alpha1::UpdateClusterRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateCluster_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateCluster_, context, request, false);
}

::grpc::Status ClusterManager::Stub::UpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1alpha1::UpdateNodePoolRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateNodePool_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncUpdateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::UpdateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateNodePool_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncUpdateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::UpdateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateNodePool_, context, request, false);
}

::grpc::Status ClusterManager::Stub::SetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetNodePoolAutoscalingRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetNodePoolAutoscaling_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncSetNodePoolAutoscalingRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetNodePoolAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetNodePoolAutoscaling_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncSetNodePoolAutoscalingRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetNodePoolAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetNodePoolAutoscaling_, context, request, false);
}

::grpc::Status ClusterManager::Stub::SetLoggingService(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetLoggingServiceRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetLoggingService_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncSetLoggingServiceRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetLoggingServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetLoggingService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncSetLoggingServiceRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetLoggingServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetLoggingService_, context, request, false);
}

::grpc::Status ClusterManager::Stub::SetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetMonitoringServiceRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetMonitoringService_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncSetMonitoringServiceRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetMonitoringServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetMonitoringService_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncSetMonitoringServiceRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetMonitoringServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetMonitoringService_, context, request, false);
}

::grpc::Status ClusterManager::Stub::SetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetAddonsConfigRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetAddonsConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncSetAddonsConfigRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetAddonsConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetAddonsConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncSetAddonsConfigRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetAddonsConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetAddonsConfig_, context, request, false);
}

::grpc::Status ClusterManager::Stub::SetLocations(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetLocationsRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetLocations_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncSetLocationsRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetLocations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncSetLocationsRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetLocations_, context, request, false);
}

::grpc::Status ClusterManager::Stub::UpdateMaster(::grpc::ClientContext* context, const ::google::container::v1alpha1::UpdateMasterRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateMaster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncUpdateMasterRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::UpdateMasterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateMaster_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncUpdateMasterRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::UpdateMasterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_UpdateMaster_, context, request, false);
}

::grpc::Status ClusterManager::Stub::SetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetMasterAuthRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetMasterAuth_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncSetMasterAuthRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetMasterAuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetMasterAuth_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncSetMasterAuthRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetMasterAuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetMasterAuth_, context, request, false);
}

::grpc::Status ClusterManager::Stub::DeleteCluster(::grpc::ClientContext* context, const ::google::container::v1alpha1::DeleteClusterRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteCluster_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_DeleteCluster_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_DeleteCluster_, context, request, false);
}

::grpc::Status ClusterManager::Stub::ListOperations(::grpc::ClientContext* context, const ::google::container::v1alpha1::ListOperationsRequest& request, ::google::container::v1alpha1::ListOperationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListOperations_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::ListOperationsResponse>* ClusterManager::Stub::AsyncListOperationsRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::ListOperationsResponse>::Create(channel_.get(), cq, rpcmethod_ListOperations_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::ListOperationsResponse>* ClusterManager::Stub::PrepareAsyncListOperationsRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::ListOperationsResponse>::Create(channel_.get(), cq, rpcmethod_ListOperations_, context, request, false);
}

::grpc::Status ClusterManager::Stub::GetOperation(::grpc::ClientContext* context, const ::google::container::v1alpha1::GetOperationRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetOperation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncGetOperationRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_GetOperation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncGetOperationRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_GetOperation_, context, request, false);
}

::grpc::Status ClusterManager::Stub::CancelOperation(::grpc::ClientContext* context, const ::google::container::v1alpha1::CancelOperationRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CancelOperation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ClusterManager::Stub::AsyncCancelOperationRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_CancelOperation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ClusterManager::Stub::PrepareAsyncCancelOperationRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::protobuf::Empty>::Create(channel_.get(), cq, rpcmethod_CancelOperation_, context, request, false);
}

::grpc::Status ClusterManager::Stub::GetServerConfig(::grpc::ClientContext* context, const ::google::container::v1alpha1::GetServerConfigRequest& request, ::google::container::v1alpha1::ServerConfig* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetServerConfig_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::ServerConfig>* ClusterManager::Stub::AsyncGetServerConfigRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::ServerConfig>::Create(channel_.get(), cq, rpcmethod_GetServerConfig_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::ServerConfig>* ClusterManager::Stub::PrepareAsyncGetServerConfigRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::ServerConfig>::Create(channel_.get(), cq, rpcmethod_GetServerConfig_, context, request, false);
}

::grpc::Status ClusterManager::Stub::ListNodePools(::grpc::ClientContext* context, const ::google::container::v1alpha1::ListNodePoolsRequest& request, ::google::container::v1alpha1::ListNodePoolsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListNodePools_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::ListNodePoolsResponse>* ClusterManager::Stub::AsyncListNodePoolsRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::ListNodePoolsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::ListNodePoolsResponse>::Create(channel_.get(), cq, rpcmethod_ListNodePools_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::ListNodePoolsResponse>* ClusterManager::Stub::PrepareAsyncListNodePoolsRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::ListNodePoolsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::ListNodePoolsResponse>::Create(channel_.get(), cq, rpcmethod_ListNodePools_, context, request, false);
}

::grpc::Status ClusterManager::Stub::GetNodePool(::grpc::ClientContext* context, const ::google::container::v1alpha1::GetNodePoolRequest& request, ::google::container::v1alpha1::NodePool* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetNodePool_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::NodePool>* ClusterManager::Stub::AsyncGetNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::GetNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::NodePool>::Create(channel_.get(), cq, rpcmethod_GetNodePool_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::NodePool>* ClusterManager::Stub::PrepareAsyncGetNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::GetNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::NodePool>::Create(channel_.get(), cq, rpcmethod_GetNodePool_, context, request, false);
}

::grpc::Status ClusterManager::Stub::CreateNodePool(::grpc::ClientContext* context, const ::google::container::v1alpha1::CreateNodePoolRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateNodePool_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncCreateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::CreateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_CreateNodePool_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncCreateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::CreateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_CreateNodePool_, context, request, false);
}

::grpc::Status ClusterManager::Stub::DeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1alpha1::DeleteNodePoolRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteNodePool_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncDeleteNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::DeleteNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_DeleteNodePool_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncDeleteNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::DeleteNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_DeleteNodePool_, context, request, false);
}

::grpc::Status ClusterManager::Stub::RollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1alpha1::RollbackNodePoolUpgradeRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RollbackNodePoolUpgrade_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncRollbackNodePoolUpgradeRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::RollbackNodePoolUpgradeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_RollbackNodePoolUpgrade_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncRollbackNodePoolUpgradeRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::RollbackNodePoolUpgradeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_RollbackNodePoolUpgrade_, context, request, false);
}

::grpc::Status ClusterManager::Stub::SetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetNodePoolManagementRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetNodePoolManagement_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncSetNodePoolManagementRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetNodePoolManagementRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetNodePoolManagement_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncSetNodePoolManagementRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetNodePoolManagementRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetNodePoolManagement_, context, request, false);
}

::grpc::Status ClusterManager::Stub::SetLabels(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetLabelsRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetLabels_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncSetLabelsRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetLabelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetLabels_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncSetLabelsRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetLabelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetLabels_, context, request, false);
}

::grpc::Status ClusterManager::Stub::SetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetLegacyAbacRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetLegacyAbac_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncSetLegacyAbacRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetLegacyAbacRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetLegacyAbac_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncSetLegacyAbacRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetLegacyAbacRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetLegacyAbac_, context, request, false);
}

::grpc::Status ClusterManager::Stub::StartIPRotation(::grpc::ClientContext* context, const ::google::container::v1alpha1::StartIPRotationRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartIPRotation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncStartIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::StartIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_StartIPRotation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncStartIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::StartIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_StartIPRotation_, context, request, false);
}

::grpc::Status ClusterManager::Stub::CompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1alpha1::CompleteIPRotationRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CompleteIPRotation_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncCompleteIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::CompleteIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_CompleteIPRotation_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncCompleteIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::CompleteIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_CompleteIPRotation_, context, request, false);
}

::grpc::Status ClusterManager::Stub::SetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetNodePoolSizeRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetNodePoolSize_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncSetNodePoolSizeRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetNodePoolSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetNodePoolSize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncSetNodePoolSizeRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetNodePoolSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetNodePoolSize_, context, request, false);
}

::grpc::Status ClusterManager::Stub::SetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetNetworkPolicyRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetNetworkPolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncSetNetworkPolicyRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetNetworkPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetNetworkPolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncSetNetworkPolicyRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetNetworkPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetNetworkPolicy_, context, request, false);
}

::grpc::Status ClusterManager::Stub::SetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetMaintenancePolicyRequest& request, ::google::container::v1alpha1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SetMaintenancePolicy_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::AsyncSetMaintenancePolicyRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetMaintenancePolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetMaintenancePolicy_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1alpha1::Operation>* ClusterManager::Stub::PrepareAsyncSetMaintenancePolicyRaw(::grpc::ClientContext* context, const ::google::container::v1alpha1::SetMaintenancePolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::google::container::v1alpha1::Operation>::Create(channel_.get(), cq, rpcmethod_SetMaintenancePolicy_, context, request, false);
}

ClusterManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::ListClustersRequest, ::google::container::v1alpha1::ListClustersResponse>(
          std::mem_fn(&ClusterManager::Service::ListClusters), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::GetClusterRequest, ::google::container::v1alpha1::Cluster>(
          std::mem_fn(&ClusterManager::Service::GetCluster), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::CreateClusterRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::CreateCluster), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::UpdateClusterRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::UpdateCluster), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::UpdateNodePoolRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::UpdateNodePool), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::SetNodePoolAutoscalingRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::SetNodePoolAutoscaling), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::SetLoggingServiceRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::SetLoggingService), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::SetMonitoringServiceRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::SetMonitoringService), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::SetAddonsConfigRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::SetAddonsConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::SetLocationsRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::SetLocations), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::UpdateMasterRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::UpdateMaster), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::SetMasterAuthRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::SetMasterAuth), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::DeleteClusterRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::DeleteCluster), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::ListOperationsRequest, ::google::container::v1alpha1::ListOperationsResponse>(
          std::mem_fn(&ClusterManager::Service::ListOperations), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::GetOperationRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::GetOperation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::CancelOperationRequest, ::google::protobuf::Empty>(
          std::mem_fn(&ClusterManager::Service::CancelOperation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::GetServerConfigRequest, ::google::container::v1alpha1::ServerConfig>(
          std::mem_fn(&ClusterManager::Service::GetServerConfig), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::ListNodePoolsRequest, ::google::container::v1alpha1::ListNodePoolsResponse>(
          std::mem_fn(&ClusterManager::Service::ListNodePools), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::GetNodePoolRequest, ::google::container::v1alpha1::NodePool>(
          std::mem_fn(&ClusterManager::Service::GetNodePool), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::CreateNodePoolRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::CreateNodePool), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::DeleteNodePoolRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::DeleteNodePool), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::RollbackNodePoolUpgradeRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::RollbackNodePoolUpgrade), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::SetNodePoolManagementRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::SetNodePoolManagement), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::SetLabelsRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::SetLabels), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::SetLegacyAbacRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::SetLegacyAbac), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::StartIPRotationRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::StartIPRotation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::CompleteIPRotationRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::CompleteIPRotation), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::SetNodePoolSizeRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::SetNodePoolSize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::SetNetworkPolicyRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::SetNetworkPolicy), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1alpha1::SetMaintenancePolicyRequest, ::google::container::v1alpha1::Operation>(
          std::mem_fn(&ClusterManager::Service::SetMaintenancePolicy), this)));
}

ClusterManager::Service::~Service() {
}

::grpc::Status ClusterManager::Service::ListClusters(::grpc::ServerContext* context, const ::google::container::v1alpha1::ListClustersRequest* request, ::google::container::v1alpha1::ListClustersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::GetCluster(::grpc::ServerContext* context, const ::google::container::v1alpha1::GetClusterRequest* request, ::google::container::v1alpha1::Cluster* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::CreateCluster(::grpc::ServerContext* context, const ::google::container::v1alpha1::CreateClusterRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::UpdateCluster(::grpc::ServerContext* context, const ::google::container::v1alpha1::UpdateClusterRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::UpdateNodePool(::grpc::ServerContext* context, const ::google::container::v1alpha1::UpdateNodePoolRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetNodePoolAutoscaling(::grpc::ServerContext* context, const ::google::container::v1alpha1::SetNodePoolAutoscalingRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetLoggingService(::grpc::ServerContext* context, const ::google::container::v1alpha1::SetLoggingServiceRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetMonitoringService(::grpc::ServerContext* context, const ::google::container::v1alpha1::SetMonitoringServiceRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetAddonsConfig(::grpc::ServerContext* context, const ::google::container::v1alpha1::SetAddonsConfigRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetLocations(::grpc::ServerContext* context, const ::google::container::v1alpha1::SetLocationsRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::UpdateMaster(::grpc::ServerContext* context, const ::google::container::v1alpha1::UpdateMasterRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetMasterAuth(::grpc::ServerContext* context, const ::google::container::v1alpha1::SetMasterAuthRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::DeleteCluster(::grpc::ServerContext* context, const ::google::container::v1alpha1::DeleteClusterRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::ListOperations(::grpc::ServerContext* context, const ::google::container::v1alpha1::ListOperationsRequest* request, ::google::container::v1alpha1::ListOperationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::GetOperation(::grpc::ServerContext* context, const ::google::container::v1alpha1::GetOperationRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::CancelOperation(::grpc::ServerContext* context, const ::google::container::v1alpha1::CancelOperationRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::GetServerConfig(::grpc::ServerContext* context, const ::google::container::v1alpha1::GetServerConfigRequest* request, ::google::container::v1alpha1::ServerConfig* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::ListNodePools(::grpc::ServerContext* context, const ::google::container::v1alpha1::ListNodePoolsRequest* request, ::google::container::v1alpha1::ListNodePoolsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::GetNodePool(::grpc::ServerContext* context, const ::google::container::v1alpha1::GetNodePoolRequest* request, ::google::container::v1alpha1::NodePool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::CreateNodePool(::grpc::ServerContext* context, const ::google::container::v1alpha1::CreateNodePoolRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::DeleteNodePool(::grpc::ServerContext* context, const ::google::container::v1alpha1::DeleteNodePoolRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::RollbackNodePoolUpgrade(::grpc::ServerContext* context, const ::google::container::v1alpha1::RollbackNodePoolUpgradeRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetNodePoolManagement(::grpc::ServerContext* context, const ::google::container::v1alpha1::SetNodePoolManagementRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetLabels(::grpc::ServerContext* context, const ::google::container::v1alpha1::SetLabelsRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetLegacyAbac(::grpc::ServerContext* context, const ::google::container::v1alpha1::SetLegacyAbacRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::StartIPRotation(::grpc::ServerContext* context, const ::google::container::v1alpha1::StartIPRotationRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::CompleteIPRotation(::grpc::ServerContext* context, const ::google::container::v1alpha1::CompleteIPRotationRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetNodePoolSize(::grpc::ServerContext* context, const ::google::container::v1alpha1::SetNodePoolSizeRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetNetworkPolicy(::grpc::ServerContext* context, const ::google::container::v1alpha1::SetNetworkPolicyRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetMaintenancePolicy(::grpc::ServerContext* context, const ::google::container::v1alpha1::SetMaintenancePolicyRequest* request, ::google::container::v1alpha1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace container
}  // namespace v1alpha1

